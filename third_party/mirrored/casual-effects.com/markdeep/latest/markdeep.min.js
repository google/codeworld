/**
  Markdeep.js
  Version 1.10

  Copyright 2015-2020, Morgan McGuire, https://casual-effects.com
  All rights reserved.

  -------------------------------------------------------------

  See https://casual-effects.com/markdeep for documentation on how to
  use this script make your plain text documents render beautifully
  in web browsers.

  Markdeep was created by Morgan McGuire. It extends the work of:

   - John Gruber's original Markdown
   - Ben Hollis' Maruku Markdown dialect
   - Michel Fortin's Markdown Extras dialect
   - Ivan Sagalaev's highlight.js
   - Contributors to the above open source projects

  -------------------------------------------------------------
 
  You may use, extend, and redistribute this code under the terms of
  the BSD license at https://opensource.org/licenses/BSD-2-Clause.

  Contains highlight.js (https://github.com/isagalaev/highlight.js) by Ivan
  Sagalaev, which is used for code highlighting. (BSD 3-clause license)
*/
/**See https://casual-effects.com/markdeep for @license and documentation.
markdeep.min.js 1.10 (C) 2020 Morgan McGuire 
highlight.min.js 10.0.0-beta.0 (C) 2020 Ivan Sagalaev https://highlightjs.org */
(function () {
  const MARKDEEP_FOOTER =
    '<div class="markdeepFooter"><i>formatted by <a href="https://casual-effects.com/markdeep" style="color:#999">Markdeep&nbsp;1.10&nbsp;&nbsp;</a></i><div style="display:inline-block;font-size:13px;font-family:\'Times New Roman\',serif;vertical-align:middle;transform:translate(-3px,-1px)rotate(135deg);">&#x2712;</div></div>';

  {
    // For minification. This is admittedly scary.
    const _ = String.prototype;
    _.rp = _.replace;
    _.ss = _.substring;
    if (!_.endsWith) {
      // For IE11
      _.endsWith = function (S, L) {
        if (L === undefined || L > this.length) {
          L = this.length;
        }
        return this.ss(L - S.length, L) === S;
      };
    }

    // Regular expression version of String.indexOf
    _.regexIndexOf = function (regex, startpos) {
      const i = this.ss(startpos || 0).search(regex);
      return i >= 0 ? i + (startpos || 0) : i;
    };
  }

  /** Enable for debugging to view character bounds in diagrams */
  const DEBUG_SHOW_GRID = false;

  /** Overlay the non-empty characters of the original source in diagrams */
  const DEBUG_SHOW_SOURCE = DEBUG_SHOW_GRID;

  /** Use to suppress passing through text in diagrams */
  const DEBUG_HIDE_PASSTHROUGH = DEBUG_SHOW_SOURCE;

  /** In pixels of lines in diagrams */
  const STROKE_WIDTH = 2;

  /** A box of these denotes a diagram */
  const DIAGRAM_MARKER = "*";

  // http://stackoverflow.com/questions/1877475/repeat-character-n-times
  // ECMAScript 6 has a String.repeat method, but that's not available everywhere
  const DIAGRAM_START = Array(5 + 1).join(DIAGRAM_MARKER);

  /** attribs are optional */
  function entag(tag, content, attribs) {
    return `<${tag}${attribs ? ` ${attribs}` : ""}>${content}</${tag}>`;
  }

  function measureFontSize(fontStack) {
    try {
      const canvas = document.createElement("canvas");
      const ctx = canvas.getContext("2d");
      ctx.font = `10pt ${fontStack}`;
      return ctx.measureText("M").width;
    } catch (e) {
      // Needed for Firefox include...canvas doesn't work for some reason
      return 10;
    }
  }

  /*
  Highlight.js 10.0.0-beta.0 (ca23180c)
  License: BSD-3-Clause
  Copyright (c) 2006-2020, Ivan Sagalaev
*/
  !(function (e) {
    const t =
      ("object" === typeof window && window) ||
      ("object" === typeof self && self);
    "undefined" !== typeof exports
      ? e(exports)
      : t &&
        ((t.hljs = e({})),
        "function" === typeof define &&
          define.amd &&
          define([], () => {
            return t.hljs;
          }));
  })((e) => {
    function t(e) {
      return e
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;");
    }
    function r(e) {
      return e.nodeName.toLowerCase();
    }
    function a(e, t) {
      const r = e && e.exec(t);
      return r && 0 === r.index;
    }
    function n(e) {
      return E.test(e);
    }
    function i(e) {
      let t,
        r,
        a,
        i,
        s = `${e.className} `;
      if (
        ((s += e.parentNode ? e.parentNode.className : ""), (r = A.exec(s)))
      ) {
        return v(r[1]) ? r[1] : "no-highlight";
      }
      for (s = s.split(/\s+/), t = 0, a = s.length; a > t; t++) {
        if (((i = s[t]), n(i) || v(i))) return i;
      }
    }
    function s(e) {
      let t,
        r = {},
        a = Array.prototype.slice.call(arguments, 1);
      for (t in e) r[t] = e[t];
      return (
        a.forEach((e) => {
          for (t in e) r[t] = e[t];
        }),
        r
      );
    }
    function o(e) {
      const t = [];
      return (
        (function a(e, n) {
          for (let i = e.firstChild; i; i = i.nextSibling) {
            3 === i.nodeType
              ? (n += i.nodeValue.length)
              : 1 === i.nodeType &&
                (t.push({ event: "start", offset: n, node: i }),
                (n = a(i, n)),
                r(i).match(/br|hr|img|input/) ||
                  t.push({ event: "stop", offset: n, node: i }));
          }
          return n;
        })(e, 0),
        t
      );
    }
    function c(e, a, n) {
      function i() {
        return e.length && a.length
          ? e[0].offset !== a[0].offset
            ? e[0].offset < a[0].offset
              ? e
              : a
            : "start" === a[0].event
            ? e
            : a
          : e.length
          ? e
          : a;
      }
      function s(e) {
        function a(e) {
          return ` ${e.nodeName}="${t(e.value).replace('"', "&quot;")}"`;
        }
        u += `<${r(e)}${N.map.call(e.attributes, a).join("")}>`;
      }
      function o(e) {
        u += `</${r(e)}>`;
      }
      function c(e) {
        ("start" === e.event ? s : o)(e.node);
      }
      for (var l = 0, u = "", d = []; e.length || a.length; ) {
        let b = i();
        if (
          ((u += t(n.substring(l, b[0].offset))), (l = b[0].offset), b === e)
        ) {
          d.reverse().forEach(o);
          do c(b.splice(0, 1)[0]), (b = i());
          while (b === e && b.length && b[0].offset === l);
          d.reverse().forEach(s);
        } else {
          "start" === b[0].event ? d.push(b[0].node) : d.pop(),
            c(b.splice(0, 1)[0]);
        }
      }
      return u + t(n.substr(l));
    }
    function l(e) {
      return (
        e.v &&
          !e.cached_variants &&
          (e.cached_variants = e.v.map((t) => {
            return s(e, { v: null }, t);
          })),
        e.cached_variants || (e.eW && [s(e)]) || [e]
      );
    }
    function u(e) {
      function t(e) {
        return (e && e.source) || e;
      }
      function r(r, a) {
        return new RegExp(t(r), `m${e.cI ? "i" : ""}${a ? "g" : ""}`);
      }
      function a(n, i) {
        if (!n.compiled) {
          if (((n.compiled = !0), (n.k = n.k || n.bK), n.k)) {
            const s = {},
              o = function (t, r) {
                e.cI && (r = r.toLowerCase()),
                  r.split(" ").forEach((e) => {
                    const r = e.split("|");
                    s[r[0]] = [t, r[1] ? Number(r[1]) : 1];
                  });
              };
            "string" === typeof n.k
              ? o("keyword", n.k)
              : C(n.k).forEach((e) => {
                  o(e, n.k[e]);
                }),
              (n.k = s);
          }
          (n.lR = r(n.l || /\w+/, !0)),
            i &&
              (n.bK && (n.b = `\\b(${n.bK.split(" ").join("|")})\\b`),
              n.b || (n.b = /\B|\b/),
              (n.bR = r(n.b)),
              n.endSameAsBegin && (n.e = n.b),
              n.e || n.eW || (n.e = /\B|\b/),
              n.e && (n.eR = r(n.e)),
              (n.tE = t(n.e) || ""),
              n.eW && i.tE && (n.tE += (n.e ? "|" : "") + i.tE)),
            n.i && (n.iR = r(n.i)),
            null == n.r && (n.r = 1),
            n.c || (n.c = []),
            (n.c = Array.prototype.concat.apply(
              [],
              n.c.map((e) => {
                return l("self" === e ? n : e);
              })
            )),
            n.c.forEach((e) => {
              a(e, n);
            }),
            n.starts && a(n.starts, i);
          const c = n.c
            .map((e) => {
              return e.bK ? `\\.?(${e.b})\\.?` : e.b;
            })
            .concat([n.tE, n.i])
            .map(t)
            .filter(Boolean);
          n.t = c.length
            ? r(c.join("|"), !0)
            : {
                exec: function () {
                  return null;
                },
              };
        }
      }
      a(e);
    }
    function d(e, r, n, i) {
      function s(e) {
        return new RegExp(e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
      }
      function o(e, t) {
        let r, n;
        for (r = 0, n = t.c.length; n > r; r++) {
          if (a(t.c[r].bR, e)) {
            return (
              t.c[r].endSameAsBegin && (t.c[r].eR = s(t.c[r].bR.exec(e)[0])),
              t.c[r]
            );
          }
        }
      }
      function c(e, t) {
        if (a(e.eR, t)) {
          for (; e.endsParent && e.parent; ) e = e.parent;
          return e;
        }
        return e.eW ? c(e.parent, t) : void 0;
      }
      function l(e, t) {
        return !n && a(t.iR, e);
      }
      function p(e, t) {
        const r = y.cI ? t[0].toLowerCase() : t[0];
        return e.k.hasOwnProperty(r) && e.k[r];
      }
      function m(e, t, r, a) {
        let n = a ? "" : L.classPrefix,
          i = `<span class="${n}`,
          s = r ? "" : S;
        return (i += `${e}">`), i + t + s;
      }
      function g() {
        let e, r, a, n;
        if (!N.k) return t(E);
        for (n = "", r = 0, N.lR.lastIndex = 0, a = N.lR.exec(E); a; ) {
          (n += t(E.substring(r, a.index))),
            (e = p(N, a)),
            e ? ((A += e[1]), (n += m(e[0], t(a[0])))) : (n += t(a[0])),
            (r = N.lR.lastIndex),
            (a = N.lR.exec(E));
        }
        return n + t(E.substr(r));
      }
      function f() {
        const e = "string" === typeof N.sL;
        if (e && !M[N.sL]) return t(E);
        const r = e
          ? d(N.sL, E, !0, C[N.sL])
          : b(E, N.sL.length ? N.sL : void 0);
        return (
          N.r > 0 && (A += r.r),
          e && (C[N.sL] = r.top),
          m(r.language, r.value, !1, !0)
        );
      }
      function _() {
        (k += null != N.sL ? f() : g()), (E = "");
      }
      function h(e) {
        (k += e.cN ? m(e.cN, "", !0) : ""),
          (N = Object.create(e, { parent: { value: N } }));
      }
      function x(e, t) {
        if (((E += e), null == t)) return _(), 0;
        const r = o(t, N);
        if (r) {
          return (
            r.skip
              ? (E += t)
              : (r.eB && (E += t), _(), r.rB || r.eB || (E = t)),
            h(r, t),
            r.rB ? 0 : t.length
          );
        }
        const a = c(N, t);
        if (a) {
          const n = N;
          n.skip ? (E += t) : (n.rE || n.eE || (E += t), _(), n.eE && (E = t));
          do N.cN && (k += S), N.skip || N.sL || (A += N.r), (N = N.parent);
          while (N !== a.parent);
          return (
            a.starts &&
              (a.endSameAsBegin && (a.starts.eR = a.eR), h(a.starts, "")),
            n.rE ? 0 : t.length
          );
        }
        if (l(t, N)) {
          throw new Error(
            `Illegal lexeme "${t}" for mode "${N.cN || "<unnamed>"}"`
          );
        }
        return (E += t), t.length || 1;
      }
      var y = v(e);
      if (!y) throw new Error(`Unknown language: "${e}"`);
      u(y);
      var w,
        N = i || y,
        C = {},
        k = "";
      for (w = N; w !== y; w = w.parent) w.cN && (k = m(w.cN, "", !0) + k);
      var E = "",
        A = 0;
      try {
        for (var B, I, T = 0; ; ) {
          if (((N.t.lastIndex = T), (B = N.t.exec(r)), !B)) break;
          (I = x(r.substring(T, B.index), B[0])), (T = B.index + I);
        }
        for (x(r.substr(T)), w = N; w.parent; w = w.parent) w.cN && (k += S);
        return { r: A, value: k, language: e, top: N };
      } catch (R) {
        if (R.message && -1 !== R.message.indexOf("Illegal")) {
          return { r: 0, value: t(r) };
        }
        throw R;
      }
    }
    function b(e, r) {
      r = r || L.languages || C(M);
      let a = { r: 0, value: t(e) },
        n = a;
      return (
        r
          .filter(v)
          .filter(w)
          .forEach((t) => {
            const r = d(t, e, !1);
            (r.language = t),
              r.r > n.r && (n = r),
              r.r > a.r && ((n = a), (a = r));
          }),
        n.language && (a.second_best = n),
        a
      );
    }
    function p(e) {
      return L.tabReplace || L.useBR
        ? e.replace(B, (e, t) => {
            return L.useBR && "\n" === e
              ? "<br>"
              : L.tabReplace
              ? t.replace(/\t/g, L.tabReplace)
              : "";
          })
        : e;
    }
    function m(e, t, r) {
      const a = t ? k[t] : r,
        n = [e.trim()];
      return (
        e.match(/\bhljs\b/) || n.push("hljs"),
        -1 === e.indexOf(a) && n.push(a),
        n.join(" ").trim()
      );
    }
    function g(e) {
      let t,
        r,
        a,
        s,
        l,
        u = i(e);
      n(u) ||
        (L.useBR
          ? ((t = document.createElementNS(
              "http://www.w3.org/1999/xhtml",
              "div"
            )),
            (t.innerHTML = e.innerHTML
              .replace(/\n/g, "")
              .replace(/<br[ \/]*>/g, "\n")))
          : (t = e),
        (l = t.textContent),
        (a = u ? d(u, l, !0) : b(l)),
        (r = o(t)),
        r.length &&
          ((s = document.createElementNS(
            "http://www.w3.org/1999/xhtml",
            "div"
          )),
          (s.innerHTML = a.value),
          (a.value = c(r, o(s), l))),
        (a.value = p(a.value)),
        (e.innerHTML = a.value),
        (e.className = m(e.className, u, a.language)),
        (e.result = { language: a.language, re: a.r }),
        a.second_best &&
          (e.second_best = {
            language: a.second_best.language,
            re: a.second_best.r,
          }));
    }
    function f(e) {
      L = s(L, e);
    }
    function _() {
      if (!_.called) {
        _.called = !0;
        const e = document.querySelectorAll("pre code");
        N.forEach.call(e, g);
      }
    }
    function h() {
      addEventListener("DOMContentLoaded", _, !1),
        addEventListener("load", _, !1);
    }
    function x(t, r) {
      const a = (M[t] = r(e));
      a.aliases &&
        a.aliases.forEach((e) => {
          k[e] = t;
        });
    }
    function y() {
      return C(M);
    }
    function v(e) {
      return (e = (e || "").toLowerCase()), M[e] || M[k[e]];
    }
    function w(e) {
      const t = v(e);
      return t && !t.disableAutodetect;
    }
    var N = [],
      C = Object.keys,
      M = {},
      k = {},
      E = /^(no-?highlight|plain|text)$/i,
      A = /\blang(?:uage)?-([\w-]+)\b/i,
      B = /((^(<[^>]+>|\t|)+|(?:\n)))/gm,
      S = "</span>",
      L = {
        classPrefix: "hljs-",
        tabReplace: null,
        useBR: !1,
        languages: void 0,
      };
    return (
      (e.highlight = d),
      (e.highlightAuto = b),
      (e.fixMarkup = p),
      (e.highlightBlock = g),
      (e.configure = f),
      (e.initHighlighting = _),
      (e.initHighlightingOnLoad = h),
      (e.registerLanguage = x),
      (e.listLanguages = y),
      (e.getLanguage = v),
      (e.autoDetection = w),
      (e.inherit = s),
      (e.IR = "[a-zA-Z]\\w*"),
      (e.UIR = "[a-zA-Z_]\\w*"),
      (e.NR = "\\b\\d+(\\.\\d+)?"),
      (e.CNR =
        "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)"),
      (e.BNR = "\\b(0b[01]+)"),
      (e.RSR =
        "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~"),
      (e.BE = { b: "\\\\[\\s\\S]", r: 0 }),
      (e.ASM = { cN: "string", b: "'", e: "'", i: "\\n", c: [e.BE] }),
      (e.QSM = { cN: "string", b: '"', e: '"', i: "\\n", c: [e.BE] }),
      (e.PWM = {
        b: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/,
      }),
      (e.C = function (t, r, a) {
        const n = e.inherit({ cN: "comment", b: t, e: r, c: [] }, a || {});
        return (
          n.c.push(e.PWM),
          n.c.push({ cN: "doctag", b: "(?:TODO|FIXME|NOTE|BUG|XXX):", r: 0 }),
          n
        );
      }),
      (e.CLCM = e.C("//", "$")),
      (e.CBCM = e.C("/\\*", "\\*/")),
      (e.HCM = e.C("#", "$")),
      (e.NM = { cN: "number", b: e.NR, r: 0 }),
      (e.CNM = { cN: "number", b: e.CNR, r: 0 }),
      (e.BNM = { cN: "number", b: e.BNR, r: 0 }),
      (e.CSSNM = {
        cN: "number",
        b: `${e.NR}(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?`,
        r: 0,
      }),
      (e.RM = {
        cN: "regexp",
        b: /\//,
        e: /\/[gimuy]*/,
        i: /\n/,
        c: [e.BE, { b: /\[/, e: /\]/, r: 0, c: [e.BE] }],
      }),
      (e.TM = { cN: "title", b: e.IR, r: 0 }),
      (e.UTM = { cN: "title", b: e.UIR, r: 0 }),
      (e.METHOD_GUARD = { b: `\\.\\s*${e.UIR}`, r: 0 }),
      e.registerLanguage("armasm", (e) => {
        return {
          cI: !0,
          aliases: ["arm"],
          l: `\\.?${e.IR}`,
          k: {
            meta:
              ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",
            built_in:
              "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @",
          },
          c: [
            {
              cN: "keyword",
              b:
                "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?",
              e: "\\s",
            },
            e.C("[;@]", "$", { r: 0 }),
            e.CBCM,
            e.QSM,
            { cN: "string", b: "'", e: "[^\\\\]'", r: 0 },
            { cN: "title", b: "\\|", e: "\\|", i: "\\n", r: 0 },
            {
              cN: "number",
              v: [
                { b: "[#$=]?0x[0-9a-f]+" },
                { b: "[#$=]?0b[01]+" },
                { b: "[#$=]\\d+" },
                { b: "\\b\\d+" },
              ],
              r: 0,
            },
            {
              cN: "symbol",
              v: [
                { b: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+" },
                { b: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:" },
                { b: "[=#]\\w+" },
              ],
              r: 0,
            },
          ],
        };
      }),
      e.registerLanguage("bash", (e) => {
        const t = {
            cN: "variable",
            v: [{ b: /\$[\w\d#@][\w\d_]*/ }, { b: /\$\{(.*?)}/ }],
          },
          r = {
            cN: "string",
            b: /"/,
            e: /"/,
            c: [e.BE, t, { cN: "variable", b: /\$\(/, e: /\)/, c: [e.BE] }],
          },
          a = { cN: "string", b: /'/, e: /'/ };
        return {
          aliases: ["sh", "zsh"],
          l: /\b-?[a-z\._]+\b/,
          k: {
            keyword:
              "if then else elif fi for while in do done case esac function",
            literal: "true false",
            built_in:
              "break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",
            _: "-ne -eq -lt -gt -f -d -e -s -l -a",
          },
          c: [
            { cN: "meta", b: /^#![^\n]+sh\s*$/, r: 10 },
            {
              cN: "function",
              b: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
              rB: !0,
              c: [e.inherit(e.TM, { b: /\w[\w\d_]*/ })],
              r: 0,
            },
            e.HCM,
            r,
            a,
            t,
          ],
        };
      }),
      e.registerLanguage("coffeescript", (e) => {
        const t = {
            keyword:
              "in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not",
            literal: "true false null undefined yes no on off",
            built_in: "npm require console print module global window document",
          },
          r = "[A-Za-z$_][0-9A-Za-z$_]*",
          a = { cN: "subst", b: /#\{/, e: /}/, k: t },
          n = [
            e.BNM,
            e.inherit(e.CNM, { starts: { e: "(\\s*/)?", r: 0 } }),
            {
              cN: "string",
              v: [
                { b: /'''/, e: /'''/, c: [e.BE] },
                { b: /'/, e: /'/, c: [e.BE] },
                { b: /"""/, e: /"""/, c: [e.BE, a] },
                { b: /"/, e: /"/, c: [e.BE, a] },
              ],
            },
            {
              cN: "regexp",
              v: [
                { b: "///", e: "///", c: [a, e.HCM] },
                { b: "//[gim]*", r: 0 },
                { b: /\/(?![ *])(\\\/|.)*?\/[gim]*(?=\W|$)/ },
              ],
            },
            { b: `@${r}` },
            {
              sL: "javascript",
              eB: !0,
              eE: !0,
              v: [
                { b: "```", e: "```" },
                { b: "`", e: "`" },
              ],
            },
          ];
        a.c = n;
        const i = e.inherit(e.TM, { b: r }),
          s = "(\\(.*\\))?\\s*\\B[-=]>",
          o = {
            cN: "params",
            b: "\\([^\\(]",
            rB: !0,
            c: [{ b: /\(/, e: /\)/, k: t, c: ["self"].concat(n) }],
          };
        return {
          aliases: ["coffee", "cson", "iced"],
          k: t,
          i: /\/\*/,
          c: n.concat([
            e.C("###", "###"),
            e.HCM,
            {
              cN: "function",
              b: `^\\s*${r}\\s*=\\s*${s}`,
              e: "[-=]>",
              rB: !0,
              c: [i, o],
            },
            {
              b: /[:\(,=]\s*/,
              r: 0,
              c: [{ cN: "function", b: s, e: "[-=]>", rB: !0, c: [o] }],
            },
            {
              cN: "class",
              bK: "class",
              e: "$",
              i: /[:="\[\]]/,
              c: [{ bK: "extends", eW: !0, i: /[:="\[\]]/, c: [i] }, i],
            },
            { b: `${r}:`, e: ":", rB: !0, rE: !0, r: 0 },
          ]),
        };
      }),
      e.registerLanguage("cpp", (e) => {
        const t = { cN: "keyword", b: "\\b[a-z\\d_]*_t\\b" },
          r = {
            cN: "string",
            v: [
              { b: '(u8?|U|L)?"', e: '"', i: "\\n", c: [e.BE] },
              { b: '(u8?|U|L)?R"\\(', e: '\\)"' },
              { b: "'\\\\?.", e: "'", i: "." },
            ],
          },
          a = {
            cN: "number",
            v: [
              { b: "\\b(0b[01']+)" },
              {
                b:
                  "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)",
              },
              {
                b:
                  "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)",
              },
            ],
            r: 0,
          },
          n = {
            cN: "meta",
            b: /#\s*[a-z]+\b/,
            e: /$/,
            k: {
              "meta-keyword":
                "if else elif endif define undef warning error line pragma ifdef ifndef include",
            },
            c: [
              { b: /\\\n/, r: 0 },
              e.inherit(r, { cN: "meta-string" }),
              { cN: "meta-string", b: /<[^\n>]*>/, e: /$/, i: "\\n" },
              e.CLCM,
              e.CBCM,
            ],
          },
          i = `${e.IR}\\s*\\(`,
          s = {
            keyword:
              "int float while private char catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignof constexpr decltype noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and or not",
            built_in:
              "std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr",
            literal: "true false nullptr NULL",
          },
          o = [t, e.CLCM, e.CBCM, a, r];
        return {
          aliases: ["c", "cc", "h", "c++", "h++", "hpp"],
          k: s,
          i: "</",
          c: o.concat([
            n,
            {
              b:
                "\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",
              e: ">",
              k: s,
              c: ["self", t],
            },
            { b: `${e.IR}::`, k: s },
            {
              v: [
                { b: /=/, e: /;/ },
                { b: /\(/, e: /\)/ },
                { bK: "new throw return else", e: /;/ },
              ],
              k: s,
              c: o.concat([
                { b: /\(/, e: /\)/, k: s, c: o.concat(["self"]), r: 0 },
              ]),
              r: 0,
            },
            {
              cN: "function",
              b: `(${e.IR}[\\*&\\s]+)+${i}`,
              rB: !0,
              e: /[{;=]/,
              eE: !0,
              k: s,
              i: /[^\w\s\*&]/,
              c: [
                { b: i, rB: !0, c: [e.TM], r: 0 },
                {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  k: s,
                  r: 0,
                  c: [
                    e.CLCM,
                    e.CBCM,
                    r,
                    a,
                    t,
                    {
                      b: /\(/,
                      e: /\)/,
                      k: s,
                      r: 0,
                      c: ["self", e.CLCM, e.CBCM, r, a, t],
                    },
                  ],
                },
                e.CLCM,
                e.CBCM,
                n,
              ],
            },
            {
              cN: "class",
              bK: "class struct",
              e: /[{;:]/,
              c: [{ b: /</, e: />/, c: ["self"] }, e.TM],
            },
          ]),
          exports: { preprocessor: n, strings: r, k: s },
        };
      }),
      e.registerLanguage("cs", (e) => {
        const t = {
            keyword:
              "abstract as base bool break byte case catch char checked const continue decimal default delegate do double enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long nameof object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while add alias ascending async await by descending dynamic equals from get global group into join let on orderby partial remove select set value var where yield",
            literal: "null false true",
          },
          r = {
            cN: "number",
            v: [
              { b: "\\b(0b[01']+)" },
              {
                b:
                  "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)",
              },
              {
                b:
                  "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)",
              },
            ],
            r: 0,
          },
          a = { cN: "string", b: '@"', e: '"', c: [{ b: '""' }] },
          n = e.inherit(a, { i: /\n/ }),
          i = { cN: "subst", b: "{", e: "}", k: t },
          s = e.inherit(i, { i: /\n/ }),
          o = {
            cN: "string",
            b: /\$"/,
            e: '"',
            i: /\n/,
            c: [{ b: "{{" }, { b: "}}" }, e.BE, s],
          },
          c = {
            cN: "string",
            b: /\$@"/,
            e: '"',
            c: [{ b: "{{" }, { b: "}}" }, { b: '""' }, i],
          },
          l = e.inherit(c, {
            i: /\n/,
            c: [{ b: "{{" }, { b: "}}" }, { b: '""' }, s],
          });
        (i.c = [c, o, a, e.ASM, e.QSM, r, e.CBCM]),
          (s.c = [l, o, n, e.ASM, e.QSM, r, e.inherit(e.CBCM, { i: /\n/ })]);
        const u = { v: [c, o, a, e.ASM, e.QSM] },
          d = `${e.IR}(<${e.IR}(\\s*,\\s*${e.IR})*>)?(\\[\\])?`;
        return {
          aliases: ["csharp", "c#"],
          k: t,
          i: /::/,
          c: [
            e.C("///", "$", {
              rB: !0,
              c: [
                {
                  cN: "doctag",
                  v: [
                    { b: "///", r: 0 },
                    { b: "<!--|-->" },
                    { b: "</?", e: ">" },
                  ],
                },
              ],
            }),
            e.CLCM,
            e.CBCM,
            {
              cN: "meta",
              b: "#",
              e: "$",
              k: {
                "meta-keyword":
                  "if else elif endif define undef warning error line region endregion pragma checksum",
              },
            },
            u,
            r,
            {
              bK: "class interface",
              e: /[{;=]/,
              i: /[^\s:,]/,
              c: [e.TM, e.CLCM, e.CBCM],
            },
            {
              bK: "namespace",
              e: /[{;=]/,
              i: /[^\s:]/,
              c: [e.inherit(e.TM, { b: "[a-zA-Z](\\.?\\w)*" }), e.CLCM, e.CBCM],
            },
            {
              cN: "meta",
              b: "^\\s*\\[",
              eB: !0,
              e: "\\]",
              eE: !0,
              c: [{ cN: "meta-string", b: /"/, e: /"/ }],
            },
            { bK: "new return throw await else", r: 0 },
            {
              cN: "function",
              b: `(${d}\\s+)+${e.IR}\\s*\\(`,
              rB: !0,
              e: /\s*[{;=]/,
              eE: !0,
              k: t,
              c: [
                { b: `${e.IR}\\s*\\(`, rB: !0, c: [e.TM], r: 0 },
                {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  eB: !0,
                  eE: !0,
                  k: t,
                  r: 0,
                  c: [u, r, e.CBCM],
                },
                e.CLCM,
                e.CBCM,
              ],
            },
          ],
        };
      }),
      e.registerLanguage("css", (e) => {
        const t = "[a-zA-Z-][a-zA-Z0-9_-]*",
          r = {
            b: /[A-Z\_\.\-]+\s*:/,
            rB: !0,
            e: ";",
            eW: !0,
            c: [
              {
                cN: "attribute",
                b: /\S/,
                e: ":",
                eE: !0,
                starts: {
                  eW: !0,
                  eE: !0,
                  c: [
                    {
                      b: /[\w-]+\(/,
                      rB: !0,
                      c: [
                        { cN: "built_in", b: /[\w-]+/ },
                        { b: /\(/, e: /\)/, c: [e.ASM, e.QSM] },
                      ],
                    },
                    e.CSSNM,
                    e.QSM,
                    e.ASM,
                    e.CBCM,
                    { cN: "number", b: "#[0-9A-Fa-f]+" },
                    { cN: "meta", b: "!important" },
                  ],
                },
              },
            ],
          };
        return {
          cI: !0,
          i: /[=\/|'\$]/,
          c: [
            e.CBCM,
            { cN: "selector-id", b: /#[A-Za-z0-9_-]+/ },
            { cN: "selector-class", b: /\.[A-Za-z0-9_-]+/ },
            { cN: "selector-attr", b: /\[/, e: /\]/, i: "$" },
            { cN: "selector-pseudo", b: /:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/ },
            { b: "@(font-face|page)", l: "[a-z-]+", k: "font-face page" },
            {
              b: "@",
              e: "[{;]",
              i: /:/,
              c: [
                { cN: "keyword", b: /\w+/ },
                { b: /\s/, eW: !0, eE: !0, r: 0, c: [e.ASM, e.QSM, e.CSSNM] },
              ],
            },
            { cN: "selector-tag", b: t, r: 0 },
            { b: "{", e: "}", i: /\S/, c: [e.CBCM, r] },
          ],
        };
      }),
      e.registerLanguage("glsl", (e) => {
        return {
          k: {
            keyword:
              "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",
            type:
              "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBufferiimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
            built_in:
              "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",
            literal: "true false",
          },
          i: '"',
          c: [e.CLCM, e.CBCM, e.CNM, { cN: "meta", b: "#", e: "$" }],
        };
      }),
      e.registerLanguage("go", (e) => {
        const t = {
          keyword:
            "break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",
          literal: "true false iota nil",
          built_in:
            "append cap close complex copy imag len make new panic print println real recover delete",
        };
        return {
          aliases: ["golang"],
          k: t,
          i: "</",
          c: [
            e.CLCM,
            e.CBCM,
            {
              cN: "string",
              v: [e.QSM, { b: "'", e: "[^\\\\]'" }, { b: "`", e: "`" }],
            },
            { cN: "number", v: [{ b: `${e.CNR}[dflsi]`, r: 1 }, e.CNM] },
            { b: /:=/ },
            {
              cN: "function",
              bK: "func",
              e: /\s*\{/,
              eE: !0,
              c: [e.TM, { cN: "params", b: /\(/, e: /\)/, k: t, i: /["']/ }],
            },
          ],
        };
      }),
      e.registerLanguage("haskell", (e) => {
        const t = { v: [e.C("--", "$"), e.C("{-", "-}", { c: ["self"] })] },
          r = { cN: "meta", b: "{-#", e: "#-}" },
          a = { cN: "meta", b: "^#", e: "$" },
          n = { cN: "type", b: "\\b[A-Z][\\w']*", r: 0 },
          i = {
            b: "\\(",
            e: "\\)",
            i: '"',
            c: [
              r,
              a,
              { cN: "type", b: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?" },
              e.inherit(e.TM, { b: "[_a-z][\\w']*" }),
              t,
            ],
          },
          s = { b: "{", e: "}", c: i.c };
        return {
          aliases: ["hs"],
          k:
            "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
          c: [
            {
              bK: "module",
              e: "where",
              k: "module where",
              c: [i, t],
              i: "\\W\\.|;",
            },
            {
              b: "\\bimport\\b",
              e: "$",
              k: "import qualified as hiding",
              c: [i, t],
              i: "\\W\\.|;",
            },
            {
              cN: "class",
              b: "^(\\s*)?(class|instance)\\b",
              e: "where",
              k: "class family instance where",
              c: [n, i, t],
            },
            {
              cN: "class",
              b: "\\b(data|(new)?type)\\b",
              e: "$",
              k: "data family type newtype deriving",
              c: [r, n, i, s, t],
            },
            { bK: "default", e: "$", c: [n, i, t] },
            { bK: "infix infixl infixr", e: "$", c: [e.CNM, t] },
            {
              b: "\\bforeign\\b",
              e: "$",
              k:
                "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
              c: [n, e.QSM, t],
            },
            { cN: "meta", b: "#!\\/usr\\/bin\\/env runhaskell", e: "$" },
            r,
            a,
            e.QSM,
            e.CNM,
            n,
            e.inherit(e.TM, { b: "^[_a-z][\\w']*" }),
            t,
            { b: "->|<-" },
          ],
        };
      }),
      e.registerLanguage("http", (e) => {
        const t = "HTTP/[0-9\\.]+";
        return {
          aliases: ["https"],
          i: "\\S",
          c: [
            { b: `^${t}`, e: "$", c: [{ cN: "number", b: "\\b\\d{3}\\b" }] },
            {
              b: `^[A-Z]+ (.*?) ${t}$`,
              rB: !0,
              e: "$",
              c: [
                { cN: "string", b: " ", e: " ", eB: !0, eE: !0 },
                { b: t },
                { cN: "keyword", b: "[A-Z]+" },
              ],
            },
            {
              cN: "attribute",
              b: "^\\w",
              e: ": ",
              eE: !0,
              i: "\\n|\\s|=",
              starts: { e: "$", r: 0 },
            },
            { b: "\\n\\n", starts: { sL: [], eW: !0 } },
          ],
        };
      }),
      e.registerLanguage("java", (e) => {
        const t = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",
          r = `${t}(<${t}(\\s*,\\s*${t})*>)?`,
          a =
            "false synchronized int abstract float private char boolean var static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",
          n =
            "\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",
          i = { cN: "number", b: n, r: 0 };
        return {
          aliases: ["jsp"],
          k: a,
          i: /<\/|#/,
          c: [
            e.C("/\\*\\*", "\\*/", {
              r: 0,
              c: [
                { b: /\w+@/, r: 0 },
                { cN: "doctag", b: "@[A-Za-z]+" },
              ],
            }),
            e.CLCM,
            e.CBCM,
            e.ASM,
            e.QSM,
            {
              cN: "class",
              bK: "class interface",
              e: /[{;=]/,
              eE: !0,
              k: "class interface",
              i: /[:"\[\]]/,
              c: [{ bK: "extends implements" }, e.UTM],
            },
            { bK: "new throw return else", r: 0 },
            {
              cN: "function",
              b: `(${r}\\s+)+${e.UIR}\\s*\\(`,
              rB: !0,
              e: /[{;=]/,
              eE: !0,
              k: a,
              c: [
                { b: `${e.UIR}\\s*\\(`, rB: !0, r: 0, c: [e.UTM] },
                {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  k: a,
                  r: 0,
                  c: [e.ASM, e.QSM, e.CNM, e.CBCM],
                },
                e.CLCM,
                e.CBCM,
              ],
            },
            i,
            { cN: "meta", b: "@[A-Za-z]+" },
          ],
        };
      }),
      e.registerLanguage("javascript", (e) => {
        const t = "[A-Za-z$_][0-9A-Za-z$_]*",
          r = {
            keyword:
              "in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",
            literal: "true false null undefined NaN Infinity",
            built_in:
              "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise",
          },
          a = {
            cN: "number",
            v: [
              { b: "\\b(0[bB][01]+)" },
              { b: "\\b(0[oO][0-7]+)" },
              { b: e.CNR },
            ],
            r: 0,
          },
          n = { cN: "subst", b: "\\$\\{", e: "\\}", k: r, c: [] },
          i = { cN: "string", b: "`", e: "`", c: [e.BE, n] };
        n.c = [e.ASM, e.QSM, i, a, e.RM];
        const s = n.c.concat([e.CBCM, e.CLCM]);
        return {
          aliases: ["js", "jsx"],
          k: r,
          c: [
            { cN: "meta", r: 10, b: /^\s*['"]use (strict|asm)['"]/ },
            { cN: "meta", b: /^#!/, e: /$/ },
            e.ASM,
            e.QSM,
            i,
            e.CLCM,
            e.CBCM,
            a,
            {
              b: /[{,]\s*/,
              r: 0,
              c: [
                {
                  b: `${t}\\s*:`,
                  rB: !0,
                  r: 0,
                  c: [{ cN: "attr", b: t, r: 0 }],
                },
              ],
            },
            {
              b: `(${e.RSR}|\\b(case|return|throw)\\b)\\s*`,
              k: "return throw case",
              c: [
                e.CLCM,
                e.CBCM,
                e.RM,
                {
                  cN: "function",
                  b: `(\\(.*?\\)|${t})\\s*=>`,
                  rB: !0,
                  e: "\\s*=>",
                  c: [
                    {
                      cN: "params",
                      v: [
                        { b: t },
                        { b: /\(\s*\)/ },
                        { b: /\(/, e: /\)/, eB: !0, eE: !0, k: r, c: s },
                      ],
                    },
                  ],
                },
                {
                  b: /</,
                  e: /(\/\w+|\w+\/)>/,
                  sL: "xml",
                  c: [
                    { b: /<\w+\s*\/>/, skip: !0 },
                    {
                      b: /<\w+/,
                      e: /(\/\w+|\w+\/)>/,
                      skip: !0,
                      c: [{ b: /<\w+\s*\/>/, skip: !0 }, "self"],
                    },
                  ],
                },
              ],
              r: 0,
            },
            {
              cN: "function",
              bK: "function",
              e: /\{/,
              eE: !0,
              c: [
                e.inherit(e.TM, { b: t }),
                { cN: "params", b: /\(/, e: /\)/, eB: !0, eE: !0, c: s },
              ],
              i: /\[|%/,
            },
            { b: /\$[(.]/ },
            e.METHOD_GUARD,
            {
              cN: "class",
              bK: "class",
              e: /[{;=]/,
              eE: !0,
              i: /[:"\[\]]/,
              c: [{ bK: "extends" }, e.UTM],
            },
            { bK: "constructor", e: /\{/, eE: !0 },
          ],
          i: /#(?!!)/,
        };
      }),
      e.registerLanguage("json", (e) => {
        const t = { literal: "true false null" },
          r = [e.QSM, e.CNM],
          a = { e: ",", eW: !0, eE: !0, c: r, k: t },
          n = {
            b: "{",
            e: "}",
            c: [
              { cN: "attr", b: /"/, e: /"/, c: [e.BE], i: "\\n" },
              e.inherit(a, { b: /:/ }),
            ],
            i: "\\S",
          },
          i = { b: "\\[", e: "\\]", c: [e.inherit(a)], i: "\\S" };
        return r.splice(r.length, 0, n, i), { c: r, k: t, i: "\\S" };
      }),
      e.registerLanguage("kotlin", (e) => {
        const t = {
            keyword:
              "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual trait volatile transient native default",
            built_in:
              "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
            literal: "true false null",
          },
          r = {
            cN: "keyword",
            b: /\b(break|continue|return|this)\b/,
            starts: { c: [{ cN: "symbol", b: /@\w+/ }] },
          },
          a = { cN: "symbol", b: `${e.UIR}@` },
          n = { cN: "subst", b: "\\${", e: "}", c: [e.ASM, e.CNM] },
          i = { cN: "variable", b: `\\$${e.UIR}` },
          s = {
            cN: "string",
            v: [
              { b: '"""', e: '"""', c: [i, n] },
              { b: "'", e: "'", i: /\n/, c: [e.BE] },
              { b: '"', e: '"', i: /\n/, c: [e.BE, i, n] },
            ],
          },
          o = {
            cN: "meta",
            b: `@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*${e.UIR})?`,
          },
          c = {
            cN: "meta",
            b: `@${e.UIR}`,
            c: [{ b: /\(/, e: /\)/, c: [e.inherit(s, { cN: "meta-string" })] }],
          },
          l =
            "\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",
          u = { cN: "number", b: l, r: 0 };
        return {
          aliases: ["kt"],
          k: t,
          c: [
            e.C("/\\*\\*", "\\*/", {
              r: 0,
              c: [{ cN: "doctag", b: "@[A-Za-z]+" }],
            }),
            e.CLCM,
            e.CBCM,
            r,
            a,
            o,
            c,
            {
              cN: "function",
              bK: "fun",
              e: "[(]|$",
              rB: !0,
              eE: !0,
              k: t,
              i: /fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,
              r: 5,
              c: [
                { b: `${e.UIR}\\s*\\(`, rB: !0, r: 0, c: [e.UTM] },
                { cN: "type", b: /</, e: />/, k: "reified", r: 0 },
                {
                  cN: "params",
                  b: /\(/,
                  e: /\)/,
                  endsParent: !0,
                  k: t,
                  r: 0,
                  c: [
                    {
                      b: /:/,
                      e: /[=,\/]/,
                      eW: !0,
                      c: [{ cN: "type", b: e.UIR }, e.CLCM, e.CBCM],
                      r: 0,
                    },
                    e.CLCM,
                    e.CBCM,
                    o,
                    c,
                    s,
                    e.CNM,
                  ],
                },
                e.CBCM,
              ],
            },
            {
              cN: "class",
              bK: "class interface trait",
              e: /[:\{(]|$/,
              eE: !0,
              i: "extends implements",
              c: [
                { bK: "public protected internal private constructor" },
                e.UTM,
                { cN: "type", b: /</, e: />/, eB: !0, eE: !0, r: 0 },
                { cN: "type", b: /[,:]\s*/, e: /[<\(,]|$/, eB: !0, rE: !0 },
                o,
                c,
              ],
            },
            s,
            { cN: "meta", b: "^#!/usr/bin/env", e: "$", i: "\n" },
            u,
          ],
        };
      }),
      e.registerLanguage("lisp", (e) => {
        const t =
            "[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*",
          r = "\\|[^]*?\\|",
          a =
            "(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?",
          n = { cN: "meta", b: "^#!", e: "$" },
          i = { cN: "literal", b: "\\b(t{1}|nil)\\b" },
          s = {
            cN: "number",
            v: [
              { b: a, r: 0 },
              { b: "#(b|B)[0-1]+(/[0-1]+)?" },
              { b: "#(o|O)[0-7]+(/[0-7]+)?" },
              { b: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?" },
              { b: `#(c|C)\\(${a} +${a}`, e: "\\)" },
            ],
          },
          o = e.inherit(e.QSM, { i: null }),
          c = e.C(";", "$", { r: 0 }),
          l = { b: "\\*", e: "\\*" },
          u = { cN: "symbol", b: `[:&]${t}` },
          d = { b: t, r: 0 },
          b = { b: r },
          p = { b: "\\(", e: "\\)", c: ["self", i, o, s, d] },
          m = {
            c: [s, o, l, u, p, d],
            v: [
              { b: "['`]\\(", e: "\\)" },
              { b: "\\(quote ", e: "\\)", k: { name: "quote" } },
              { b: `'${r}` },
            ],
          },
          g = { v: [{ b: `'${t}` }, { b: `#'${t}(::${t})*` }] },
          f = { b: "\\(\\s*", e: "\\)" },
          _ = { eW: !0, r: 0 };
        return (
          (f.c = [{ cN: "name", v: [{ b: t }, { b: r }] }, _]),
          (_.c = [m, g, f, i, s, o, c, l, u, b, d]),
          { i: /\S/, c: [s, n, i, o, c, m, g, f, d] }
        );
      }),
      e.registerLanguage("lua", (e) => {
        const t = "\\[=*\\[",
          r = "\\]=*\\]",
          a = { b: t, e: r, c: ["self"] },
          n = [e.C(`--(?!${t})`, "$"), e.C(`--${t}`, r, { c: [a], r: 10 })];
        return {
          l: e.UIR,
          k: {
            literal: "true false nil",
            keyword:
              "and break do else elseif end for goto if in local not or repeat return then until while",
            built_in:
              "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstringmodule next pairs pcall print rawequal rawget rawset require select setfenvsetmetatable tonumber tostring type unpack xpcall arg selfcoroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove",
          },
          c: n.concat([
            {
              cN: "function",
              bK: "function",
              e: "\\)",
              c: [
                e.inherit(e.TM, {
                  b: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*",
                }),
                { cN: "params", b: "\\(", eW: !0, c: n },
              ].concat(n),
            },
            e.CNM,
            e.ASM,
            e.QSM,
            { cN: "string", b: t, e: r, c: [a], r: 5 },
          ]),
        };
      }),
      e.registerLanguage("makefile", (e) => {
        const t = {
            cN: "variable",
            v: [{ b: `\\$\\(${e.UIR}\\)`, c: [e.BE] }, { b: /\$[@%<?\^\+\*]/ }],
          },
          r = { cN: "string", b: /"/, e: /"/, c: [e.BE, t] },
          a = {
            cN: "variable",
            b: /\$\([\w-]+\s/,
            e: /\)/,
            k: {
              built_in:
                "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value",
            },
            c: [t],
          },
          n = {
            b: `^${e.UIR}\\s*[:+?]?=`,
            i: "\\n",
            rB: !0,
            c: [{ b: `^${e.UIR}`, e: "[:+?]?=", eE: !0 }],
          },
          i = {
            cN: "meta",
            b: /^\.PHONY:/,
            e: /$/,
            k: { "meta-keyword": ".PHONY" },
            l: /[\.\w]+/,
          },
          s = { cN: "section", b: /^[^\s]+:/, e: /$/, c: [t] };
        return {
          aliases: ["mk", "mak"],
          k:
            "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath",
          l: /[\w-]+/,
          c: [e.HCM, t, r, a, n, i, s],
        };
      }),
      e.registerLanguage("xml", (e) => {
        const t = "[A-Za-z0-9\\._:-]+",
          r = {
            eW: !0,
            i: /</,
            r: 0,
            c: [
              { cN: "attr", b: t, r: 0 },
              {
                b: /=\s*/,
                r: 0,
                c: [
                  {
                    cN: "string",
                    endsParent: !0,
                    v: [
                      { b: /"/, e: /"/ },
                      { b: /'/, e: /'/ },
                      { b: /[^\s"'=<>`]+/ },
                    ],
                  },
                ],
              },
            ],
          };
        return {
          aliases: [
            "html",
            "xhtml",
            "rss",
            "atom",
            "xjb",
            "xsd",
            "xsl",
            "plist",
          ],
          cI: !0,
          c: [
            {
              cN: "meta",
              b: "<!DOCTYPE",
              e: ">",
              r: 10,
              c: [{ b: "\\[", e: "\\]" }],
            },
            e.C("<!--", "-->", { r: 10 }),
            { b: "<\\!\\[CDATA\\[", e: "\\]\\]>", r: 10 },
            { cN: "meta", b: /<\?xml/, e: /\?>/, r: 10 },
            {
              b: /<\?(php)?/,
              e: /\?>/,
              sL: "php",
              c: [
                { b: "/\\*", e: "\\*/", skip: !0 },
                { b: 'b"', e: '"', skip: !0 },
                { b: "b'", e: "'", skip: !0 },
                e.inherit(e.ASM, { i: null, cN: null, c: null, skip: !0 }),
                e.inherit(e.QSM, { i: null, cN: null, c: null, skip: !0 }),
              ],
            },
            {
              cN: "tag",
              b: "<style(?=\\s|>|$)",
              e: ">",
              k: { name: "style" },
              c: [r],
              starts: { e: "</style>", rE: !0, sL: ["css", "xml"] },
            },
            {
              cN: "tag",
              b: "<script(?=\\s|>|$)",
              e: ">",
              k: { name: "script" },
              c: [r],
              starts: {
                e: "</script>",
                rE: !0,
                sL: ["actionscript", "javascript", "handlebars", "xml"],
              },
            },
            {
              cN: "tag",
              b: "</?",
              e: "/?>",
              c: [{ cN: "name", b: /[^\/><\s]+/, r: 0 }, r],
            },
          ],
        };
      }),
      e.registerLanguage("markdown", (e) => {
        return {
          aliases: ["md", "mkdown", "mkd"],
          c: [
            {
              cN: "section",
              v: [{ b: "^#{1,6}", e: "$" }, { b: "^.+?\\n[=-]{2,}$" }],
            },
            { b: "<", e: ">", sL: "xml", r: 0 },
            { cN: "bullet", b: "^([*+-]|(\\d+\\.))\\s+" },
            { cN: "strong", b: "[*_]{2}.+?[*_]{2}" },
            { cN: "emphasis", v: [{ b: "\\*.+?\\*" }, { b: "_.+?_", r: 0 }] },
            { cN: "quote", b: "^>\\s+", e: "$" },
            {
              cN: "code",
              v: [
                { b: "^```w*s*$", e: "^```s*$" },
                { b: "`.+?`" },
                { b: "^( {4}|	)", e: "$", r: 0 },
              ],
            },
            { b: "^[-\\*]{3,}", e: "$" },
            {
              b: "\\[.+?\\][\\(\\[].*?[\\)\\]]",
              rB: !0,
              c: [
                { cN: "string", b: "\\[", e: "\\]", eB: !0, rE: !0, r: 0 },
                { cN: "link", b: "\\]\\(", e: "\\)", eB: !0, eE: !0 },
                { cN: "symbol", b: "\\]\\[", e: "\\]", eB: !0, eE: !0 },
              ],
              r: 10,
            },
            {
              b: /^\[[^\n]+\]:/,
              rB: !0,
              c: [
                { cN: "symbol", b: /\[/, e: /\]/, eB: !0, eE: !0 },
                { cN: "link", b: /:\s*/, e: /$/, eB: !0 },
              ],
            },
          ],
        };
      }),
      e.registerLanguage("matlab", (e) => {
        const t = "('|\\.')+",
          r = { r: 0, c: [{ b: t }] };
        return {
          k: {
            keyword:
              "break case catch classdef continue else elseif end enumerated events for function global if methods otherwise parfor persistent properties return spmd switch try while",
            built_in:
              "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell ",
          },
          i: '(//|"|#|/\\*|\\s+/\\w+)',
          c: [
            {
              cN: "function",
              bK: "function",
              e: "$",
              c: [
                e.UTM,
                {
                  cN: "params",
                  v: [
                    { b: "\\(", e: "\\)" },
                    { b: "\\[", e: "\\]" },
                  ],
                },
              ],
            },
            { cN: "built_in", b: /true|false/, r: 0, starts: r },
            { b: `[a-zA-Z][a-zA-Z_0-9]*${t}`, r: 0 },
            { cN: "number", b: e.CNR, r: 0, starts: r },
            { cN: "string", b: "'", e: "'", c: [e.BE, { b: "''" }] },
            { b: /\]|}|\)/, r: 0, starts: r },
            { cN: "string", b: '"', e: '"', c: [e.BE, { b: '""' }], starts: r },
            e.C("^\\s*\\%\\{\\s*$", "^\\s*\\%\\}\\s*$"),
            e.C("\\%", "$"),
          ],
        };
      }),
      e.registerLanguage("objectivec", (e) => {
        const t = {
            cN: "built_in",
            b:
              "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+",
          },
          r = {
            keyword:
              "int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",
            literal: "false true FALSE TRUE nil YES NO NULL",
            built_in:
              "BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once",
          },
          a = /[a-zA-Z@][a-zA-Z0-9_]*/,
          n = "@interface @class @protocol @implementation";
        return {
          aliases: ["mm", "objc", "obj-c"],
          k: r,
          l: a,
          i: "</",
          c: [
            t,
            e.CLCM,
            e.CBCM,
            e.CNM,
            e.QSM,
            {
              cN: "string",
              v: [
                { b: '@"', e: '"', i: "\\n", c: [e.BE] },
                { b: "'", e: "[^\\\\]'", i: "[^\\\\][^']" },
              ],
            },
            {
              cN: "meta",
              b: "#",
              e: "$",
              c: [
                {
                  cN: "meta-string",
                  v: [
                    { b: '"', e: '"' },
                    { b: "<", e: ">" },
                  ],
                },
              ],
            },
            {
              cN: "class",
              b: `(${n.split(" ").join("|")})\\b`,
              e: "({|$)",
              eE: !0,
              k: n,
              l: a,
              c: [e.UTM],
            },
            { b: `\\.${e.UIR}`, r: 0 },
          ],
        };
      }),
      e.registerLanguage("perl", (e) => {
        const t =
            "getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qqfileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmgetsub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedirioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",
          r = { cN: "subst", b: "[$@]\\{", e: "\\}", k: t },
          a = { b: "->{", e: "}" },
          n = {
            v: [
              { b: /\$\d/ },
              { b: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/ },
              { b: /[\$%@][^\s\w{]/, r: 0 },
            ],
          },
          i = [e.BE, r, n],
          s = [
            n,
            e.HCM,
            e.C("^\\=\\w", "\\=cut", { eW: !0 }),
            a,
            {
              cN: "string",
              c: i,
              v: [
                { b: "q[qwxr]?\\s*\\(", e: "\\)", r: 5 },
                { b: "q[qwxr]?\\s*\\[", e: "\\]", r: 5 },
                { b: "q[qwxr]?\\s*\\{", e: "\\}", r: 5 },
                { b: "q[qwxr]?\\s*\\|", e: "\\|", r: 5 },
                { b: "q[qwxr]?\\s*\\<", e: "\\>", r: 5 },
                { b: "qw\\s+q", e: "q", r: 5 },
                { b: "'", e: "'", c: [e.BE] },
                { b: '"', e: '"' },
                { b: "`", e: "`", c: [e.BE] },
                { b: "{\\w+}", c: [], r: 0 },
                { b: "-?\\w+\\s*\\=\\>", c: [], r: 0 },
              ],
            },
            {
              cN: "number",
              b:
                "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
              r: 0,
            },
            {
              b: `(\\/\\/|${e.RSR}|\\b(split|return|print|reverse|grep)\\b)\\s*`,
              k: "split return print reverse grep",
              r: 0,
              c: [
                e.HCM,
                {
                  cN: "regexp",
                  b: "(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",
                  r: 10,
                },
                { cN: "regexp", b: "(m|qr)?/", e: "/[a-z]*", c: [e.BE], r: 0 },
              ],
            },
            {
              cN: "function",
              bK: "sub",
              e: "(\\s*\\(.*?\\))?[;{]",
              eE: !0,
              r: 5,
              c: [e.TM],
            },
            { b: "-\\w\\b", r: 0 },
            {
              b: "^__DATA__$",
              e: "^__END__$",
              sL: "mojolicious",
              c: [{ b: "^@@.*", e: "$", cN: "comment" }],
            },
          ];
        return (
          (r.c = s),
          (a.c = s),
          { aliases: ["pl", "pm"], l: /[\w\.]+/, k: t, c: s }
        );
      }),
      e.registerLanguage("php", (e) => {
        const t = { b: "\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*" },
          r = { cN: "meta", b: /<\?(php)?|\?>/ },
          a = {
            cN: "string",
            c: [e.BE, r],
            v: [
              { b: 'b"', e: '"' },
              { b: "b'", e: "'" },
              e.inherit(e.ASM, { i: null }),
              e.inherit(e.QSM, { i: null }),
            ],
          },
          n = { v: [e.BNM, e.CNM] };
        return {
          aliases: ["php", "php3", "php4", "php5", "php6", "php7"],
          cI: !0,
          k:
            "and include_once list abstract global private echo interface as static endswitch array null if endwhile or const for endforeach self var while isset public protected exit foreach throw elseif include __FILE__ empty require_once do xor return parent clone use __CLASS__ __LINE__ else break print eval new catch __METHOD__ case exception default die require __FUNCTION__ enddeclare final try switch continue endfor endif declare unset true false trait goto instanceof insteadof __DIR__ __NAMESPACE__ yield finally",
          c: [
            e.HCM,
            e.C("//", "$", { c: [r] }),
            e.C("/\\*", "\\*/", { c: [{ cN: "doctag", b: "@[A-Za-z]+" }] }),
            e.C("__halt_compiler.+?;", !1, {
              eW: !0,
              k: "__halt_compiler",
              l: e.UIR,
            }),
            {
              cN: "string",
              b: /<<<['"]?\w+['"]?$/,
              e: /^\w+;?$/,
              c: [
                e.BE,
                { cN: "subst", v: [{ b: /\$\w+/ }, { b: /\{\$/, e: /\}/ }] },
              ],
            },
            r,
            { cN: "keyword", b: /\$this\b/ },
            t,
            { b: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/ },
            {
              cN: "function",
              bK: "function",
              e: /[;{]/,
              eE: !0,
              i: "\\$|\\[|%",
              c: [
                e.UTM,
                {
                  cN: "params",
                  b: "\\(",
                  e: "\\)",
                  c: ["self", t, e.CBCM, a, n],
                },
              ],
            },
            {
              cN: "class",
              bK: "class interface",
              e: "{",
              eE: !0,
              i: /[:\(\$"]/,
              c: [{ bK: "extends implements" }, e.UTM],
            },
            { bK: "namespace", e: ";", i: /[\.']/, c: [e.UTM] },
            { bK: "use", e: ";", c: [e.UTM] },
            { b: "=>" },
            a,
            n,
          ],
        };
      }),
      e.registerLanguage("plaintext", (e) => {
        return { disableAutodetect: !0 };
      }),
      e.registerLanguage("python", (e) => {
        const t = {
            keyword:
              "and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10 None True False",
            built_in: "Ellipsis NotImplemented",
          },
          r = { cN: "meta", b: /^(>>>|\.\.\.) / },
          a = { cN: "subst", b: /\{/, e: /\}/, k: t, i: /#/ },
          n = {
            cN: "string",
            c: [e.BE],
            v: [
              { b: /(u|b)?r?'''/, e: /'''/, c: [e.BE, r], r: 10 },
              { b: /(u|b)?r?"""/, e: /"""/, c: [e.BE, r], r: 10 },
              { b: /(fr|rf|f)'''/, e: /'''/, c: [e.BE, r, a] },
              { b: /(fr|rf|f)"""/, e: /"""/, c: [e.BE, r, a] },
              { b: /(u|r|ur)'/, e: /'/, r: 10 },
              { b: /(u|r|ur)"/, e: /"/, r: 10 },
              { b: /(b|br)'/, e: /'/ },
              { b: /(b|br)"/, e: /"/ },
              { b: /(fr|rf|f)'/, e: /'/, c: [e.BE, a] },
              { b: /(fr|rf|f)"/, e: /"/, c: [e.BE, a] },
              e.ASM,
              e.QSM,
            ],
          },
          i = {
            cN: "number",
            r: 0,
            v: [
              { b: `${e.BNR}[lLjJ]?` },
              { b: "\\b(0o[0-7]+)[lLjJ]?" },
              { b: `${e.CNR}[lLjJ]?` },
            ],
          },
          s = { cN: "params", b: /\(/, e: /\)/, c: ["self", r, i, n] };
        return (
          (a.c = [n, i, r]),
          {
            aliases: ["py", "gyp", "ipython"],
            k: t,
            i: /(<\/|->|\?)|=>/,
            c: [
              r,
              i,
              n,
              e.HCM,
              {
                v: [
                  { cN: "function", bK: "def" },
                  { cN: "class", bK: "class" },
                ],
                e: /:/,
                i: /[${=;\n,]/,
                c: [e.UTM, s, { b: /->/, eW: !0, k: "None" }],
              },
              { cN: "meta", b: /^[\t ]*@/, e: /$/ },
              { b: /\b(print|exec)\(/ },
            ],
          }
        );
      }),
      e.registerLanguage("pyxlscript", (e) => {
        const t = {
            keyword:
              "⌊ ⌋ ⌈ ⌉ | ‖ ∊ ∈ bitor pad joy bitxor bitand and because at local in if then for return default while mod preserving_transform|10 else continue let|2 const break not with assert with debug_watch draw_sprite draw_text debug_print|4 while continue or nil|2 pi nan infinity true false ∅",
          },
          r = { cN: "subst", b: /\{/, e: /\}/, k: t },
          a = {
            cN: "string",
            c: [e.BE],
            v: [
              { b: /(u|r|ur)"/, e: /"/, r: 10 },
              { b: /(b|br)"/, e: /"/ },
              { b: /(fr|rf|f)"/, e: /"/, c: [e.BE, r] },
              e.QSM,
            ],
          },
          n = {
            cN: "section",
            r: 10,
            v: [{ b: /^[^\n]+?\\n(-|─|—|━|⎯|=|═|⚌){5,}/ }],
          },
          i = {
            cN: "number",
            r: 0,
            v: [
              { b: /[+-]?[∞επ½⅓⅔¼¾⅕⅖⅗⅘⅙⅐⅛⅑⅒`]/ },
              { b: /#[0-7a-fA-F]+/ },
              { b: /[+-]?(\d*\.)?\d+(%|deg|°)?/ },
              { b: /[₀₁₂₃₄₅₆₇₈₉⁰¹²³⁴⁵⁶⁷⁸⁹]/ },
            ],
          },
          s = { cN: "params", b: /\(/, e: /\)/, c: [i, a] };
        return (
          (r.c = [a, i]),
          {
            aliases: ["pyxlscript"],
            k: t,
            i: /(<\/|->|\?)|=>|@|\$/,
            c: [
              n,
              i,
              a,
              e.CLCM,
              e.CBCM,
              {
                v: [{ cN: "function", bK: "def" }],
                e: /:/,
                i: /[${=;\n,]/,
                c: [e.UTM, s, { b: /->/, eW: !0, k: "None" }],
              },
            ],
          }
        );
      }),
      e.registerLanguage("r", (e) => {
        const t = "([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*";
        return {
          c: [
            e.HCM,
            {
              b: t,
              l: t,
              k: {
                keyword:
                  "function if in break next repeat else for return switch while try tryCatch stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ...",
                literal:
                  "NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
              },
              r: 0,
            },
            { cN: "number", b: "0[xX][0-9a-fA-F]+[Li]?\\b", r: 0 },
            { cN: "number", b: "\\d+(?:[eE][+\\-]?\\d*)?L\\b", r: 0 },
            { cN: "number", b: "\\d+\\.(?!\\d)(?:i\\b)?", r: 0 },
            {
              cN: "number",
              b: "\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",
              r: 0,
            },
            { cN: "number", b: "\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b", r: 0 },
            { b: "`", e: "`", r: 0 },
            {
              cN: "string",
              c: [e.BE],
              v: [
                { b: '"', e: '"' },
                { b: "'", e: "'" },
              ],
            },
          ],
        };
      }),
      e.registerLanguage("ruby", (e) => {
        const t =
            "[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",
          r = {
            keyword:
              "and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",
            literal: "true false nil",
          },
          a = { cN: "doctag", b: "@[A-Za-z]+" },
          n = { b: "#<", e: ">" },
          i = [
            e.C("#", "$", { c: [a] }),
            e.C("^\\=begin", "^\\=end", { c: [a], r: 10 }),
            e.C("^__END__", "\\n$"),
          ],
          s = { cN: "subst", b: "#\\{", e: "}", k: r },
          o = {
            cN: "string",
            c: [e.BE, s],
            v: [
              { b: /'/, e: /'/ },
              { b: /"/, e: /"/ },
              { b: /`/, e: /`/ },
              { b: "%[qQwWx]?\\(", e: "\\)" },
              { b: "%[qQwWx]?\\[", e: "\\]" },
              { b: "%[qQwWx]?{", e: "}" },
              { b: "%[qQwWx]?<", e: ">" },
              { b: "%[qQwWx]?/", e: "/" },
              { b: "%[qQwWx]?%", e: "%" },
              { b: "%[qQwWx]?-", e: "-" },
              { b: "%[qQwWx]?\\|", e: "\\|" },
              {
                b: /\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/,
              },
              { b: /<<(-?)\w+$/, e: /^\s*\w+$/ },
            ],
          },
          c = { cN: "params", b: "\\(", e: "\\)", endsParent: !0, k: r },
          l = [
            o,
            n,
            {
              cN: "class",
              bK: "class module",
              e: "$|;",
              i: /=/,
              c: [
                e.inherit(e.TM, { b: "[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?" }),
                { b: "<\\s*", c: [{ b: `(${e.IR}::)?${e.IR}` }] },
              ].concat(i),
            },
            {
              cN: "function",
              bK: "def",
              e: "$|;",
              c: [e.inherit(e.TM, { b: t }), c].concat(i),
            },
            { b: `${e.IR}::` },
            { cN: "symbol", b: `${e.UIR}(\\!|\\?)?:`, r: 0 },
            { cN: "symbol", b: ":(?!\\s)", c: [o, { b: t }], r: 0 },
            {
              cN: "number",
              b:
                "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
              r: 0,
            },
            { b: "(\\$\\W)|((\\$|\\@\\@?)(\\w+))" },
            { cN: "params", b: /\|/, e: /\|/, k: r },
            {
              b: `(${e.RSR}|unless)\\s*`,
              k: "unless",
              c: [
                n,
                {
                  cN: "regexp",
                  c: [e.BE, s],
                  i: /\n/,
                  v: [
                    { b: "/", e: "/[a-z]*" },
                    { b: "%r{", e: "}[a-z]*" },
                    { b: "%r\\(", e: "\\)[a-z]*" },
                    { b: "%r!", e: "![a-z]*" },
                    { b: "%r\\[", e: "\\][a-z]*" },
                  ],
                },
              ].concat(i),
              r: 0,
            },
          ].concat(i);
        (s.c = l), (c.c = l);
        const u = "[>?]>",
          d = "[\\w#]+\\(\\w+\\):\\d+:\\d+>",
          b = "(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>",
          p = [
            { b: /^\s*=>/, starts: { e: "$", c: l } },
            {
              cN: "meta",
              b: `^(${u}|${d}|${b})`,
              starts: { e: "$", c: l },
            },
          ];
        return {
          aliases: ["rb", "gemspec", "podspec", "thor", "irb"],
          k: r,
          i: /\/\*/,
          c: i.concat(p).concat(l),
        };
      }),
      e.registerLanguage("rust", (e) => {
        const t = "([ui](8|16|32|64|128|size)|f(32|64))?",
          r =
            "alignof as be box break const continue crate do else enum extern false fn for if impl in let loop match mod mut offsetof once priv proc pub pure ref return self Self sizeof static struct super trait true type typeof unsafe unsized use virtual while where yield move default",
          a =
            "drop i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator Extend IntoIterator DoubleEndedIterator ExactSizeIterator SliceConcatExt ToString assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!";
        return {
          aliases: ["rs"],
          k: {
            keyword: r,
            literal: "true false Some None Ok Err",
            built_in: a,
          },
          l: `${e.IR}!?`,
          i: "</",
          c: [
            e.CLCM,
            e.C("/\\*", "\\*/", { c: ["self"] }),
            e.inherit(e.QSM, { b: /b?"/, i: null }),
            {
              cN: "string",
              v: [
                { b: /r(#*)"(.|\n)*?"\1(?!#)/ },
                { b: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ },
              ],
            },
            { cN: "symbol", b: /'[a-zA-Z_][a-zA-Z0-9_]*/ },
            {
              cN: "number",
              v: [
                { b: `\\b0b([01_]+)${t}` },
                { b: `\\b0o([0-7_]+)${t}` },
                { b: `\\b0x([A-Fa-f0-9_]+)${t}` },
                { b: `\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)${t}` },
              ],
              r: 0,
            },
            { cN: "function", bK: "fn", e: "(\\(|<)", eE: !0, c: [e.UTM] },
            {
              cN: "meta",
              b: "#\\!?\\[",
              e: "\\]",
              c: [{ cN: "meta-string", b: /"/, e: /"/ }],
            },
            {
              cN: "class",
              bK: "type",
              e: ";",
              c: [e.inherit(e.UTM, { endsParent: !0 })],
              i: "\\S",
            },
            {
              cN: "class",
              bK: "trait enum struct union",
              e: "{",
              c: [e.inherit(e.UTM, { endsParent: !0 })],
              i: "[\\w\\d]",
            },
            { b: `${e.IR}::`, k: { built_in: a } },
            { b: "->" },
          ],
        };
      }),
      e.registerLanguage("scheme", (e) => {
        const t = "[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",
          r = "(\\-|\\+)?\\d+([./]\\d+)?",
          a = `${r}[+\\-]${r}i`,
          n = {
            "builtin-name":
              "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?",
          },
          i = { cN: "meta", b: "^#!", e: "$" },
          s = { cN: "literal", b: `(#t|#f|#\\\\${t}|#\\\\.)` },
          o = {
            cN: "number",
            v: [
              { b: r, r: 0 },
              { b: a, r: 0 },
              { b: "#b[0-1]+(/[0-1]+)?" },
              { b: "#o[0-7]+(/[0-7]+)?" },
              { b: "#x[0-9a-f]+(/[0-9a-f]+)?" },
            ],
          },
          c = e.QSM,
          l = [e.C(";", "$", { r: 0 }), e.C("#\\|", "\\|#")],
          u = { b: t, r: 0 },
          d = { cN: "symbol", b: `'${t}` },
          b = { eW: !0, r: 0 },
          p = {
            v: [{ b: /'/ }, { b: "`" }],
            c: [{ b: "\\(", e: "\\)", c: ["self", s, c, o, u, d] }],
          },
          m = { cN: "name", b: t, l: t, k: n },
          g = {
            b: /lambda/,
            eW: !0,
            rB: !0,
            c: [m, { b: /\(/, e: /\)/, endsParent: !0, c: [u] }],
          },
          f = {
            v: [
              { b: "\\(", e: "\\)" },
              { b: "\\[", e: "\\]" },
            ],
            c: [g, m, b],
          };
        return (
          (b.c = [s, o, c, u, d, p, f].concat(l)),
          { i: /\S/, c: [i, o, c, d, p, f].concat(l) }
        );
      }),
      e.registerLanguage("shell", (e) => {
        return {
          aliases: ["console"],
          c: [
            {
              cN: "meta",
              b: "^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]",
              starts: { e: "$", sL: "bash" },
            },
          ],
        };
      }),
      e.registerLanguage("sql", (e) => {
        const t = e.C("--", "$");
        return {
          cI: !0,
          i: /[<>{}*]/,
          c: [
            {
              bK:
                "begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment values with",
              e: /;/,
              eW: !0,
              l: /[\w\.]+/,
              k: {
                keyword:
                  "as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select self semi sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",
                literal: "true false null unknown",
                built_in:
                  "array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text time timestamp tinyint varchar varying void",
              },
              c: [
                { cN: "string", b: "'", e: "'", c: [e.BE, { b: "''" }] },
                { cN: "string", b: '"', e: '"', c: [e.BE, { b: '""' }] },
                { cN: "string", b: "`", e: "`", c: [e.BE] },
                e.CNM,
                e.CBCM,
                t,
                e.HCM,
              ],
            },
            e.CBCM,
            t,
            e.HCM,
          ],
        };
      }),
      e.registerLanguage("swift", (e) => {
        const t = {
            keyword:
              "#available #colorLiteral #column #else #elseif #endif #file #fileLiteral #function #if #imageLiteral #line #selector #sourceLocation _ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype associativity break case catch class continue convenience default defer deinit didSet do dynamic dynamicType else enum extension fallthrough false fileprivate final for func get guard if import in indirect infix init inout internal is lazy left let mutating nil none nonmutating open operator optional override postfix precedence prefix private protocol Protocol public repeat required rethrows return right self Self set static struct subscript super switch throw throws true try try! try? Type typealias unowned var weak where while willSet",
            literal: "true false nil",
            built_in:
              "abs advance alignof alignofValue anyGenerator assert assertionFailure bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC bridgeToObjectiveCUnconditional c contains count countElements countLeadingZeros debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords enumerate equal fatalError filter find getBridgedObjectiveCType getVaList indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare map max maxElement min minElement numericCast overlaps partition posix precondition preconditionFailure print println quickSort readLine reduce reflect reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split startsWith stride strideof strideofValue swap toString transcode underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers withUnsafePointer withUnsafePointers withVaList zip",
          },
          r = { cN: "type", b: "\\b[A-Z][\\wÀ-ʸ']*", r: 0 },
          a = e.C("/\\*", "\\*/", { c: ["self"] }),
          n = { cN: "subst", b: /\\\(/, e: "\\)", k: t, c: [] },
          i = {
            cN: "string",
            c: [e.BE, n],
            v: [
              { b: /"""/, e: /"""/ },
              { b: /"/, e: /"/ },
            ],
          },
          s = {
            cN: "number",
            b:
              "\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b",
            r: 0,
          };
        return (
          (n.c = [s]),
          {
            k: t,
            c: [
              i,
              e.CLCM,
              a,
              r,
              s,
              {
                cN: "function",
                bK: "func",
                e: "{",
                eE: !0,
                c: [
                  e.inherit(e.TM, { b: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
                  { b: /</, e: />/ },
                  {
                    cN: "params",
                    b: /\(/,
                    e: /\)/,
                    endsParent: !0,
                    k: t,
                    c: ["self", s, i, e.CBCM, { b: ":" }],
                    i: /["']/,
                  },
                ],
                i: /\[|%/,
              },
              {
                cN: "class",
                bK: "struct protocol class extension enum",
                k: t,
                e: "\\{",
                eE: !0,
                c: [
                  e.inherit(e.TM, {
                    b: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/,
                  }),
                ],
              },
              {
                cN: "meta",
                b:
                  "(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|@infix|@prefix|@postfix|@autoclosure|@testable|@available|@nonobjc|@NSApplicationMain|@UIApplicationMain)",
              },
              { bK: "import", e: /$/, c: [e.CLCM, a] },
            ],
          }
        );
      }),
      e.registerLanguage("tex", (e) => {
        const t = {
          cN: "tag",
          b: /\\/,
          r: 0,
          c: [
            {
              cN: "name",
              v: [{ b: /[a-zA-Zа-яА-я]+[*]?/ }, { b: /[^a-zA-Zа-яА-я0-9]/ }],
              starts: {
                eW: !0,
                r: 0,
                c: [
                  {
                    cN: "string",
                    v: [
                      { b: /\[/, e: /\]/ },
                      { b: /\{/, e: /\}/ },
                    ],
                  },
                  {
                    b: /\s*=\s*/,
                    eW: !0,
                    r: 0,
                    c: [
                      {
                        cN: "number",
                        b: /-?\d*\.?\d+(pt|pc|mm|cm|in|dd|cc|ex|em)?/,
                      },
                    ],
                  },
                ],
              },
            },
          ],
        };
        return {
          c: [
            t,
            {
              cN: "formula",
              c: [t],
              r: 0,
              v: [
                { b: /\$\$/, e: /\$\$/ },
                { b: /\$/, e: /\$/ },
              ],
            },
            e.C("%", "$", { r: 0 }),
          ],
        };
      }),
      e.registerLanguage("typescript", (e) => {
        const t = "[A-Za-z$_][0-9A-Za-z$_]*",
          r = {
            keyword:
              "in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class public private protected get set super static implements enum export import declare type namespace abstract as from extends async await",
            literal: "true false null undefined NaN Infinity",
            built_in:
              "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document any number boolean string void Promise",
          },
          a = { cN: "meta", b: `@${t}` },
          n = { b: "\\(", e: /\)/, k: r, c: ["self", e.QSM, e.ASM, e.NM] },
          i = {
            cN: "params",
            b: /\(/,
            e: /\)/,
            eB: !0,
            eE: !0,
            k: r,
            c: [e.CLCM, e.CBCM, a, n],
          };
        return {
          aliases: ["ts"],
          k: r,
          c: [
            { cN: "meta", b: /^\s*['"]use strict['"]/ },
            e.ASM,
            e.QSM,
            {
              cN: "string",
              b: "`",
              e: "`",
              c: [e.BE, { cN: "subst", b: "\\$\\{", e: "\\}" }],
            },
            e.CLCM,
            e.CBCM,
            {
              cN: "number",
              v: [
                { b: "\\b(0[bB][01]+)" },
                { b: "\\b(0[oO][0-7]+)" },
                { b: e.CNR },
              ],
              r: 0,
            },
            {
              b: `(${e.RSR}|\\b(case|return|throw)\\b)\\s*`,
              k: "return throw case",
              c: [
                e.CLCM,
                e.CBCM,
                e.RM,
                {
                  cN: "function",
                  b: `(\\(.*?\\)|${e.IR})\\s*=>`,
                  rB: !0,
                  e: "\\s*=>",
                  c: [
                    {
                      cN: "params",
                      v: [
                        { b: e.IR },
                        { b: /\(\s*\)/ },
                        {
                          b: /\(/,
                          e: /\)/,
                          eB: !0,
                          eE: !0,
                          k: r,
                          c: ["self", e.CLCM, e.CBCM],
                        },
                      ],
                    },
                  ],
                },
              ],
              r: 0,
            },
            {
              cN: "function",
              b: "function",
              e: /[\{;]/,
              eE: !0,
              k: r,
              c: ["self", e.inherit(e.TM, { b: t }), i],
              i: /%/,
              r: 0,
            },
            { bK: "constructor", e: /\{/, eE: !0, c: ["self", i] },
            { b: /module\./, k: { built_in: "module" }, r: 0 },
            { bK: "module", e: /\{/, eE: !0 },
            { bK: "interface", e: /\{/, eE: !0, k: "interface extends" },
            { b: /\$[(.]/ },
            { b: `\\.${e.IR}`, r: 0 },
            a,
            n,
          ],
        };
      }),
      e.registerLanguage("yaml", (e) => {
        const t = "true false yes no null",
          r = "^[ \\-]*",
          a = "[a-zA-Z_][\\w\\-]*",
          n = {
            cN: "attr",
            v: [{ b: `${r + a}:` }, { b: `${r}"${a}":` }, { b: `${r}'${a}':` }],
          },
          i = {
            cN: "template-variable",
            v: [
              { b: "{{", e: "}}" },
              { b: "%{", e: "}" },
            ],
          },
          s = {
            cN: "string",
            r: 0,
            v: [{ b: /'/, e: /'/ }, { b: /"/, e: /"/ }, { b: /\S+/ }],
            c: [e.BE, i],
          };
        return {
          cI: !0,
          aliases: ["yml", "YAML", "yaml"],
          c: [
            n,
            { cN: "meta", b: "^---s*$", r: 10 },
            { cN: "string", b: "[\\|>] *$", rE: !0, c: s.c, e: n.v[0].b },
            { b: "<%[%=-]?", e: "[%-]?%>", sL: "ruby", eB: !0, eE: !0, r: 0 },
            { cN: "type", b: `!${e.UIR}` },
            { cN: "type", b: `!!${e.UIR}` },
            { cN: "meta", b: `&${e.UIR}$` },
            { cN: "meta", b: `\\*${e.UIR}$` },
            { cN: "bullet", b: "^ *-", r: 0 },
            e.HCM,
            { bK: t, k: { literal: t } },
            e.CNM,
            s,
          ],
        };
      }),
      e
    );
  });

  //function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&Symbol.iterator in Object(iter))return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(n);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function")}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o};return _setPrototypeOf(o,p)}function _createSuper(Derived){return function(){var Super=_getPrototypeOf(Derived),result;if(_isNativeReflectConstruct()){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else{result=Super.apply(this,arguments)}return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call}return _assertThisInitialized(self)}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return self}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true}catch(e){return false}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)};return _getPrototypeOf(o)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor}function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj}}return _typeof(obj)}!function(e,n){"object"==(typeof exports==="undefined"?"undefined":_typeof(exports))&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e=e||self).hljs=n()}(void 0,function(){"use strict";function e(n){Object.freeze(n);var t="function"==typeof n;return Object.getOwnPropertyNames(n).forEach(function(r){!n.hasOwnProperty(r)||null===n[r]||"object"!=_typeof(n[r])&&"function"!=typeof n[r]||t&&("caller"===r||"callee"===r||"arguments"===r)||Object.isFrozen(n[r])||e(n[r])}),n}function n(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;")}function t(e){var n,t={},r=Array.prototype.slice.call(arguments,1);for(n in e){t[n]=e[n]}return r.forEach(function(e){for(n in e){t[n]=e[n]}}),t}function r(e){return e.nodeName.toLowerCase()}var a=Object.freeze({__proto__:null,escapeHTML:n,inherit:t,nodeStream:function nodeStream(e){var n=[];return function e(t,a){for(var i=t.firstChild;i;i=i.nextSibling){3===i.nodeType?a+=i.nodeValue.length:1===i.nodeType&&(n.push({event:"start",offset:a,node:i}),a=e(i,a),r(i).match(/br|hr|img|input/)||n.push({event:"stop",offset:a,node:i}))}return a}(e,0),n},mergeStreams:function mergeStreams(e,t,a){var i=0,s="",o=[];function l(){return e.length&&t.length?e[0].offset!==t[0].offset?e[0].offset<t[0].offset?e:t:"start"===t[0].event?e:t:e.length?e:t}function c(e){s+="<"+r(e)+[].map.call(e.attributes,function(e){return" "+e.nodeName+'="'+n(e.value).replace(/"/g,"&quot;")+'"'}).join("")+">"}function u(e){s+="</"+r(e)+">"}function d(e){("start"===e.event?c:u)(e.node)}for(;e.length||t.length;){var g=l();if(s+=n(a.substring(i,g[0].offset)),i=g[0].offset,g===e){o.reverse().forEach(u);do{d(g.splice(0,1)[0]),g=l()}while(g===e&&g.length&&g[0].offset===i);o.reverse().forEach(c)}else"start"===g[0].event?o.push(g[0].node):o.pop(),d(g.splice(0,1)[0])}return s+n(a.substr(i))}});var i=function i(e){return!!e.kind};var s=function(){function s(e,n){_classCallCheck(this,s);this.buffer="",this.classPrefix=n.classPrefix,e.walk(this)}_createClass(s,[{key:"addText",value:function addText(e){this.buffer+=n(e)}},{key:"openNode",value:function openNode(e){if(!i(e))return;var n=e.kind;e.sublanguage||(n="".concat(this.classPrefix).concat(n)),this.span(n)}},{key:"closeNode",value:function closeNode(e){i(e)&&(this.buffer+="</span>")}},{key:"span",value:function span(e){this.buffer+='<span class="'.concat(e,'">')}},{key:"value",value:function value(){return this.buffer}}]);return s}();var o=function(){function o(){_classCallCheck(this,o);this.rootNode={children:[]},this.stack=[this.rootNode]}_createClass(o,[{key:"add",value:function add(e){this.top.children.push(e)}},{key:"openNode",value:function openNode(e){var n={kind:e,children:[]};this.add(n),this.stack.push(n)}},{key:"closeNode",value:function closeNode(){if(this.stack.length>1)return this.stack.pop()}},{key:"closeAllNodes",value:function closeAllNodes(){for(;this.closeNode();){}}},{key:"toJSON",value:function toJSON(){return JSON.stringify(this.rootNode,null,4)}},{key:"walk",value:function walk(e){return this.constructor._walk(e,this.rootNode)}},{key:"top",get:function get(){return this.stack[this.stack.length-1]}},{key:"root",get:function get(){return this.rootNode}}],[{key:"_walk",value:function _walk(e,n){var _this=this;return"string"==typeof n?e.addText(n):n.children&&(e.openNode(n),n.children.forEach(function(n){return _this._walk(e,n)}),e.closeNode(n)),e}},{key:"_collapse",value:function _collapse(e){e.children&&(e.children.every(function(e){return"string"==typeof e})?(e.text=e.children.join(""),delete e.children):e.children.forEach(function(e){"string"!=typeof e&&o._collapse(e)}))}}]);return o}();var l=function(_o){_inherits(l,_o);var _super=_createSuper(l);function l(e){var _this2;_classCallCheck(this,l);_this2=_super.call(this),_this2.options=e;return _this2}_createClass(l,[{key:"addKeyword",value:function addKeyword(e,n){""!==e&&(this.openNode(n),this.addText(e),this.closeNode())}},{key:"addText",value:function addText(e){""!==e&&this.add(e)}},{key:"addSublanguage",value:function addSublanguage(e,n){var t=e.root;t.kind=n,t.sublanguage=!0,this.add(t)}},{key:"toHTML",value:function toHTML(){return new s(this,this.options).value()}},{key:"finalize",value:function finalize(){}}]);return l}(o);function c(e){return e&&e.source||e}var u="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",d={begin:"\\\\[\\s\\S]",relevance:0},g={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[d]},h={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[d]},f={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},p=function p(e,n,r){var a=t({className:"comment",begin:e,end:n,contains:[]},r||{});return a.contains.push(f),a.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|XXX):",relevance:0}),a},m=p("//","$"),b=p("/\\*","\\*/"),v=p("#","$");var x=Object.freeze({__proto__:null,IDENT_RE:"[a-zA-Z]\\w*",UNDERSCORE_IDENT_RE:"[a-zA-Z_]\\w*",NUMBER_RE:"\\b\\d+(\\.\\d+)?",C_NUMBER_RE:u,BINARY_NUMBER_RE:"\\b(0b[01]+)",RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",BACKSLASH_ESCAPE:d,APOS_STRING_MODE:g,QUOTE_STRING_MODE:h,PHRASAL_WORDS_MODE:f,COMMENT:p,C_LINE_COMMENT_MODE:m,C_BLOCK_COMMENT_MODE:b,HASH_COMMENT_MODE:v,NUMBER_MODE:{className:"number",begin:"\\b\\d+(\\.\\d+)?",relevance:0},C_NUMBER_MODE:{className:"number",begin:u,relevance:0},BINARY_NUMBER_MODE:{className:"number",begin:"\\b(0b[01]+)",relevance:0},CSS_NUMBER_MODE:{className:"number",begin:"\\b\\d+(\\.\\d+)?(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},REGEXP_MODE:{begin:/(?=\/[^\/\n]*\/)/,contains:[{className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[d,{begin:/\[/,end:/\]/,relevance:0,contains:[d]}]}]},TITLE_MODE:{className:"title",begin:"[a-zA-Z]\\w*",relevance:0},UNDERSCORE_TITLE_MODE:{className:"title",begin:"[a-zA-Z_]\\w*",relevance:0},METHOD_GUARD:{begin:"\\.\\s*[a-zA-Z_]\\w*",relevance:0}}),_="of and for in not or if then".split(" ");function E(e,n){return n?Number(n):(t=e,_.includes(t.toLowerCase())?0:1);var t}var R=n,N=t,w=a.nodeStream,y=a.mergeStreams;return function(n){var r=[],a={},i={},s=[],o=!0,u=/((^(<[^>]+>|\t|)+|(?:\n)))/gm,d="Could not find the language '{}', did you forget to load/include a language module?",g={noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:void 0,__emitter:l};function h(e){return g.noHighlightRe.test(e)}function f(e,n,t,r){var a={code:n,language:e};T("before:highlight",a);var i=a.result?a.result:p(a.language,a.code,t,r);return i.code=a.code,T("after:highlight",i),i}function p(e,n,r,i){var s=n;function l(e,n){var t=v.case_insensitive?n[0].toLowerCase():n[0];return e.keywords.hasOwnProperty(t)&&e.keywords[t]}function u(){null!=_.subLanguage?function(){if(""!==k){var e="string"==typeof _.subLanguage;if(!e||a[_.subLanguage]){var n=e?p(_.subLanguage,k,!0,N[_.subLanguage]):m(k,_.subLanguage.length?_.subLanguage:void 0);_.relevance>0&&(T+=n.relevance),e&&(N[_.subLanguage]=n.top),w.addSublanguage(n.emitter,n.language)}else w.addText(k)}}():function(){var e,n,t,r;if(_.keywords){for(n=0,_.lexemesRe.lastIndex=0,t=_.lexemesRe.exec(k),r="";t;){r+=k.substring(n,t.index);var a=null;(e=l(_,t))?(w.addText(r),r="",T+=e[1],a=e[0],w.addKeyword(t[0],a)):r+=t[0],n=_.lexemesRe.lastIndex,t=_.lexemesRe.exec(k)}r+=k.substr(n),w.addText(r)}else w.addText(k)}(),k=""}function h(e){e.className&&w.openNode(e.className),_=Object.create(e,{parent:{value:_}})}var f={};function b(n,t){var a,i=t&&t[0];if(k+=n,null==i)return u(),0;if("begin"==f.type&&"end"==t.type&&f.index==t.index&&""===i){if(k+=s.slice(t.index,t.index+1),!o)throw(a=Error("0 width match regex")).languageName=e,a.badRule=f.rule,a;return 1}if(f=t,"begin"===t.type)return function(e){var n=e[0],t=e.rule;return t.__onBegin&&(t.__onBegin(e)||{}).ignoreMatch?function(e){return 0===_.matcher.regexIndex?(k+=e[0],1):(A=!0,0)}(n):(t&&t.endSameAsBegin&&(t.endRe=RegExp(n.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"),"m")),t.skip?k+=n:(t.excludeBegin&&(k+=n),u(),t.returnBegin||t.excludeBegin||(k=n)),h(t),t.returnBegin?0:n.length)}(t);if("illegal"===t.type&&!r)throw(a=Error('Illegal lexeme "'+i+'" for mode "'+(_.className||"<unnamed>")+'"')).mode=_,a;if("end"===t.type){var l=function(e){var n=e[0],t=s.substr(e.index),r=function e(n,t){if(function(e,n){var t=e&&e.exec(n);return t&&0===t.index}(n.endRe,t)){for(;n.endsParent&&n.parent;){n=n.parent}return n}if(n.endsWithParent)return e(n.parent,t)}(_,t);if(r){var a=_;a.skip?k+=n:(a.returnEnd||a.excludeEnd||(k+=n),u(),a.excludeEnd&&(k=n));do{_.className&&w.closeNode(),_.skip||_.subLanguage||(T+=_.relevance),_=_.parent}while(_!==r.parent);return r.starts&&(r.endSameAsBegin&&(r.starts.endRe=r.endRe),h(r.starts)),a.returnEnd?0:n.length}}(t);if(null!=l)return l}return k+=i,i.length}var v=M(e);if(!v)throw console.error(d.replace("{}",e)),Error('Unknown language: "'+e+'"');!function(e){function n(n,t){return RegExp(c(n),"m"+(e.case_insensitive?"i":"")+(t?"g":""))}var r=function(){function r(){_classCallCheck(this,r);this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}_createClass(r,[{key:"addRule",value:function addRule(e,n){n.position=this.position++,this.matchIndexes[this.matchAt]=n,this.regexes.push([n,e]),this.matchAt+=function(e){return RegExp(e.toString()+"|").exec("").length-1}(e)+1}},{key:"compile",value:function compile(){0===this.regexes.length&&(this.exec=function(){return null});var e=this.regexes.map(function(e){return e[1]});this.matcherRe=n(function(e,n){for(var t=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./,r=0,a="",i=0;i<e.length;i++){var s=r+=1,o=c(e[i]);for(i>0&&(a+="|"),a+="(";o.length>0;){var l=t.exec(o);if(null==l){a+=o;break}a+=o.substring(0,l.index),o=o.substring(l.index+l[0].length),"\\"==l[0][0]&&l[1]?a+="\\"+(Number(l[1])+s):(a+=l[0],"("==l[0]&&r++)}a+=")"}return a}(e),!0),this.lastIndex=0}},{key:"exec",value:function exec(e){this.matcherRe.lastIndex=this.lastIndex;var n=this.matcherRe.exec(e);if(!n)return null;var t=n.findIndex(function(e,n){return n>0&&null!=e}),r=this.matchIndexes[t];return Object.assign(n,r)}}]);return r}();var a=function(){function a(){_classCallCheck(this,a);this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}_createClass(a,[{key:"getMatcher",value:function getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];var n=new r;return this.rules.slice(e).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),e=_ref2[0],t=_ref2[1];return n.addRule(e,t)}),n.compile(),this.multiRegexes[e]=n,n}},{key:"considerAll",value:function considerAll(){this.regexIndex=0}},{key:"addRule",value:function addRule(e,n){this.rules.push([e,n]),"begin"===n.type&&this.count++}},{key:"exec",value:function exec(e){var n=this.getMatcher(this.regexIndex);n.lastIndex=this.lastIndex;var t=n.exec(e);return t&&(this.regexIndex+=t.position+1,this.regexIndex===this.count&&(this.regexIndex=0)),t}}]);return a}();function i(e){var n=e.input[e.index-1],t=e.input[e.index+e[0].length];if("."===n||"."===t)return{ignoreMatch:!0}}if(e.contains&&e.contains.includes("self"))throw Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");!function r(s,o){var _ref3;s.compiled||(s.compiled=!0,s.__onBegin=null,s.keywords=s.keywords||s.beginKeywords,s.keywords&&(s.keywords=function(e,n){var t={};return"string"==typeof e?r("keyword",e):Object.keys(e).forEach(function(n){r(n,e[n])}),t;function r(e,r){n&&(r=r.toLowerCase()),r.split(" ").forEach(function(n){var r=n.split("|");t[r[0]]=[e,E(r[0],r[1])]})}}(s.keywords,e.case_insensitive)),s.lexemesRe=n(s.lexemes||/\w+/,!0),o&&(s.beginKeywords&&(s.begin="\\b("+s.beginKeywords.split(" ").join("|")+")(?=\\b|\\s)",s.__onBegin=i),s.begin||(s.begin=/\B|\b/),s.beginRe=n(s.begin),s.endSameAsBegin&&(s.end=s.begin),s.end||s.endsWithParent||(s.end=/\B|\b/),s.end&&(s.endRe=n(s.end)),s.terminator_end=c(s.end)||"",s.endsWithParent&&o.terminator_end&&(s.terminator_end+=(s.end?"|":"")+o.terminator_end)),s.illegal&&(s.illegalRe=n(s.illegal)),null==s.relevance&&(s.relevance=1),s.contains||(s.contains=[]),s.contains=(_ref3=[]).concat.apply(_ref3,_toConsumableArray(s.contains.map(function(e){return function(e){return e.variants&&!e.cached_variants&&(e.cached_variants=e.variants.map(function(n){return t(e,{variants:null},n)})),e.cached_variants?e.cached_variants:function e(n){return!!n&&(n.endsWithParent||e(n.starts))}(e)?t(e,{starts:e.starts?t(e.starts):null}):Object.isFrozen(e)?t(e):e}("self"===e?s:e)}))),s.contains.forEach(function(e){r(e,s)}),s.starts&&r(s.starts,o),s.matcher=function(e){var n=new a;return e.contains.forEach(function(e){return n.addRule(e.begin,{rule:e,type:"begin"})}),e.terminator_end&&n.addRule(e.terminator_end,{type:"end"}),e.illegal&&n.addRule(e.illegal,{type:"illegal"}),n}(s))}(e)}(v);var x,_=i||v,N={},w=new g.__emitter(g);!function(){for(var e=[],n=_;n!==v;n=n.parent){n.className&&e.unshift(n.className)}e.forEach(function(e){return w.openNode(e)})}();var y,O,k="",T=0,L=0;try{var A=!1;for(_.matcher.considerAll();A?A=!1:(_.matcher.lastIndex=L,_.matcher.considerAll()),y=_.matcher.exec(s);){O=b(s.substring(L,y.index),y),L=y.index+O}return b(s.substr(L)),w.closeAllNodes(),w.finalize(),x=w.toHTML(),{relevance:T,value:x,language:e,illegal:!1,emitter:w,top:_}}catch(n){if(n.message&&n.message.includes("Illegal"))return{illegal:!0,illegalBy:{msg:n.message,context:s.slice(L-100,L+100),mode:n.mode},sofar:x,relevance:0,value:R(s),emitter:w};if(o)return{relevance:0,value:R(s),emitter:w,language:e,top:_,errorRaised:n};throw n}}function m(e,n){n=n||g.languages||Object.keys(a);var t={relevance:0,emitter:new g.__emitter(g),value:R(e)},r=t;return n.filter(M).filter(k).forEach(function(n){var a=p(n,e,!1);a.language=n,a.relevance>r.relevance&&(r=a),a.relevance>t.relevance&&(r=t,t=a)}),r.language&&(t.second_best=r),t}function b(e){return g.tabReplace||g.useBR?e.replace(u,function(e,n){return g.useBR&&"\n"===e?"<br>":g.tabReplace?n.replace(/\t/g,g.tabReplace):""}):e}function v(e){var n,t,r,a,s,o=function(e){var n,t=e.className+" ";if(t+=e.parentNode?e.parentNode.className:"",n=g.languageDetectRe.exec(t)){var r=M(n[1]);return r||(console.warn(d.replace("{}",n[1])),console.warn("Falling back to no-highlight mode for this block.",e)),r?n[1]:"no-highlight"}return t.split(/\s+/).find(function(e){return h(e)||M(e)})}(e);h(o)||(T("before:highlightBlock",{block:e,language:o}),g.useBR?(n=document.createElement("div")).innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ \/]*>/g,"\n"):n=e,s=n.textContent,r=o?f(o,s,!0):m(s),(t=w(n)).length&&((a=document.createElement("div")).innerHTML=r.value,r.value=y(t,w(a),s)),r.value=b(r.value),T("after:highlightBlock",{block:e,result:r}),e.innerHTML=r.value,e.className=function(e,n,t){var r=n?i[n]:t,a=[e.trim()];return e.match(/\bhljs\b/)||a.push("hljs"),e.includes(r)||a.push(r),a.join(" ").trim()}(e.className,o,r.language),e.result={language:r.language,re:r.relevance},r.second_best&&(e.second_best={language:r.second_best.language,re:r.second_best.relevance}))}function _(){if(!_.called){_.called=!0;var e=document.querySelectorAll("pre code");r.forEach.call(e,v)}}var O={disableAutodetect:!0};function M(e){return e=(e||"").toLowerCase(),a[e]||a[i[e]]}function k(e){var n=M(e);return n&&!n.disableAutodetect}function T(e,n){var t=e;s.forEach(function(e){e[t]&&e[t](n)})}Object.assign(n,{highlight:f,highlightAuto:m,fixMarkup:b,highlightBlock:v,configure:function configure(e){g=N(g,e)},initHighlighting:_,initHighlightingOnLoad:function initHighlightingOnLoad(){window.addEventListener("DOMContentLoaded",_,!1)},registerLanguage:function registerLanguage(e,t){var r;try{r=t(n)}catch(n){if(console.error("Language definition for '{}' could not be registered.".replace("{}",e)),!o)throw n;console.error(n),r=O}r.name||(r.name=e),a[e]=r,r.rawDefinition=t.bind(null,n),r.aliases&&r.aliases.forEach(function(n){i[n]=e})},listLanguages:function listLanguages(){return Object.keys(a)},getLanguage:M,requireLanguage:function requireLanguage(e){var n=M(e);if(n)return n;throw Error("The '{}' language is required, but not loaded.".replace("{}",e))},autoDetection:k,inherit:N,addPlugin:function addPlugin(e,n){s.push(e)}}),n.debugMode=function(){o=!1},n.safeMode=function(){o=!0},n.versionString="10.0.0-beta.0";for(var _n2 in x){"object"==_typeof(x[_n2])&&e(x[_n2])}return Object.assign(n,x),n}({})});hljs.registerLanguage("bash",function(){"use strict";return function(e){var s={};Object.assign(s,{className:"variable",variants:[{begin:/\$[\w\d#@][\w\d_]*/},{begin:/\$\{/,end:/\}/,contains:[{begin:/:-/,contains:[s]}]}]});var n={className:"subst",begin:/\$\(/,end:/\)/,contains:[e.BACKSLASH_ESCAPE]},t={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,s,n]};n.contains.push(t);var a={begin:/\$\(\(/,end:/\)\)/,contains:[{begin:/\d+#[0-9a-f]+/,className:"number"},e.NUMBER_MODE,s]};return{name:"Bash",aliases:["sh","zsh"],lexemes:/\b-?[a-z\._]+\b/,keywords:{keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp",_:"-ne -eq -lt -gt -f -d -e -s -l -a"},contains:[{className:"meta",begin:/^#![^\n]+sh\s*$/,relevance:10},{className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0},a,e.HASH_COMMENT_MODE,t,{className:"",begin:/\\"/},{className:"string",begin:/'/,end:/'/},s]}}}());hljs.registerLanguage("csharp",function(){"use strict";return function(e){var n={keyword:"abstract as base bool break byte case catch char checked const continue decimal default delegate do double enum event explicit extern finally fixed float for foreach goto if implicit in int interface internal is lock long object operator out override params private protected public readonly ref sbyte sealed short sizeof stackalloc static string struct switch this try typeof uint ulong unchecked unsafe ushort using virtual void volatile while add alias ascending async await by descending dynamic equals from get global group into join let nameof on orderby partial remove select set value var when where yield",literal:"null false true"},i=e.inherit(e.TITLE_MODE,{begin:"[a-zA-Z](\\.?\\w)*"}),a={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},s={className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]},t=e.inherit(s,{illegal:/\n/}),l={className:"subst",begin:"{",end:"}",keywords:n},r=e.inherit(l,{illegal:/\n/}),c={className:"string",begin:/\$"/,end:'"',illegal:/\n/,contains:[{begin:"{{"},{begin:"}}"},e.BACKSLASH_ESCAPE,r]},o={className:"string",begin:/\$@"/,end:'"',contains:[{begin:"{{"},{begin:"}}"},{begin:'""'},l]},g=e.inherit(o,{illegal:/\n/,contains:[{begin:"{{"},{begin:"}}"},{begin:'""'},r]});l.contains=[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,a,e.C_BLOCK_COMMENT_MODE],r.contains=[g,c,t,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,a,e.inherit(e.C_BLOCK_COMMENT_MODE,{illegal:/\n/})];var d={variants:[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},E=e.IDENT_RE+"(<"+e.IDENT_RE+"(\\s*,\\s*"+e.IDENT_RE+")*>)?(\\[\\])?",_={begin:"@"+e.IDENT_RE,relevance:0};return{name:"C#",aliases:["cs","c#"],keywords:n,illegal:/::/,contains:[e.COMMENT("///","$",{returnBegin:!0,contains:[{className:"doctag",variants:[{begin:"///",relevance:0},{begin:"\x3c!--|--\x3e"},{begin:"</?",end:">"}]}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"if else elif endif define undef warning error line region endregion pragma checksum"}},d,a,{beginKeywords:"class interface",end:/[{;=]/,illegal:/[^\s:,]/,contains:[{beginKeywords:"where class"},i,{begin:"<",end:">",keywords:"in out"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"namespace",end:/[{;=]/,illegal:/[^\s:]/,contains:[i,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"meta",begin:"^\\s*\\[",excludeBegin:!0,end:"\\]",excludeEnd:!0,contains:[{className:"meta-string",begin:/"/,end:/"/}]},{beginKeywords:"new return throw await else",relevance:0},{className:"function",begin:"("+E+"\\s+)+"+e.IDENT_RE+"\\s*\\(",returnBegin:!0,end:/\s*[{;=]/,excludeEnd:!0,keywords:n,contains:[{begin:e.IDENT_RE+"\\s*\\(",returnBegin:!0,contains:[e.TITLE_MODE],relevance:0},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,relevance:0,contains:[d,a,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},_]}}}());hljs.registerLanguage("c-like",function(){"use strict";return function(e){function t(e){return"(?:"+e+")?"}var n="(decltype\\(auto\\)|"+t("[a-zA-Z_]\\w*::")+"[a-zA-Z_]\\w*"+t("<.*?>")+")",r={className:"keyword",begin:"\\b[a-z\\d_]*_t\\b"},a={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",end:"'",illegal:"."},{begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\((?:.|\n)*?\)\1"/}]},s={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},i={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{"meta-keyword":"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(a,{className:"meta-string"}),{className:"meta-string",begin:/<.*?>/,end:/$/,illegal:"\\n"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},c={className:"title",begin:t("[a-zA-Z_]\\w*::")+e.IDENT_RE,relevance:0},o=t("[a-zA-Z_]\\w*::")+e.IDENT_RE+"\\s*\\(",l={keyword:"int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",built_in:"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary",literal:"true false nullptr NULL"},d=[r,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,s,a],_={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:l,contains:d.concat([{begin:/\(/,end:/\)/,keywords:l,contains:d.concat(["self"]),relevance:0}]),relevance:0},u={className:"function",begin:"("+n+"[\\*&\\s]+)+"+o,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:l,illegal:/[^\w\s\*&:<>]/,contains:[{begin:"decltype\\(auto\\)",keywords:l,relevance:0},{begin:o,returnBegin:!0,contains:[c],relevance:0},{className:"params",begin:/\(/,end:/\)/,keywords:l,relevance:0,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,s,r,{begin:/\(/,end:/\)/,keywords:l,relevance:0,contains:["self",e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,a,s,r]}]},r,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,i]};return{aliases:["c","cc","h","c++","h++","hpp","hh","hxx","cxx"],keywords:l,disableAutodetect:!0,illegal:"</",contains:[].concat(_,u,d,[i,{begin:"\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",end:">",keywords:l,contains:["self",r]},{begin:e.IDENT_RE+"::",keywords:l},{className:"class",beginKeywords:"class struct",end:/[{;:]/,contains:[{begin:/</,end:/>/,contains:["self"]},e.TITLE_MODE]}]),exports:{preprocessor:i,strings:a,keywords:l}}}}());hljs.registerLanguage("cpp",function(){"use strict";return function(e){var t=e.getLanguage("c-like").rawDefinition();return t.disableAutodetect=!1,t.name="C++",t.aliases=["cc","c++","h++","hpp","hh","hxx","cxx"],t}}());hljs.registerLanguage("css",function(){"use strict";return function(e){var n={begin:/(?:[A-Z\_\.\-]+|--[a-zA-Z0-9_-]+)\s*:/,returnBegin:!0,end:";",endsWithParent:!0,contains:[{className:"attribute",begin:/\S/,end:":",excludeEnd:!0,starts:{endsWithParent:!0,excludeEnd:!0,contains:[{begin:/[\w-]+\(/,returnBegin:!0,contains:[{className:"built_in",begin:/[\w-]+/},{begin:/\(/,end:/\)/,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.CSS_NUMBER_MODE]}]},e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_BLOCK_COMMENT_MODE,{className:"number",begin:"#[0-9A-Fa-f]+"},{className:"meta",begin:"!important"}]}}]};return{name:"CSS",case_insensitive:!0,illegal:/[=\/|'\$]/,contains:[e.C_BLOCK_COMMENT_MODE,{className:"selector-id",begin:/#[A-Za-z0-9_-]+/},{className:"selector-class",begin:/\.[A-Za-z0-9_-]+/},{className:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},{className:"selector-pseudo",begin:/:(:)?[a-zA-Z0-9\_\-\+\(\)"'.]+/},{begin:"@(page|font-face)",lexemes:"@[a-z-]+",keywords:"@page @font-face"},{begin:"@",end:"[{;]",illegal:/:/,returnBegin:!0,contains:[{className:"keyword",begin:/@\-?\w[\w]*(\-\w+)*/},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:"and or not only",contains:[{begin:/[a-z-]+:/,className:"attribute"},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.CSS_NUMBER_MODE]}]},{className:"selector-tag",begin:"[a-zA-Z-][a-zA-Z0-9_-]*",relevance:0},{begin:"{",end:"}",illegal:/\S/,contains:[e.C_BLOCK_COMMENT_MODE,n]}]}}}());hljs.registerLanguage("coffeescript",function(){"use strict";return function(e){var n={keyword:"in if for while finally new do return else break catch instanceof throw try this switch continue typeof delete debugger super yield import export from as default await then unless until loop of by when and or is isnt not",literal:"true false null undefined yes no on off",built_in:"npm require console print module global window document"},i="[A-Za-z$_][0-9A-Za-z$_]*",s={className:"subst",begin:/#\{/,end:/}/,keywords:n},a=[e.BINARY_NUMBER_MODE,e.inherit(e.C_NUMBER_MODE,{starts:{end:"(\\s*/)?",relevance:0}}),{className:"string",variants:[{begin:/'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE]},{begin:/'/,end:/'/,contains:[e.BACKSLASH_ESCAPE]},{begin:/"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,s]},{begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,s]}]},{className:"regexp",variants:[{begin:"///",end:"///",contains:[s,e.HASH_COMMENT_MODE]},{begin:"//[gim]{0,3}(?=\\W)",relevance:0},{begin:/\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/}]},{begin:"@"+i},{subLanguage:"javascript",excludeBegin:!0,excludeEnd:!0,variants:[{begin:"```",end:"```"},{begin:"`",end:"`"}]}];s.contains=a;var t=e.inherit(e.TITLE_MODE,{begin:i}),r={className:"params",begin:"\\([^\\(]",returnBegin:!0,contains:[{begin:/\(/,end:/\)/,keywords:n,contains:["self"].concat(a)}]};return{name:"CoffeeScript",aliases:["coffee","cson","iced"],keywords:n,illegal:/\/\*/,contains:a.concat([e.COMMENT("###","###"),e.HASH_COMMENT_MODE,{className:"function",begin:"^\\s*"+i+"\\s*=\\s*(\\(.*\\))?\\s*\\B[-=]>",end:"[-=]>",returnBegin:!0,contains:[t,r]},{begin:/[:\(,=]\s*/,relevance:0,contains:[{className:"function",begin:"(\\(.*\\))?\\s*\\B[-=]>",end:"[-=]>",returnBegin:!0,contains:[r]}]},{className:"class",beginKeywords:"class",end:"$",illegal:/[:="\[\]]/,contains:[{beginKeywords:"extends",endsWithParent:!0,illegal:/[:="\[\]]/,contains:[t]},t]},{begin:i+":",end:":",returnBegin:!0,returnEnd:!0,relevance:0}])}}}());hljs.registerLanguage("xml",function(){"use strict";return function(e){var n={className:"symbol",begin:"&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;"},a={begin:"\\s",contains:[{className:"meta-keyword",begin:"#?[a-z_][a-z1-9_-]+",illegal:"\\n"}]},s=e.inherit(a,{begin:"\\(",end:"\\)"}),t=e.inherit(e.APOS_STRING_MODE,{className:"meta-string"}),i=e.inherit(e.QUOTE_STRING_MODE,{className:"meta-string"}),c={endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",begin:"[A-Za-z0-9\\._:-]+",relevance:0},{begin:/=\s*/,relevance:0,contains:[{className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/,contains:[n]},{begin:/'/,end:/'/,contains:[n]},{begin:/[^\s"'=<>`]+/}]}]}]};return{name:"HTML, XML",aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist","wsf","svg"],case_insensitive:!0,contains:[{className:"meta",begin:"<![a-z]",end:">",relevance:10,contains:[a,i,t,s,{begin:"\\[",end:"\\]",contains:[{className:"meta",begin:"<![a-z]",end:">",contains:[a,s,i,t]}]}]},e.COMMENT("\x3c!--","--\x3e",{relevance:10}),{begin:"<\\!\\[CDATA\\[",end:"\\]\\]>",relevance:10},n,{className:"meta",begin:/<\?xml/,end:/\?>/,relevance:10},{className:"tag",begin:"<style(?=\\s|>)",end:">",keywords:{name:"style"},contains:[c],starts:{end:"</style>",returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",begin:"<script(?=\\s|>)",end:">",keywords:{name:"script"},contains:[c],starts:{end:"<\/script>",returnEnd:!0,subLanguage:["javascript","handlebars","xml"]}},{className:"tag",begin:"</?",end:"/?>",contains:[{className:"name",begin:/[^\/><\s]+/,relevance:0},c]}]}}}());hljs.registerLanguage("http",function(){"use strict";return function(e){return{name:"HTTP",aliases:["https"],illegal:"\\S",contains:[{begin:"^HTTP/[0-9\\.]+",end:"$",contains:[{className:"number",begin:"\\b\\d{3}\\b"}]},{begin:"^[A-Z]+ (.*?) HTTP/[0-9\\.]+$",returnBegin:!0,end:"$",contains:[{className:"string",begin:" ",end:" ",excludeBegin:!0,excludeEnd:!0},{begin:"HTTP/[0-9\\.]+"},{className:"keyword",begin:"[A-Z]+"}]},{className:"attribute",begin:"^\\w",end:": ",excludeEnd:!0,illegal:"\\n|\\s|=",starts:{end:"$",relevance:0}},{begin:"\\n\\n",starts:{subLanguage:[],endsWithParent:!0}}]}}}());hljs.registerLanguage("json",function(){"use strict";return function(n){var e={literal:"true false null"},i=[n.C_LINE_COMMENT_MODE,n.C_BLOCK_COMMENT_MODE],t=[n.QUOTE_STRING_MODE,n.C_NUMBER_MODE],a={end:",",endsWithParent:!0,excludeEnd:!0,contains:t,keywords:e},l={begin:"{",end:"}",contains:[{className:"attr",begin:/"/,end:/"/,contains:[n.BACKSLASH_ESCAPE],illegal:"\\n"},n.inherit(a,{begin:/:/})].concat(i),illegal:"\\S"},s={begin:"\\[",end:"\\]",contains:[n.inherit(a)],illegal:"\\S"};return t.push(l,s),i.forEach(function(n){t.push(n)}),{name:"JSON",contains:t,keywords:e,illegal:"\\S"}}}());hljs.registerLanguage("java",function(){"use strict";return function(e){var a="false synchronized int abstract float private char boolean var static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",n={className:"meta",begin:"@[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",contains:[{begin:/\(/,end:/\)/,contains:["self"]}]};return{name:"Java",aliases:["jsp"],keywords:a,illegal:/<\/|#/,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"class",beginKeywords:"class interface",end:/[{;=]/,excludeEnd:!0,keywords:"class interface",illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"new throw return else",relevance:0},{className:"function",begin:"([À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*(<[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*(\\s*,\\s*[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*)*>)?\\s+)+"+e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:a,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"params",begin:/\(/,end:/\)/,keywords:a,relevance:0,contains:[n,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"number",begin:"\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",relevance:0},n]}}}());hljs.registerLanguage("javascript",function(){"use strict";return function(e){var n={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/},a="[A-Za-z$_][0-9A-Za-z$_]*",s={keyword:"in of if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await static import from as",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Promise"},r={className:"number",variants:[{begin:"\\b(0[bB][01]+)n?"},{begin:"\\b(0[oO][0-7]+)n?"},{begin:e.C_NUMBER_RE+"n?"}],relevance:0},i={className:"subst",begin:"\\$\\{",end:"\\}",keywords:s,contains:[]},t={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,i],subLanguage:"xml"}},c={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,i],subLanguage:"css"}},o={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,i]};i.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,t,c,o,r,e.REGEXP_MODE];var l=i.contains.concat([e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]),d={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,contains:l};return{name:"JavaScript",aliases:["js","jsx","mjs","cjs"],keywords:s,contains:[{className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},{className:"meta",begin:/^#!/,end:/$/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,t,c,o,e.C_LINE_COMMENT_MODE,e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+",contains:[{className:"type",begin:"\\{",end:"\\}",relevance:0},{className:"variable",begin:a+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),e.C_BLOCK_COMMENT_MODE,r,{begin:/[{,\n]\s*/,relevance:0,contains:[{begin:a+"\\s*:",returnBegin:!0,relevance:0,contains:[{className:"attr",begin:a,relevance:0}]}]},{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+a+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:a},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:s,contains:l}]}]},{begin:/,/,relevance:0},{className:"",begin:/\s/,end:/\s*/,skip:!0},{variants:[{begin:"<>",end:"</>"},{begin:n.begin,end:n.end}],subLanguage:"xml",contains:[{begin:n.begin,end:n.end,skip:!0,contains:["self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/\{/,excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:a}),d],illegal:/\[|%/},{begin:/\$[(.]/},e.METHOD_GUARD,{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"constructor",end:/\{/,excludeEnd:!0},{begin:"(get|set)\\s*(?="+a+"\\()",end:/{/,keywords:"get set",contains:[e.inherit(e.TITLE_MODE,{begin:a}),{begin:/\(\)/},d]}],illegal:/#(?!!)/}}}());hljs.registerLanguage("makefile",function(){"use strict";return function(e){var i={className:"variable",variants:[{begin:"\\$\\("+e.UNDERSCORE_IDENT_RE+"\\)",contains:[e.BACKSLASH_ESCAPE]},{begin:/\$[@%<?\^\+\*]/}]},n={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,i]},a={className:"variable",begin:/\$\([\w-]+\s/,end:/\)/,keywords:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},contains:[i]},s={begin:"^"+e.UNDERSCORE_IDENT_RE+"\\s*(?=[:+?]?=)"},r={className:"section",begin:/^[^\s]+:/,end:/$/,contains:[i]};return{name:"Makefile",aliases:["mk","mak"],keywords:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath",lexemes:/[\w-]+/,contains:[e.HASH_COMMENT_MODE,i,n,a,s,{className:"meta",begin:/^\.PHONY:/,end:/$/,keywords:{"meta-keyword":".PHONY"},lexemes:/[\.\w]+/},r]}}}());hljs.registerLanguage("markdown",function(){"use strict";return function(n){var e={begin:"<",end:">",subLanguage:"xml",relevance:0},a={begin:"\\[.+?\\][\\(\\[].*?[\\)\\]]",returnBegin:!0,contains:[{className:"string",begin:"\\[",end:"\\]",excludeBegin:!0,returnEnd:!0,relevance:0},{className:"link",begin:"\\]\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0},{className:"symbol",begin:"\\]\\[",end:"\\]",excludeBegin:!0,excludeEnd:!0}],relevance:10},i={className:"strong",contains:[],variants:[{begin:/_{2}/,end:/_{2}/},{begin:/\*{2}/,end:/\*{2}/}]},s={className:"emphasis",contains:[],variants:[{begin:/\*(?!\*)/,end:/\*/},{begin:/_(?!_)/,end:/_/,relevance:0}]};i.contains.push(s),s.contains.push(i);var c=[e,a];return i.contains=i.contains.concat(c),s.contains=s.contains.concat(c),{name:"Markdown",aliases:["md","mkdown","mkd"],contains:[{className:"section",variants:[{begin:"^#{1,6}",end:"$",contains:c=c.concat(i,s)},{begin:"(?=^.+?\\n[=-]{2,}$)",contains:[{begin:"^[=-]*$"},{begin:"^",end:"\\n",contains:c}]}]},e,{className:"bullet",begin:"^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)",end:"\\s+",excludeEnd:!0},i,s,{className:"quote",begin:"^>\\s+",contains:c,end:"$"},{className:"code",variants:[{begin:"(`{3,})(.|\\n)*?\\1`*[ ]*"},{begin:"(~{3,})(.|\\n)*?\\1~*[ ]*"},{begin:"```",end:"```+[ ]*$"},{begin:"~~~",end:"~~~+[ ]*$"},{begin:"`.+?`"},{begin:"(?=^( {4}|\\t))",contains:[{begin:"^( {4}|\\t)",end:"(\\n)$"}],relevance:0}]},{begin:"^[-\\*]{3,}",end:"$"},a,{begin:/^\[[^\n]+\]:/,returnBegin:!0,contains:[{className:"symbol",begin:/\[/,end:/\]/,excludeBegin:!0,excludeEnd:!0},{className:"link",begin:/:\s*/,end:/$/,excludeBegin:!0}]}]}}}());hljs.registerLanguage("objectivec",function(){"use strict";return function(e){var n=/[a-zA-Z@][a-zA-Z0-9_]*/,_="@interface @class @protocol @implementation";return{name:"Objective-C",aliases:["mm","objc","obj-c"],keywords:{keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},lexemes:n,illegal:"</",contains:[{className:"built_in",begin:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{className:"string",variants:[{begin:'@"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]}]},{className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{"meta-keyword":"if else elif endif define undef warning error line pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(e.QUOTE_STRING_MODE,{className:"meta-string"}),{className:"meta-string",begin:/<.*?>/,end:/$/,illegal:"\\n"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"class",begin:"("+_.split(" ").join("|")+")\\b",end:"({|$)",excludeEnd:!0,keywords:_,lexemes:n,contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"\\."+e.UNDERSCORE_IDENT_RE,relevance:0}]}}}());hljs.registerLanguage("php",function(){"use strict";return function(e){var r={begin:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*"},t={className:"meta",variants:[{begin:/<\?php/,relevance:10},{begin:/<\?[=]?/},{begin:/\?>/}]},a={className:"string",contains:[e.BACKSLASH_ESCAPE,t],variants:[{begin:'b"',end:'"'},{begin:"b'",end:"'"},e.inherit(e.APOS_STRING_MODE,{illegal:null}),e.inherit(e.QUOTE_STRING_MODE,{illegal:null})]},n={variants:[e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE]},i={keyword:"__CLASS__ __DIR__ __FILE__ __FUNCTION__ __LINE__ __METHOD__ __NAMESPACE__ __TRAIT__ die echo exit include include_once print require require_once array abstract and as binary bool boolean break callable case catch class clone const continue declare default do double else elseif empty enddeclare endfor endforeach endif endswitch endwhile eval extends final finally float for foreach from global goto if implements instanceof insteadof int integer interface isset iterable list new object or private protected public real return string switch throw trait try unset use var void while xor yield",literal:"false null true",built_in:"Error|0 AppendIterator ArgumentCountError ArithmeticError ArrayIterator ArrayObject AssertionError BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator CompileError Countable DirectoryIterator DivisionByZeroError DomainException EmptyIterator ErrorException Exception FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator ParseError RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplSubject SplTempFileObject TypeError UnderflowException UnexpectedValueException ArrayAccess Closure Generator Iterator IteratorAggregate Serializable Throwable Traversable WeakReference Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass"};return{aliases:["php","php3","php4","php5","php6","php7"],case_insensitive:!0,keywords:i,contains:[e.HASH_COMMENT_MODE,e.COMMENT("//","$",{contains:[t]}),e.COMMENT("/\\*","\\*/",{contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.COMMENT("__halt_compiler.+?;",!1,{endsWithParent:!0,keywords:"__halt_compiler",lexemes:e.UNDERSCORE_IDENT_RE}),{className:"string",begin:/<<<['"]?\w+['"]?$/,end:/^\w+;?$/,contains:[e.BACKSLASH_ESCAPE,{className:"subst",variants:[{begin:/\$\w+/},{begin:/\{\$/,end:/\}/}]}]},t,{className:"keyword",begin:/\$this\b/},r,{begin:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{className:"function",beginKeywords:"fn function",end:/[;{]/,excludeEnd:!0,illegal:"[$%\\[]",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",begin:"\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0,keywords:i,contains:["self",r,e.C_BLOCK_COMMENT_MODE,a,n]}]},{className:"class",beginKeywords:"class interface",end:"{",excludeEnd:!0,illegal:/[:\(\$"]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"namespace",end:";",illegal:/[\.']/,contains:[e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"use",end:";",contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"=>"},a,n]}}}());hljs.registerLanguage("perl",function(){"use strict";return function(e){var n="getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmget sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when",t={className:"subst",begin:"[$@]\\{",end:"\\}",keywords:n},s={begin:"->{",end:"}"},r={variants:[{begin:/\$\d/},{begin:/[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},{begin:/[\$%@][^\s\w{]/,relevance:0}]},i=[e.BACKSLASH_ESCAPE,t,r],a=[r,e.HASH_COMMENT_MODE,e.COMMENT("^\\=\\w","\\=cut",{endsWithParent:!0}),s,{className:"string",contains:i,variants:[{begin:"q[qwxr]?\\s*\\(",end:"\\)",relevance:5},{begin:"q[qwxr]?\\s*\\[",end:"\\]",relevance:5},{begin:"q[qwxr]?\\s*\\{",end:"\\}",relevance:5},{begin:"q[qwxr]?\\s*\\|",end:"\\|",relevance:5},{begin:"q[qwxr]?\\s*\\<",end:"\\>",relevance:5},{begin:"qw\\s+q",end:"q",relevance:5},{begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"'},{begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE]},{begin:"{\\w+}",contains:[],relevance:0},{begin:"-?\\w+\\s*\\=\\>",contains:[],relevance:0}]},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\/\\/|"+e.RE_STARTERS_RE+"|\\b(split|return|print|reverse|grep)\\b)\\s*",keywords:"split return print reverse grep",relevance:0,contains:[e.HASH_COMMENT_MODE,{className:"regexp",begin:"(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*",relevance:10},{className:"regexp",begin:"(m|qr)?/",end:"/[a-z]*",contains:[e.BACKSLASH_ESCAPE],relevance:0}]},{className:"function",beginKeywords:"sub",end:"(\\s*\\(.*?\\))?[;{]",excludeEnd:!0,relevance:5,contains:[e.TITLE_MODE]},{begin:"-\\w\\b",relevance:0},{begin:"^__DATA__$",end:"^__END__$",subLanguage:"mojolicious",contains:[{begin:"^@@.*",end:"$",className:"comment"}]}];return t.contains=a,s.contains=a,{name:"Perl",aliases:["pl","pm"],lexemes:/[\w\.]+/,keywords:n,contains:a}}}());hljs.registerLanguage("python",function(){"use strict";return function(e){var n={keyword:"and elif is global as in if from raise for except finally print import pass return exec else break not with class assert yield try while continue del or def lambda async await nonlocal|10",built_in:"Ellipsis NotImplemented",literal:"False None True"},a={className:"meta",begin:/^(>>>|\.\.\.) /},i={className:"subst",begin:/\{/,end:/\}/,keywords:n,illegal:/#/},s={begin:/\{\{/,relevance:0},r={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/(u|b)?r?'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,a],relevance:10},{begin:/(u|b)?r?"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a],relevance:10},{begin:/(fr|rf|f)'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,a,s,i]},{begin:/(fr|rf|f)"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a,s,i]},{begin:/(u|r|ur)'/,end:/'/,relevance:10},{begin:/(u|r|ur)"/,end:/"/,relevance:10},{begin:/(b|br)'/,end:/'/},{begin:/(b|br)"/,end:/"/},{begin:/(fr|rf|f)'/,end:/'/,contains:[e.BACKSLASH_ESCAPE,s,i]},{begin:/(fr|rf|f)"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,s,i]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},l={className:"number",relevance:0,variants:[{begin:e.BINARY_NUMBER_RE+"[lLjJ]?"},{begin:"\\b(0o[0-7]+)[lLjJ]?"},{begin:e.C_NUMBER_RE+"[lLjJ]?"}]},t={className:"params",begin:/\(/,end:/\)/,contains:["self",a,l,r,e.HASH_COMMENT_MODE]};return i.contains=[r,l,a],{name:"Python",aliases:["py","gyp","ipython"],keywords:n,illegal:/(<\/|->|\?)|=>/,contains:[a,l,{beginKeywords:"if",relevance:0},r,e.HASH_COMMENT_MODE,{variants:[{className:"function",beginKeywords:"def"},{className:"class",beginKeywords:"class"}],end:/:/,illegal:/[${=;\n,]/,contains:[e.UNDERSCORE_TITLE_MODE,t,{begin:/->/,endsWithParent:!0,keywords:"None"}]},{className:"meta",begin:/^[\t ]*@/,end:/$/},{begin:/\b(print|exec)\(/}]}}}());hljs.registerLanguage("ruby",function(){"use strict";return function(e){var n="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",a={keyword:"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor",literal:"true false nil"},s={className:"doctag",begin:"@[A-Za-z]+"},i={begin:"#<",end:">"},r=[e.COMMENT("#","$",{contains:[s]}),e.COMMENT("^\\=begin","^\\=end",{contains:[s],relevance:10}),e.COMMENT("^__END__","\\n$")],c={className:"subst",begin:"#\\{",end:"}",keywords:a},t={className:"string",contains:[e.BACKSLASH_ESCAPE,c],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/`/,end:/`/},{begin:"%[qQwWx]?\\(",end:"\\)"},{begin:"%[qQwWx]?\\[",end:"\\]"},{begin:"%[qQwWx]?{",end:"}"},{begin:"%[qQwWx]?<",end:">"},{begin:"%[qQwWx]?/",end:"/"},{begin:"%[qQwWx]?%",end:"%"},{begin:"%[qQwWx]?-",end:"-"},{begin:"%[qQwWx]?\\|",end:"\\|"},{begin:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/},{begin:/<<[-~]?'?(\w+)(?:.|\n)*?\n\s*\1\b/,returnBegin:!0,contains:[{begin:/<<[-~]?'?/},{begin:/\w+/,endSameAsBegin:!0,contains:[e.BACKSLASH_ESCAPE,c]}]}]},b={className:"params",begin:"\\(",end:"\\)",endsParent:!0,keywords:a},d=[t,i,{className:"class",beginKeywords:"class module",end:"$|;",illegal:/=/,contains:[e.inherit(e.TITLE_MODE,{begin:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?"}),{begin:"<\\s*",contains:[{begin:"("+e.IDENT_RE+"::)?"+e.IDENT_RE}]}].concat(r)},{className:"function",beginKeywords:"def",end:"$|;",contains:[e.inherit(e.TITLE_MODE,{begin:n}),b].concat(r)},{begin:e.IDENT_RE+"::"},{className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"(\\!|\\?)?:",relevance:0},{className:"symbol",begin:":(?!\\s)",contains:[t,{begin:n}],relevance:0},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},{className:"params",begin:/\|/,end:/\|/,keywords:a},{begin:"("+e.RE_STARTERS_RE+"|unless)\\s*",keywords:"unless",contains:[i,{className:"regexp",contains:[e.BACKSLASH_ESCAPE,c],illegal:/\n/,variants:[{begin:"/",end:"/[a-z]*"},{begin:"%r{",end:"}[a-z]*"},{begin:"%r\\(",end:"\\)[a-z]*"},{begin:"%r!",end:"![a-z]*"},{begin:"%r\\[",end:"\\][a-z]*"}]}].concat(r),relevance:0}].concat(r);c.contains=d,b.contains=d;var g=[{begin:/^\s*=>/,starts:{end:"$",contains:d}},{className:"meta",begin:"^([>?]>|[\\w#]+\\(\\w+\\):\\d+:\\d+>|(\\w+-)?\\d+\\.\\d+\\.\\d(p\\d+)?[^>]+>)",starts:{end:"$",contains:d}}];return{name:"Ruby",aliases:["rb","gemspec","podspec","thor","irb"],keywords:a,illegal:/\/\*/,contains:r.concat(g).concat(d)}}}());hljs.registerLanguage("shell",function(){"use strict";return function(s){return{name:"Shell Session",aliases:["console"],contains:[{className:"meta",begin:"^\\s{0,3}[/\\w\\d\\[\\]()@-]*[>%$#]",starts:{end:"$",subLanguage:"bash"}}]}}}());hljs.registerLanguage("armasm",function(){"use strict";return function(s){var e={variants:[s.COMMENT("^[ \\t]*(?=#)","$",{relevance:0,excludeBegin:!0}),s.COMMENT("[;@]","$",{relevance:0}),s.C_LINE_COMMENT_MODE,s.C_BLOCK_COMMENT_MODE]};return{name:"ARM Assembly",case_insensitive:!0,aliases:["arm"],lexemes:"\\.?"+s.IDENT_RE,keywords:{meta:".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",built_in:"r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"},contains:[{className:"keyword",begin:"\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"},e,s.QUOTE_STRING_MODE,{className:"string",begin:"'",end:"[^\\\\]'",relevance:0},{className:"title",begin:"\\|",end:"\\|",illegal:"\\n",relevance:0},{className:"number",variants:[{begin:"[#$=]?0x[0-9a-f]+"},{begin:"[#$=]?0b[01]+"},{begin:"[#$=]\\d+"},{begin:"\\b\\d+"}],relevance:0},{className:"symbol",variants:[{begin:"^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"},{begin:"^[a-z_\\.\\$][a-z0-9_\\.\\$]+"},{begin:"[=#]\\w+"}],relevance:0}]}}}());hljs.registerLanguage("glsl",function(){"use strict";return function(e){return{name:"GLSL",keywords:{keyword:"break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",type:"atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",built_in:"gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",literal:"true false"},illegal:'"',contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$"}]}}}());hljs.registerLanguage("go",function(){"use strict";return function(e){var n={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",literal:"true false iota nil",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{name:"Go",aliases:["golang"],keywords:n,illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",variants:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{begin:"`",end:"`"}]},{className:"number",variants:[{begin:e.C_NUMBER_RE+"[i]",relevance:1},e.C_NUMBER_MODE]},{begin:/:=/},{className:"function",beginKeywords:"func",end:"\\s*(\\{|$)",excludeEnd:!0,contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,keywords:n,illegal:/["']/}]}]}}}());hljs.registerLanguage("haskell",function(){"use strict";return function(e){var n={variants:[e.COMMENT("--","$"),e.COMMENT("{-","-}",{contains:["self"]})]},i={className:"meta",begin:"{-#",end:"#-}"},a={className:"meta",begin:"^#",end:"$"},s={className:"type",begin:"\\b[A-Z][\\w']*",relevance:0},l={begin:"\\(",end:"\\)",illegal:'"',contains:[i,a,{className:"type",begin:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},e.inherit(e.TITLE_MODE,{begin:"[_a-z][\\w']*"}),n]};return{name:"Haskell",aliases:["hs"],keywords:"let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",contains:[{beginKeywords:"module",end:"where",keywords:"module where",contains:[l,n],illegal:"\\W\\.|;"},{begin:"\\bimport\\b",end:"$",keywords:"import qualified as hiding",contains:[l,n],illegal:"\\W\\.|;"},{className:"class",begin:"^(\\s*)?(class|instance)\\b",end:"where",keywords:"class family instance where",contains:[s,l,n]},{className:"class",begin:"\\b(data|(new)?type)\\b",end:"$",keywords:"data family type newtype deriving",contains:[i,s,l,{begin:"{",end:"}",contains:l.contains},n]},{beginKeywords:"default",end:"$",contains:[s,l,n]},{beginKeywords:"infix infixl infixr",end:"$",contains:[e.C_NUMBER_MODE,n]},{begin:"\\bforeign\\b",end:"$",keywords:"foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",contains:[s,e.QUOTE_STRING_MODE,n]},{className:"meta",begin:"#!\\/usr\\/bin\\/env runhaskell",end:"$"},i,a,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,s,e.inherit(e.TITLE_MODE,{begin:"^[_a-z][\\w']*"}),n,{begin:"->|<-"}]}}}());hljs.registerLanguage("kotlin",function(){"use strict";return function(e){var n={keyword:"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual trait volatile transient native default",built_in:"Byte Short Char Int Long Boolean Float Double Void Unit Nothing",literal:"true false null"},a={className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"@"},i={className:"subst",begin:"\\${",end:"}",contains:[e.C_NUMBER_MODE]},s={className:"variable",begin:"\\$"+e.UNDERSCORE_IDENT_RE},t={className:"string",variants:[{begin:'"""',end:'"""(?=[^"])',contains:[s,i]},{begin:"'",end:"'",illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"',illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,s,i]}]};i.contains.push(t);var r={className:"meta",begin:"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*"+e.UNDERSCORE_IDENT_RE+")?"},l={className:"meta",begin:"@"+e.UNDERSCORE_IDENT_RE,contains:[{begin:/\(/,end:/\)/,contains:[e.inherit(t,{className:"meta-string"})]}]},c=e.COMMENT("/\\*","\\*/",{contains:[e.C_BLOCK_COMMENT_MODE]}),o={variants:[{className:"type",begin:e.UNDERSCORE_IDENT_RE},{begin:/\(/,end:/\)/,contains:[]}]},d=o;return d.variants[1].contains=[o],o.variants[1].contains=[d],{name:"Kotlin",aliases:["kt"],keywords:n,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,c,{className:"keyword",begin:/\b(break|continue|return|this)\b/,starts:{contains:[{className:"symbol",begin:/@\w+/}]}},a,r,l,{className:"function",beginKeywords:"fun",end:"[(]|$",returnBegin:!0,excludeEnd:!0,keywords:n,illegal:/fun\s+(<.*>)?[^\s\(]+(\s+[^\s\(]+)\s*=/,relevance:5,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"type",begin:/</,end:/>/,keywords:"reified",relevance:0},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:n,relevance:0,contains:[{begin:/:/,end:/[=,\/]/,endsWithParent:!0,contains:[o,e.C_LINE_COMMENT_MODE,c],relevance:0},e.C_LINE_COMMENT_MODE,c,r,l,t,e.C_NUMBER_MODE]},c]},{className:"class",beginKeywords:"class interface trait",end:/[:\{(]|$/,excludeEnd:!0,illegal:"extends implements",contains:[{beginKeywords:"public protected internal private constructor"},e.UNDERSCORE_TITLE_MODE,{className:"type",begin:/</,end:/>/,excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:/[,:]\s*/,end:/[<\(,]|$/,excludeBegin:!0,returnEnd:!0},r,l]},t,{className:"meta",begin:"^#!/usr/bin/env",end:"$",illegal:"\n"},{className:"number",begin:"\\b(0[bB]([01]+[01_]+[01]+|[01]+)|0[xX]([a-fA-F0-9]+[a-fA-F0-9_]+[a-fA-F0-9]+|[a-fA-F0-9]+)|(([\\d]+[\\d_]+[\\d]+|[\\d]+)(\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))?|\\.([\\d]+[\\d_]+[\\d]+|[\\d]+))([eE][-+]?\\d+)?)[lLfF]?",relevance:0}]}}}());hljs.registerLanguage("lisp",function(){"use strict";return function(e){var n="[a-zA-Z_\\-\\+\\*\\/\\<\\=\\>\\&\\#][a-zA-Z0-9_\\-\\+\\*\\/\\<\\=\\>\\&\\#!]*",a="(\\-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|\\-)?\\d+)?",i={className:"literal",begin:"\\b(t{1}|nil)\\b"},s={className:"number",variants:[{begin:a,relevance:0},{begin:"#(b|B)[0-1]+(/[0-1]+)?"},{begin:"#(o|O)[0-7]+(/[0-7]+)?"},{begin:"#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?"},{begin:"#(c|C)\\("+a+" +"+a,end:"\\)"}]},b=e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),g=e.COMMENT(";","$",{relevance:0}),l={begin:"\\*",end:"\\*"},t={className:"symbol",begin:"[:&]"+n},r={begin:n,relevance:0},c={contains:[s,b,l,t,{begin:"\\(",end:"\\)",contains:["self",i,b,s,r]},r],variants:[{begin:"['`]\\(",end:"\\)"},{begin:"\\(quote ",end:"\\)",keywords:{name:"quote"}},{begin:"'\\|[^]*?\\|"}]},d={variants:[{begin:"'"+n},{begin:"#'"+n+"(::"+n+")*"}]},o={begin:"\\(\\s*",end:"\\)"},m={endsWithParent:!0,relevance:0};return o.contains=[{className:"name",variants:[{begin:n},{begin:"\\|[^]*?\\|"}]},m],m.contains=[c,d,o,i,s,b,g,l,t,{begin:"\\|[^]*?\\|"},r],{name:"Lisp",illegal:/\S/,contains:[s,{className:"meta",begin:"^#!",end:"$"},i,b,g,c,d,o,r]}}}());hljs.registerLanguage("lua",function(){"use strict";return function(e){var t={begin:"\\[=*\\[",end:"\\]=*\\]",contains:["self"]},a=[e.COMMENT("--(?!\\[=*\\[)","$"),e.COMMENT("--\\[=*\\[","\\]=*\\]",{contains:[t],relevance:10})];return{name:"Lua",lexemes:e.UNDERSCORE_IDENT_RE,keywords:{literal:"true false nil",keyword:"and break do else elseif end for goto if in local not or repeat return then until while",built_in:"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"},contains:a.concat([{className:"function",beginKeywords:"function",end:"\\)",contains:[e.inherit(e.TITLE_MODE,{begin:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{className:"params",begin:"\\(",endsWithParent:!0,contains:a}].concat(a)},e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:"\\[=*\\[",end:"\\]=*\\]",contains:[t],relevance:5}])}}}());hljs.registerLanguage("matlab",function(){"use strict";return function(e){var a={relevance:0,contains:[{begin:"('|\\.')+"}]};return{name:"Matlab",keywords:{keyword:"break case catch classdef continue else elseif end enumerated events for function global if methods otherwise parfor persistent properties return spmd switch try while",built_in:"sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i inf nan isnan isinf isfinite j why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "},illegal:'(//|"|#|/\\*|\\s+/\\w+)',contains:[{className:"function",beginKeywords:"function",end:"$",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}]}]},{className:"built_in",begin:/true|false/,relevance:0,starts:a},{begin:"[a-zA-Z][a-zA-Z_0-9]*('|\\.')+",relevance:0},{className:"number",begin:e.C_NUMBER_RE,relevance:0,starts:a},{className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE,{begin:"''"}]},{begin:/\]|}|\)/,relevance:0,starts:a},{className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE,{begin:'""'}],starts:a},e.COMMENT("^\\s*\\%\\{\\s*$","^\\s*\\%\\}\\s*$"),e.COMMENT("\\%","$")]}}}());hljs.registerLanguage("r",function(){"use strict";return function(e){var n="([a-zA-Z]|\\.[a-zA-Z.])[a-zA-Z0-9._]*";return{name:"R",contains:[e.HASH_COMMENT_MODE,{begin:n,lexemes:n,keywords:{keyword:"function if in break next repeat else for return switch while try tryCatch stop warning require library attach detach source setMethod setGeneric setGroupGeneric setClass ...",literal:"NULL NA TRUE FALSE T F Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10"},relevance:0},{className:"number",begin:"0[xX][0-9a-fA-F]+[Li]?\\b",relevance:0},{className:"number",begin:"\\d+(?:[eE][+\\-]?\\d*)?L\\b",relevance:0},{className:"number",begin:"\\d+\\.(?!\\d)(?:i\\b)?",relevance:0},{className:"number",begin:"\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d*)?i?\\b",relevance:0},{className:"number",begin:"\\.\\d+(?:[eE][+\\-]?\\d*)?i?\\b",relevance:0},{begin:"`",end:"`",relevance:0},{className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:'"',end:'"'},{begin:"'",end:"'"}]}]}}}());hljs.registerLanguage("rust",function(){"use strict";return function(e){var n="([ui](8|16|32|64|128|size)|f(32|64))?",t="drop i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator Extend IntoIterator DoubleEndedIterator ExactSizeIterator SliceConcatExt ToString assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!";return{name:"Rust",aliases:["rs"],keywords:{keyword:"abstract as async await become box break const continue crate do dyn else enum extern false final fn for if impl in let loop macro match mod move mut override priv pub ref return self Self static struct super trait true try type typeof unsafe unsized use virtual where while yield",literal:"true false Some None Ok Err",built_in:t},lexemes:e.IDENT_RE+"!?",illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.COMMENT("/\\*","\\*/",{contains:["self"]}),e.inherit(e.QUOTE_STRING_MODE,{begin:/b?"/,illegal:null}),{className:"string",variants:[{begin:/r(#*)"(.|\n)*?"\1(?!#)/},{begin:/b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/}]},{className:"symbol",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:"number",variants:[{begin:"\\b0b([01_]+)"+n},{begin:"\\b0o([0-7_]+)"+n},{begin:"\\b0x([A-Fa-f0-9_]+)"+n},{begin:"\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)"+n}],relevance:0},{className:"function",beginKeywords:"fn",end:"(\\(|<)",excludeEnd:!0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"meta",begin:"#\\!?\\[",end:"\\]",contains:[{className:"meta-string",begin:/"/,end:/"/}]},{className:"class",beginKeywords:"type",end:";",contains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{endsParent:!0})],illegal:"\\S"},{className:"class",beginKeywords:"trait enum struct union",end:"{",contains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{endsParent:!0})],illegal:"[\\w\\d]"},{begin:e.IDENT_RE+"::",keywords:{built_in:t}},{begin:"->"}]}}}());hljs.registerLanguage("sql",function(){"use strict";return function(e){var t=e.COMMENT("--","$");return{name:"SQL",case_insensitive:!0,illegal:/[<>{}*]/,contains:[{beginKeywords:"begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment values with",end:/;/,endsWithParent:!0,lexemes:/[\w\.]+/,keywords:{keyword:"as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select self semi sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",literal:"true false null unknown",built_in:"array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void"},contains:[{className:"string",begin:"'",end:"'",contains:[{begin:"''"}]},{className:"string",begin:'"',end:'"',contains:[{begin:'""'}]},{className:"string",begin:"`",end:"`"},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,t,e.HASH_COMMENT_MODE]},e.C_BLOCK_COMMENT_MODE,t,e.HASH_COMMENT_MODE]}}}());hljs.registerLanguage("scheme",function(){"use strict";return function(e){var t="[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",n={className:"literal",begin:"(#t|#f|#\\\\"+t+"|#\\\\.)"},a={className:"number",variants:[{begin:"(\\-|\\+)?\\d+([./]\\d+)?",relevance:0},{begin:"(\\-|\\+)?\\d+([./]\\d+)?[+\\-](\\-|\\+)?\\d+([./]\\d+)?i",relevance:0},{begin:"#b[0-1]+(/[0-1]+)?"},{begin:"#o[0-7]+(/[0-7]+)?"},{begin:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},r=e.QUOTE_STRING_MODE,i=[e.COMMENT(";","$",{relevance:0}),e.COMMENT("#\\|","\\|#")],c={begin:t,relevance:0},s={className:"symbol",begin:"'"+t},l={endsWithParent:!0,relevance:0},o={variants:[{begin:/'/},{begin:"`"}],contains:[{begin:"\\(",end:"\\)",contains:["self",n,r,a,c,s]}]},u={className:"name",begin:t,lexemes:t,keywords:{"builtin-name":"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"}},g={variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}],contains:[{begin:/lambda/,endsWithParent:!0,returnBegin:!0,contains:[u,{begin:/\(/,end:/\)/,endsParent:!0,contains:[c]}]},u,l]};return l.contains=[n,a,r,c,s,o,g].concat(i),{name:"Scheme",illegal:/\S/,contains:[{className:"meta",begin:"^#!",end:"$"},a,r,s,o,g].concat(i)}}}());hljs.registerLanguage("swift",function(){"use strict";return function(e){var i={keyword:"#available #colorLiteral #column #else #elseif #endif #file #fileLiteral #function #if #imageLiteral #line #selector #sourceLocation _ __COLUMN__ __FILE__ __FUNCTION__ __LINE__ Any as as! as? associatedtype associativity break case catch class continue convenience default defer deinit didSet do dynamic dynamicType else enum extension fallthrough false fileprivate final for func get guard if import in indirect infix init inout internal is lazy left let mutating nil none nonmutating open operator optional override postfix precedence prefix private protocol Protocol public repeat required rethrows return right self Self set static struct subscript super switch throw throws true try try! try? Type typealias unowned var weak where while willSet",literal:"true false nil",built_in:"abs advance alignof alignofValue anyGenerator assert assertionFailure bridgeFromObjectiveC bridgeFromObjectiveCUnconditional bridgeToObjectiveC bridgeToObjectiveCUnconditional c compactMap contains count countElements countLeadingZeros debugPrint debugPrintln distance dropFirst dropLast dump encodeBitsAsWords enumerate equal fatalError filter find getBridgedObjectiveCType getVaList indices insertionSort isBridgedToObjectiveC isBridgedVerbatimToObjectiveC isUniquelyReferenced isUniquelyReferencedNonObjC join lazy lexicographicalCompare map max maxElement min minElement numericCast overlaps partition posix precondition preconditionFailure print println quickSort readLine reduce reflect reinterpretCast reverse roundUpToAlignment sizeof sizeofValue sort split startsWith stride strideof strideofValue swap toString transcode underestimateCount unsafeAddressOf unsafeBitCast unsafeDowncast unsafeUnwrap unsafeReflect withExtendedLifetime withObjectAtPlusZero withUnsafePointer withUnsafePointerToObject withUnsafeMutablePointer withUnsafeMutablePointers withUnsafePointer withUnsafePointers withVaList zip"},n=e.COMMENT("/\\*","\\*/",{contains:["self"]}),t={className:"subst",begin:/\\\(/,end:"\\)",keywords:i,contains:[]},a={className:"string",contains:[e.BACKSLASH_ESCAPE,t],variants:[{begin:/"""/,end:/"""/},{begin:/"/,end:/"/}]},r={className:"number",begin:"\\b([\\d_]+(\\.[\\deE_]+)?|0x[a-fA-F0-9_]+(\\.[a-fA-F0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b",relevance:0};return t.contains=[r],{name:"Swift",keywords:i,contains:[a,e.C_LINE_COMMENT_MODE,n,{className:"type",begin:"\\b[A-Z][\\wÀ-ʸ']*[!?]"},{className:"type",begin:"\\b[A-Z][\\wÀ-ʸ']*",relevance:0},r,{className:"function",beginKeywords:"func",end:"{",excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/[A-Za-z$_][0-9A-Za-z$_]*/}),{begin:/</,end:/>/},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:i,contains:["self",r,a,e.C_BLOCK_COMMENT_MODE,{begin:":"}],illegal:/["']/}],illegal:/\[|%/},{className:"class",beginKeywords:"struct protocol class extension enum",keywords:i,end:"\\{",excludeEnd:!0,contains:[e.inherit(e.TITLE_MODE,{begin:/[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})]},{className:"meta",begin:"(@discardableResult|@warn_unused_result|@exported|@lazy|@noescape|@NSCopying|@NSManaged|@objc|@objcMembers|@convention|@required|@noreturn|@IBAction|@IBDesignable|@IBInspectable|@IBOutlet|@infix|@prefix|@postfix|@autoclosure|@testable|@available|@nonobjc|@NSApplicationMain|@UIApplicationMain|@dynamicMemberLookup|@propertyWrapper)"},{beginKeywords:"import",end:/$/,contains:[e.C_LINE_COMMENT_MODE,n]}]}}}());hljs.registerLanguage("typescript",function(){"use strict";return function(e){var n={keyword:"in if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const class public private protected get set super static implements enum export import declare type namespace abstract as from extends async await",literal:"true false null undefined NaN Infinity",built_in:"eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document any number boolean string void Promise"},r={className:"meta",begin:"@[A-Za-z$_][0-9A-Za-z$_]*"},a={begin:"\\(",end:/\)/,keywords:n,contains:["self",e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.NUMBER_MODE]},t={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,r,a]},s={className:"number",variants:[{begin:"\\b(0[bB][01]+)n?"},{begin:"\\b(0[oO][0-7]+)n?"},{begin:e.C_NUMBER_RE+"n?"}],relevance:0},i={className:"subst",begin:"\\$\\{",end:"\\}",keywords:n,contains:[]},o={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,i],subLanguage:"xml"}},c={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,i],subLanguage:"css"}},E={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,i]};return i.contains=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,o,c,E,s,e.REGEXP_MODE],{name:"TypeScript",aliases:["ts"],keywords:n,contains:[{className:"meta",begin:/^\s*['"]use strict['"]/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,o,c,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,s,{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.REGEXP_MODE,{className:"function",begin:"(\\(.*?\\)|"+e.IDENT_RE+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:e.IDENT_RE},{begin:/\(\s*\)/},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,contains:["self",e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]}]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/[\{;]/,excludeEnd:!0,keywords:n,contains:["self",e.inherit(e.TITLE_MODE,{begin:"[A-Za-z$_][0-9A-Za-z$_]*"}),t],illegal:/%/,relevance:0},{beginKeywords:"constructor",end:/[\{;]/,excludeEnd:!0,contains:["self",t]},{begin:/module\./,keywords:{built_in:"module"},relevance:0},{beginKeywords:"module",end:/\{/,excludeEnd:!0},{beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:"interface extends"},{begin:/\$[(.]/},{begin:"\\."+e.IDENT_RE,relevance:0},r,a]}}}());hljs.registerLanguage("yaml",function(){"use strict";return function(e){var n={className:"string",relevance:0,variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/\S+/}],contains:[e.BACKSLASH_ESCAPE,{className:"template-variable",variants:[{begin:"{{",end:"}}"},{begin:"%{",end:"}"}]}]};return{name:"YAML",case_insensitive:!0,aliases:["yml","YAML"],contains:[{className:"attr",variants:[{begin:"\\w[\\w :\\/.-]*:(?=[ \t]|$)"},{begin:'"\\w[\\w :\\/.-]*":(?=[ \t]|$)'},{begin:"'\\w[\\w :\\/.-]*':(?=[ \t]|$)"}]},{className:"meta",begin:"^---s*$",relevance:10},{className:"string",begin:"[\\|>]([0-9]?[+-])?[ ]*\\n( *)[\\S ]+\\n(\\2[\\S ]+\\n?)*"},{begin:"<%[%=-]?",end:"[%-]?%>",subLanguage:"ruby",excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:"!"+e.UNDERSCORE_IDENT_RE},{className:"type",begin:"!!"+e.UNDERSCORE_IDENT_RE},{className:"meta",begin:"&"+e.UNDERSCORE_IDENT_RE+"$"},{className:"meta",begin:"\\*"+e.UNDERSCORE_IDENT_RE+"$"},{className:"bullet",begin:"\\-(?=[ ]|$)",relevance:0},e.HASH_COMMENT_MODE,{beginKeywords:"true false yes no null",keywords:{literal:"true false yes no null"}},{className:"number",begin:e.C_NUMBER_RE+"\\b"},n]}}}());hljs.registerLanguage("plaintext",function(){"use strict";return function(t){return{name:"Plain text",aliases:["text","txt"],disableAutodetect:!0}}}());hljs.registerLanguage("pyxlscript",function(){"use strict";return function(e){var n={keyword:"⌊ ⌋ ⌈ ⌉ | ‖ ∊ ∈ bitor pad joy bitxor bitand and because at local in if then for return while mod preserving_transform|10 else continue let|2 const break not with assert with debug_watch draw_sprite draw_text debug_print|4 while continue or nil|2 pi nan infinity true false ∅"},a={className:"subst",begin:/\{/,end:/\}/,keywords:n},i={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/(u|r|ur)"/,end:/"/,relevance:10},{begin:/(b|br)"/,end:/"/},{begin:/(fr|rf|f)"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,a]},e.QUOTE_STRING_MODE]},s={className:"number",relevance:0,variants:[{begin:/[+-]?[∞επ½⅓⅔¼¾⅕⅖⅗⅘⅙⅐⅛⅑⅒`]/},{begin:/#[0-7a-fA-F]+/},{begin:/[+-]?(\d*\.)?\d+(%|deg|°)?/},{begin:/[₀₁₂₃₄₅₆₇₈₉⁰¹²³⁴⁵⁶⁷⁸⁹]/}]},r={className:"params",begin:/\(/,end:/\)/,contains:[s,i]};return a.contains=[i,s],{aliases:["pyxlscript"],keywords:n,illegal:/(<\/|->|\?)|=>|@|\$/,contains:[{className:"section",relevance:10,variants:[{begin:/^[^\n]+?\\n(-|─|—|━|⎯|=|═|⚌){5,}/}]},s,i,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{variants:[{className:"function",beginKeywords:"def"}],end:/:/,illegal:/[${=;\n,]/,contains:[e.UNDERSCORE_TITLE_MODE,r,{begin:/->/,endsWithParent:!0,keywords:"None"}]}]}}}());
  /*****************************************************************************************/

  // Lucida Console on Windows has capital V's that look like lower case, so don't use it
  const codeFontStack = "Menlo,Consolas,monospace";
  const codeFontSize = `${Math.round(
    (6.5 * 105.1316178) / measureFontSize(codeFontStack)
  )}%`; // + 'px';

  const BODY_STYLESHEET = entag(
    "style",
    "body{max-width:680px;" +
      "margin:auto;" +
      "padding:20px;" +
      "text-align:justify;" +
      "line-height:140%; " +
      "-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-smoothing:antialiased;" +
      "color:#222;" +
      'font-family:Palatino,Georgia,"Times New Roman",serif}'
  );

  /** You can embed your own stylesheet AFTER the <script> tags in your
    file to override these defaults. */
  const STYLESHEET = entag(
    "style",
    // Force background images (except on the body) to print correctly on Chrome and Safari
    // and remove text shadows, which Chrome can't print and will turn into
    // boxes
    `${
      "@media print{*{-webkit-print-color-adjust:exact;text-shadow:none !important}}" +
      "body{" +
      "counter-reset: h1 h2 h3 h4 h5 h6 paragraph" +
      "}" +
      // Avoid header/footer in print to PDF. See https://productforums.google.com/forum/#!topic/chrome/LBMUDtGqr-0
      "@page{margin:0;size:auto}" +
      '#mdContextMenu{position:absolute;background:#383838;cursor:default;border:1px solid #999;color:#fff;padding:4px 0px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,"Helvetica Neue",sans-serif;font-size:85%;font-weight:600;border-radius:4px;box-shadow:0px 3px 10px rgba(0,0,0,35%)}' +
      "#mdContextMenu div{padding:0px 20px}" +
      "#mdContextMenu div:hover{background:#1659d1}" +
      ".md code,.md pre{" +
      "font-family:"
    }${codeFontStack};` +
      `font-size:${codeFontSize};` +
      "text-align:left;" +
      "line-height:140%" +
      "}" +
      ".md .mediumToc code,.md longToc code,.md .shortToc code,.md h1 code,.md h2 code,.md h3 code,.md h4 code,.md h5 code,.md h6 code{font-size:unset}" +
      ".md div.title{" +
      "font-size:26px;" +
      "font-weight:800;" +
      "line-height:120%;" +
      "text-align:center" +
      "}" +
      ".md div.afterTitles{height:10px}" +
      ".md div.subtitle{" +
      "text-align:center" +
      "}" +
      ".md iframe.textinsert, .md object.textinsert,.md iframe:not(.markdeep){display:block;margin-top:10px;margin-bottom:10px;width:100%;height:75vh;border:1px solid #000;border-radius:4px;background:#f5f5f4}" +
      ".md .image{display:inline-block}" +
      ".md img{" +
      "max-width:100%;" +
      "page-break-inside:avoid" +
      "}" +
      // Justification tends to handle URLs and code blocks poorly
      // when inside of a bullet, so disable it there
      ".md li{text-align:left;text-indent:0}" +
      // Make code blocks use 4-space tabs.
      // Set up a line number counter. Do NOT use "overflow: scroll" or it will force scrollbars even when unused on Windows.
      // Don't use text-overflow:ellipsis; which on mac just makes the line short even when scrolled
      ".md pre.listing {width:100%;tab-size:4;-moz-tab-size:4;-o-tab-size:4;counter-reset:line;overflow-x:auto;resize:horizontal}" +
      ".md pre.listing .linenumbers span.line:before{width:30px;margin-left:-28px;font-size:80%;text-align:right;counter-increment:line;" +
      "content:counter(line);display:inline-block;padding-right:13px;margin-right:8px;color:#ccc}" +
      // Force captions on line listings down close and then center them
      ".md div.tilde{" +
      "margin:20px 0 -10px;" +
      "text-align:center" +
      "}" +
      ".md .imagecaption,.md .tablecaption,.md .listingcaption{" +
      "display:inline-block;" +
      "margin:7px 5px 12px;" +
      "text-align:justify;" +
      "font-style:italic" +
      "}" +
      ".md img.pixel{image-rendering:-moz-crisp-edges;image-rendering:pixelated}" +
      ".md blockquote.fancyquote{" +
      "margin:25px 0 25px;" +
      "text-align:left;" +
      "line-height:160%" +
      "}" +
      ".md blockquote.fancyquote::before{" +
      'content:"\u201C";' +
      "color:#DDD;" +
      "font-family:Times New Roman;" +
      "font-size:45px;" +
      "line-height:0;" +
      "margin-right:6px;" +
      "vertical-align:-0.3em" +
      "}" +
      ".md span.fancyquote{" +
      "font-size:118%;" +
      "color:#777;" +
      "font-style:italic" +
      "}" +
      ".md span.fancyquote::after{" +
      'content:"\u201D";' +
      "font-style:normal;" +
      "color:#DDD;" +
      "font-family:Times New Roman;" +
      "font-size:45px;" +
      "line-height:0;" +
      "margin-left:6px;" +
      "vertical-align:-0.3em" +
      "}" +
      ".md blockquote.fancyquote .author{" +
      "width:100%;" +
      "margin-top:10px;" +
      "display:inline-block;" +
      "text-align:right" +
      "}" +
      ".md small{font-size:60%}" +
      ".md big{font-size:150%}" +
      ".md div.title,contents,.md .tocHeader,.md h1,.md h2,.md h3,.md h4,.md h5,.md h6,.md .shortTOC,.md .mediumTOC,.nonumberh1,.nonumberh2,.nonumberh3,.nonumberh4,.nonumberh5,.nonumberh6{" +
      "font-family:Verdana,Helvetica,Arial,sans-serif;" +
      "margin:13.4px 0 13.4px;" +
      "padding:15px 0 3px;" +
      "border-top:none;" +
      "clear:both" +
      "}" +
      ".md .tocTop {display:none}" +
      ".md h1,.md h2,.md h3,.md h4,.md h5,.md h6,.md .nonumberh1,.md .nonumberh2,.md .nonumberh3,.md .nonumberh4,.md .nonumberh5,.md .nonumberh6{" +
      "page-break-after:avoid;break-after:avoid" +
      "}" +
      ".md svg.diagram{" +
      "display:block;" +
      `font-family:${codeFontStack};` +
      `font-size:${codeFontSize};` +
      "text-align:center;" +
      "stroke-linecap:round;" +
      `stroke-width:${STROKE_WIDTH}px;` +
      "page-break-inside:avoid;" +
      "stroke:#000;" +
      "fill:#000" +
      "}" +
      ".md svg.diagram .opendot{" +
      "fill:#fff" +
      "}" +
      ".md svg.diagram .shadeddot{" +
      "fill:#CCC" +
      "}" +
      ".md svg.diagram .dotteddot{" +
      "stroke:#000;stroke-dasharray:4;fill:none" +
      "}" +
      ".md svg.diagram text{" +
      "stroke:none" +
      "}" +
      // printing scale and margins
      "@media print{@page{margin:1in 5mm;transform: scale(150%)}}" +
      // pagebreak hr
      "@media print{.md .pagebreak{page-break-after:always;visibility:hidden}}" +
      // Not restricted to a:link because we want things like svn URLs to have this font, which
      // makes "//" look better.
      ".md a{font-family:Georgia,Palatino,'Times New Roman'}" +
      ".md h1,.md .tocHeader,.md .nonumberh1{" +
      "border-bottom:3px solid;" +
      "font-size:20px;" +
      "font-weight:bold;" +
      "}" +
      ".md h1,.md .nonumberh1{" +
      "counter-reset: h2 h3 h4 h5 h6" +
      "}" +
      ".md h2,.md .nonumberh2{" +
      "counter-reset: h3 h4 h5 h6;" +
      "border-bottom:2px solid #999;" +
      "color:#555;" +
      "font-weight:bold;" +
      "font-size:18px;" +
      "}" +
      ".md h3,.md h4,.md h5,.md h6,.md .nonumberh3,.md .nonumberh4,.md .nonumberh5,.md .nonumberh6{" +
      "font-family:Verdana,Helvetica,Arial,sans-serif;" +
      "color:#555;" +
      "font-size:16px;" +
      "}" +
      ".md h3{counter-reset:h4 h5 h6}" +
      ".md h4{counter-reset:h5 h6}" +
      ".md h5{counter-reset:h6}" +
      ".md div.table{" +
      "margin:16px 0 16px 0" +
      "}" +
      ".md table{" +
      "border-collapse:collapse;" +
      "line-height:140%;" +
      "page-break-inside:avoid" +
      "}" +
      ".md table.table{" +
      "margin:auto" +
      "}" +
      ".md table.calendar{" +
      "width:100%;" +
      "margin:auto;" +
      "font-size:11px;" +
      "font-family:Verdana,Helvetica,Arial,sans-serif" +
      "}" +
      ".md table.calendar th{" +
      "font-size:16px" +
      "}" +
      ".md .today{" +
      "background:#ECF8FA" +
      "}" +
      ".md .calendar .parenthesized{" +
      "color:#999;" +
      "font-style:italic" +
      "}" +
      ".md table.table th{" +
      "color:#FFF;" +
      "background-color:#AAA;" +
      "border:1px solid #888;" +
      // top right bottom left
      "padding:8px 15px 8px 15px" +
      "}" +
      ".md table.table td{" +
      // top right bottom left
      "padding:5px 15px 5px 15px;" +
      "border:1px solid #888" +
      "}" +
      ".md table.table tr:nth-child(even){" +
      "background:#EEE" +
      "}" +
      ".md pre.tilde{" +
      "border-top: 1px solid #CCC;" +
      "border-bottom: 1px solid #CCC;" +
      "padding: 5px 0 5px 20px;" +
      "margin:0 0 0 0;" +
      "background:#FCFCFC;" +
      "page-break-inside:avoid" +
      "}" +
      ".md a.target{width:0px;height:0px;visibility:hidden;font-size:0px;display:inline-block}" +
      ".md a:link, .md a:visited{color:#38A;text-decoration:none}" +
      ".md a:link:hover{text-decoration:underline}" +
      ".md dt{" +
      "font-weight:700" +
      "}" +
      // Remove excess space above definitions due to paragraph breaks, and add some at the bottom
      ".md dl>dd{margin-top:-8px; margin-bottom:8px}" +
      // Extra space around terse definition lists
      ".md dl>table{" +
      "margin:35px 0 30px" +
      "}" +
      ".md code{" +
      "page-break-inside:avoid;" +
      "} @media print{.md .listing code{white-space:pre-wrap}}" +
      ".md .endnote{" +
      "font-size:13px;" +
      "line-height:15px;" +
      "padding-left:10px;" +
      "text-indent:-10px" +
      "}" +
      ".md .bib{" +
      "padding-left:80px;" +
      "text-indent:-80px;" +
      "text-align:left" +
      "}" +
      ".markdeepFooter{font-size:9px;text-align:right;padding-top:80px;color:#999}" +
      ".md .mediumTOC{float:right;font-size:12px;line-height:15px;border-left:1px solid #CCC;padding-left:15px;margin:15px 0px 15px 25px}" +
      ".md .mediumTOC .level1{font-weight:600}" +
      ".md .longTOC .level1{font-weight:600;display:block;padding-top:12px;margin:0 0 -20px}" +
      ".md .shortTOC{text-align:center;font-weight:bold;margin-top:15px;font-size:14px}" +
      ".md .admonition{" +
      "position:relative;" +
      "margin:1em 0;" +
      "padding:.4rem 1rem;" +
      "border-radius:.2rem;" +
      "border-left:2.5rem solid rgba(68,138,255,.4);" +
      "background-color:rgba(68,138,255,.15);" +
      "}" +
      ".md .admonition-title{" +
      "font-weight:bold;" +
      "border-bottom:solid 1px rgba(68,138,255,.4);" +
      "padding-bottom:4px;" +
      "margin-bottom:4px;" +
      "margin-left: -1rem;" +
      "padding-left:1rem;" +
      "margin-right:-1rem;" +
      "border-color:rgba(68,138,255,.4)" +
      "}" +
      ".md .admonition.tip{" +
      "border-left:2.5rem solid rgba(50,255,90,.4);" +
      "background-color:rgba(50,255,90,.15)" +
      "}" +
      ".md .admonition.tip::before{" +
      'content:"\\24d8";' +
      "font-weight:bold;" +
      "font-size:150%;" +
      "position:relative;" +
      "top:3px;" +
      "color:rgba(26,128,46,.8);" +
      "left:-2.95rem;" +
      "display:block;" +
      "width:0;" +
      "height:0" +
      "}" +
      ".md .admonition.tip>.admonition-title{" +
      "border-color:rgba(50,255,90,.4)" +
      "}" +
      ".md .admonition.warn,.md .admonition.warning{" +
      "border-left:2.5rem solid rgba(255,145,0,.4);" +
      "background-color:rgba(255,145,0,.15)" +
      "}" +
      ".md .admonition.warn::before,.md .admonition.warning::before{" +
      'content:"\\26A0";' +
      "font-weight:bold;" +
      "font-size:150%;" +
      "position:relative;" +
      "top:2px;" +
      "color:rgba(128,73,0,.8);" +
      "left:-2.95rem;" +
      "display:block;" +
      "width:0;" +
      "height:0" +
      "}" +
      ".md .admonition.warn>.admonition-title,.md .admonition.warning>.admonition-title{" +
      "border-color:rgba(255,145,0,.4)" +
      "}" +
      ".md .admonition.error{" +
      "border-left: 2.5rem solid rgba(255,23,68,.4);" +
      "background-color:rgba(255,23,68,.15)" +
      "}" +
      ".md .admonition.error>.admonition-title{" +
      "border-color:rgba(255,23,68,.4)" +
      "}" +
      ".md .admonition.error::before{" +
      'content: "\\2612";' +
      'font-family:"Arial";' +
      "font-size:200%;" +
      "position:relative;" +
      "color:rgba(128,12,34,.8);" +
      "top:-2px;" +
      "left:-3rem;" +
      "display:block;" +
      "width:0;" +
      "height:0" +
      "}" +
      ".md .admonition p:last-child{margin-bottom:0}" +
      ".md li.checked,.md li.unchecked{" +
      "list-style:none;" +
      "overflow:visible;" +
      "text-indent:-1.2em" +
      "}" +
      ".md li.checked:before,.md li.unchecked:before{" +
      'content:"\\2611";' +
      "display:block;" +
      "float:left;" +
      "width:1em;" +
      "font-size:120%" +
      "}" +
      ".md li.unchecked:before{" +
      'content:"\\2610"' +
      "}"
  );

  const MARKDEEP_LINE =
    '<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="markdeep.min.js"></script><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible")</script>';

  // Language options:
  const FRENCH = {
    keyword: {
      table: "tableau",
      figure: "figure",
      listing: "liste",
      diagram: "diagramme",
      contents: "Table des matières",

      sec: "sec",
      section: "section",
      subsection: "paragraphe",
      chapter: "chapitre",

      Monday: "lundi",
      Tuesday: "mardi",
      Wednesday: "mercredi",
      Thursday: "jeudi",
      Friday: "vendredi",
      Saturday: "samedi",
      Sunday: "dimanche",

      January: "Janvier",
      February: "Février",
      March: "Mars",
      April: "Avril",
      May: "Mai",
      June: "Juin",
      July: "Julliet",
      August: "Août",
      September: "Septembre",
      October: "Octobre",
      November: "Novembre",
      December: "Décembre",

      jan: "janv",
      feb: "févr",
      mar: "mars",
      apr: "avril",
      may: "mai",
      jun: "juin",
      jul: "juil",
      aug: "août",
      sep: "sept",
      oct: "oct",
      nov: "nov",
      dec: "déc",

      "&ldquo;": "&laquo;&nbsp;",
      "&rtquo;": "&nbsp;&raquo;",
    },
  };

  // Translated by "Warmist"
  const LITHUANIAN = {
    keyword: {
      table: "lentelė",
      figure: "paveikslėlis",
      listing: "sąrašas",
      diagram: "diagrama",
      contents: "Turinys",

      sec: "sk",
      section: "skyrius",
      subsection: "poskyris",
      chapter: "skyrius",

      Monday: "pirmadienis",
      Tuesday: "antradienis",
      Wednesday: "trečiadienis",
      Thursday: "ketvirtadienis",
      Friday: "penktadienis",
      Saturday: "šeštadienis",
      Sunday: "sekmadienis",

      January: "Sausis",
      February: "Vasaris",
      March: "Kovas",
      April: "Balandis",
      May: "Gegužė",
      June: "Birželis",
      July: "Liepa",
      August: "Rugpjūtis",
      September: "Rugsėjis",
      October: "Spalis",
      November: "Lapkritis",
      December: "Gruodis",

      jan: "saus",
      feb: "vas",
      mar: "kov",
      apr: "bal",
      may: "geg",
      jun: "birž",
      jul: "liep",
      aug: "rugpj",
      sep: "rugs",
      oct: "spal",
      nov: "lapkr",
      dec: "gruod",

      "&ldquo;": "&bdquo;",
      "&rtquo;": "&ldquo;",
    },
  };

  // Translated by Zdravko Velinov
  const BULGARIAN = {
    keyword: {
      table: "таблица",
      figure: "фигура",
      listing: "списък",
      diagram: "диаграма",

      contents: "cъдържание",

      sec: "сек",
      section: "раздел",
      subsection: "подраздел",
      chapter: "глава",

      Monday: "понеделник",
      Tuesday: "вторник",
      Wednesday: "сряда",
      Thursday: "четвъртък",
      Friday: "петък",
      Saturday: "събота",
      Sunday: "неделя",

      January: "януари",
      February: "февруари",
      March: "март",
      April: "април",
      May: "май",
      June: "юни",
      July: "юли",
      August: "август",
      September: "септември",
      October: "октомври",
      November: "ноември",
      December: "декември",

      jan: "ян",
      feb: "февр",
      mar: "март",
      apr: "апр",
      may: "май",
      jun: "юни",
      jul: "юли",
      aug: "авг",
      sep: "септ",
      oct: "окт",
      nov: "ноем",
      dec: "дек",

      "&ldquo;": "&bdquo;",
      "&rdquo;": "&rdquo;",
    },
  };

  // Translated by Tiago Antão
  const PORTUGUESE = {
    keyword: {
      table: "tabela",
      figure: "figura",
      listing: "lista",
      diagram: "diagrama",
      contents: "conteúdo",

      sec: "sec",
      section: "secção",
      subsection: "subsecção",
      chapter: "capítulo",

      Monday: "Segunda-feira",
      Tuesday: "Terça-feira",
      Wednesday: "Quarta-feira",
      Thursday: "Quinta-feira",
      Friday: "Sexta-feira",
      Saturday: "Sábado",
      Sunday: "Domingo",

      January: "Janeiro",
      February: "Fevereiro",
      March: "Março",
      April: "Abril",
      May: "Maio",
      June: "Junho",
      July: "Julho",
      August: "Agosto",
      September: "Setembro",
      October: "Outubro",
      November: "Novembro",
      December: "Dezembro",

      jan: "jan",
      feb: "fev",
      mar: "mar",
      apr: "abr",
      may: "mai",
      jun: "jun",
      jul: "jul",
      aug: "ago",
      sep: "set",
      oct: "oct",
      nov: "nov",
      dec: "dez",

      "&ldquo;": "&laquo;",
      "&rtquo;": "&raquo;",
    },
  };

  // Translated by Jan Toušek
  const CZECH = {
    keyword: {
      table: "Tabulka",
      figure: "Obrázek",
      listing: "Seznam",
      diagram: "Diagram",

      contents: "Obsah",

      sec: "kap.", // Abbreviation for section
      section: "kapitola",
      subsection: "podkapitola",
      chapter: "kapitola",

      Monday: "pondělí",
      Tuesday: "úterý",
      Wednesday: "středa",
      Thursday: "čtvrtek",
      Friday: "pátek",
      Saturday: "sobota",
      Sunday: "neděle",

      January: "leden",
      February: "únor",
      March: "březen",
      April: "duben",
      May: "květen",
      June: "červen",
      July: "červenec",
      August: "srpen",
      September: "září",
      October: "říjen",
      November: "listopad",
      December: "prosinec",

      jan: "led",
      feb: "úno",
      mar: "bře",
      apr: "dub",
      may: "kvě",
      jun: "čvn",
      jul: "čvc",
      aug: "srp",
      sep: "zář",
      oct: "říj",
      nov: "lis",
      dec: "pro",

      "&ldquo;": "&bdquo;",
      "&rdquo;": "&ldquo;",
    },
  };

  const ITALIAN = {
    keyword: {
      table: "tabella",
      figure: "figura",
      listing: "lista",
      diagram: "diagramma",
      contents: "indice",

      sec: "sez",
      section: "sezione",
      subsection: "paragrafo",
      chapter: "capitolo",

      Monday: "lunedì",
      Tuesday: "martedì",
      Wednesday: "mercoledì",
      Thursday: "giovedì",
      Friday: "venerdì",
      Saturday: "sabato",
      Sunday: "domenica",

      January: "Gennaio",
      February: "Febbraio",
      March: "Marzo",
      April: "Aprile",
      May: "Maggio",
      June: "Giugno",
      July: "Luglio",
      August: "Agosto",
      September: "Settembre",
      October: "Ottobre",
      November: "Novembre",
      December: "Dicembre",

      jan: "gen",
      feb: "feb",
      mar: "mar",
      apr: "apr",
      may: "mag",
      jun: "giu",
      jul: "lug",
      aug: "ago",
      sep: "set",
      oct: "ott",
      nov: "nov",
      dec: "dic",

      "&ldquo;": "&ldquo;",
      "&rtquo;": "&rdquo;",
    },
  };

  const RUSSIAN = {
    keyword: {
      table: "таблица",
      figure: "рисунок",
      listing: "листинг",
      diagram: "диаграмма",

      contents: "Содержание",

      sec: "сек",
      section: "раздел",
      subsection: "подраздел",
      chapter: "глава",

      Monday: "понедельник",
      Tuesday: "вторник",
      Wednesday: "среда",
      Thursday: "четверг",
      Friday: "пятница",
      Saturday: "суббота",
      Sunday: "воскресенье",

      January: "январьr",
      February: "февраль",
      March: "март",
      April: "апрель",
      May: "май",
      June: "июнь",
      July: "июль",
      August: "август",
      September: "сентябрь",
      October: "октябрь",
      November: "ноябрь",
      December: "декабрь",

      jan: "янв",
      feb: "февр",
      mar: "март",
      apr: "апр",
      may: "май",
      jun: "июнь",
      jul: "июль",
      aug: "авг",
      sep: "сент",
      oct: "окт",
      nov: "ноябрь",
      dec: "дек",

      "&ldquo;": "«",
      "&rdquo;": "»",
    },
  };

  // Translated by Dariusz Kuśnierek
  const POLISH = {
    keyword: {
      table: "tabela",
      figure: "ilustracja",
      listing: "wykaz",
      diagram: "diagram",
      contents: "Spis treści",

      sec: "rozdz.",
      section: "rozdział",
      subsection: "podrozdział",
      chapter: "kapituła",

      Monday: "Poniedziałek",
      Tuesday: "Wtorek",
      Wednesday: "Środa",
      Thursday: "Czwartek",
      Friday: "Piątek",
      Saturday: "Sobota",
      Sunday: "Niedziela",

      January: "Styczeń",
      February: "Luty",
      March: "Marzec",
      April: "Kwiecień",
      May: "Maj",
      June: "Czerwiec",
      July: "Lipiec",
      August: "Sierpień",
      September: "Wrzesień",
      October: "Październik",
      November: "Listopad",
      December: "Grudzień",

      jan: "sty",
      feb: "lut",
      mar: "mar",
      apr: "kwi",
      may: "maj",
      jun: "cze",
      jul: "lip",
      aug: "sie",
      sep: "wrz",
      oct: "paź",
      nov: "lis",
      dec: "gru",

      "&ldquo;": "&bdquo;",
      "&rdquo;": "&rdquo;",
    },
  };

  // Translated by Sandor Berczi
  const HUNGARIAN = {
    keyword: {
      table: "táblázat",
      figure: "ábra",
      listing: "lista",
      diagram: "diagramm",

      contents: "Tartalomjegyzék",

      sec: "fej", // Abbreviation for section
      section: "fejezet",
      subsection: "alfejezet",
      chapter: "fejezet",

      Monday: "hétfő",
      Tuesday: "kedd",
      Wednesday: "szerda",
      Thursday: "csütörtök",
      Friday: "péntek",
      Saturday: "szombat",
      Sunday: "vasárnap",

      January: "január",
      February: "február",
      March: "március",
      April: "április",
      May: "május",
      June: "június",
      July: "július",
      August: "augusztus",
      September: "szeptember",
      October: "október",
      November: "november",
      December: "december",

      jan: "jan",
      feb: "febr",
      mar: "márc",
      apr: "ápr",
      may: "máj",
      jun: "jún",
      jul: "júl",
      aug: "aug",
      sep: "szept",
      oct: "okt",
      nov: "nov",
      dec: "dec",

      "&ldquo;": "&bdquo;",
      "&rdquo;": "&rdquo;",
    },
  };

  // Translated by Takashi Masuyama
  const JAPANESE = {
    keyword: {
      table: "表",
      figure: "図",
      listing: "一覧",
      diagram: "図",
      contents: "目次",

      sec: "節",
      section: "節",
      subsection: "項",
      chapter: "章",

      Monday: "月",
      Tuesday: "火",
      Wednesday: "水",
      Thursday: "木",
      Friday: "金",
      Saturday: "土",
      Sunday: "日",

      January: "1月",
      February: "2月",
      March: "3月",
      April: "4月",
      May: "5月",
      June: "6月",
      July: "7月",
      August: "8月",
      September: "9月",
      October: "10月",
      November: "11月",
      December: "12月",

      jan: "1月",
      feb: "2月",
      mar: "3月",
      apr: "4月",
      may: "5月",
      jun: "6月",
      jul: "7月",
      aug: "8月",
      sep: "9月",
      oct: "10月",
      nov: "11月",
      dec: "12月",

      "&ldquo;": "「",
      "&rdquo;": "」",
    },
  };

  // Translated by Sandor Berczi
  const GERMAN = {
    keyword: {
      table: "Tabelle",
      figure: "Abbildung",
      listing: "Auflistung",
      diagram: "Diagramm",

      contents: "Inhaltsverzeichnis",

      sec: "Kap",
      section: "Kapitel",
      subsection: "Unterabschnitt",
      chapter: "Kapitel",

      Monday: "Montag",
      Tuesday: "Dienstag",
      Wednesday: "Mittwoch",
      Thursday: "Donnerstag",
      Friday: "Freitag",
      Saturday: "Samstag",
      Sunday: "Sonntag",

      January: "Januar",
      February: "Februar",
      March: "März",
      April: "April",
      May: "Mai",
      June: "Juni",
      July: "Juli",
      August: "August",
      September: "September",
      October: "Oktober",
      November: "November",
      December: "Dezember",

      jan: "Jan",
      feb: "Feb",
      mar: "Mär",
      apr: "Apr",
      may: "Mai",
      jun: "Jun",
      jul: "Jul",
      aug: "Aug",
      sep: "Sep",
      oct: "Okt",
      nov: "Nov",
      dec: "Dez",

      "&ldquo;": "&bdquo;",
      "&rdquo;": "&ldquo;",
    },
  };

  // Translated by Marcelo Arroyo
  const SPANISH = {
    keyword: {
      table: "Tabla",
      figure: "Figura",
      listing: "Listado",
      diagram: "Diagrama",
      contents: "Tabla de Contenidos",

      sec: "sec",
      section: "Sección",
      subsection: "Subsección",
      chapter: "Capítulo",

      Monday: "Lunes",
      Tuesday: "Martes",
      Wednesday: "Miércoles",
      Thursday: "Jueves",
      Friday: "Viernes",
      Saturday: "Sábado",
      Sunday: "Domingo",

      January: "Enero",
      February: "Febrero",
      March: "Marzo",
      April: "Abril",
      May: "Mayo",
      June: "Junio",
      July: "Julio",
      August: "Agosto",
      September: "Septiembre",
      October: "Octubre",
      November: "Noviembre",
      December: "Diciembre",

      jan: "ene",
      feb: "feb",
      mar: "mar",
      apr: "abr",
      may: "may",
      jun: "jun",
      jul: "jul",
      aug: "ago",
      sep: "sept",
      oct: "oct",
      nov: "nov",
      dec: "dic",

      "&ldquo;": "&laquo;&nbsp;",
      "&rtquo;": "&nbsp;&raquo;",
    },
  };

  // Translated by Nils Nilsson
  const SWEDISH = {
    keyword: {
      table: "tabell",
      figure: "figur",
      listing: "lista",
      diagram: "diagram",

      contents: "Innehållsförteckning",
      sec: "sek",
      section: "sektion",
      subsection: "sektion",
      chapter: "kapitel",

      Monday: "måndag",
      Tuesday: "tisdag",
      Wednesday: "onsdag",
      Thursday: "torsdag",
      Friday: "fredag",
      Saturday: "lördag",
      Sunday: "söndag",

      January: "januari",
      February: "februari",
      March: "mars",
      April: "april",
      May: "maj",
      June: "juni",
      July: "juli",
      August: "augusti",
      September: "september",
      October: "oktober",
      November: "november",
      December: "december",

      jan: "jan",
      feb: "feb",
      mar: "mar",
      apr: "apr",
      may: "maj",
      jun: "jun",
      jul: "jul",
      aug: "aug",
      sep: "sep",
      oct: "okt",
      nov: "nov",
      dec: "dec",

      "&ldquo;": "&rdquo;",
      "&rdquo;": "&rdquo;",
    },
  };

  const DEFAULT_OPTIONS = {
    mode: "markdeep",
    detectMath: true,
    lang: { keyword: {} }, // English
    tocStyle: "auto",
    hideEmptyWeekends: true,
    showLabels: false,
    sortScheduleLists: true,
    definitionStyle: "auto",
    linkAPIDefinitions: false,
    inlineCodeLang: false,
    scrollThreshold: 90,
    captionAbove: {
      diagram: false,
      image: false,
      table: false,
      listing: false,
    },
    smartQuotes: true,
  };

  // See http://www.i18nguy.com/unicode/language-identifiers.html for keys
  const LANG_TABLE = {
    en: { keyword: {} },
    ru: RUSSIAN,
    fr: FRENCH,
    pl: POLISH,
    bg: BULGARIAN,
    de: GERMAN,
    hu: HUNGARIAN,
    sv: SWEDISH,
    pt: PORTUGUESE,
    ja: JAPANESE,
    it: ITALIAN,
    lt: LITHUANIAN,
    cz: CZECH,
    es: SPANISH,
    // Contribute your language here! I only accept translations
    // from native speakers.
  };

  [].slice.call(document.getElementsByTagName("meta")).forEach((elt) => {
    const att = elt.getAttribute("lang");
    if (att) {
      const lang = LANG_TABLE[att];
      if (lang) {
        DEFAULT_OPTIONS.lang = lang;
      }
    }
  });

  const max = Math.max;
  const min = Math.min;
  const abs = Math.abs;
  const sign =
    Math.sign ||
    function (x) {
      return Number(x) === x ? (x === 0 ? x : x > 0 ? 1 : -1) : NaN;
    };

  /** Get an option, or return the corresponding value from DEFAULT_OPTIONS */
  function option(key, key2) {
    if (window.markdeepOptions && window.markdeepOptions[key] !== undefined) {
      let val = window.markdeepOptions[key];
      if (key2) {
        val = val[key2];
        if (val !== undefined) {
          return val;
        } else {
          return DEFAULT_OPTIONS[key][key2];
        }
      } else {
        return window.markdeepOptions[key];
      }
    } else if (DEFAULT_OPTIONS[key] !== undefined) {
      if (key2) {
        return DEFAULT_OPTIONS[key][key2];
      } else {
        return DEFAULT_OPTIONS[key];
      }
    } else {
      console.warn(`Illegal option: "${key}"`);
      return undefined;
    }
  }

  function maybeShowLabel(url, tag) {
    if (option("showLabels")) {
      const text = ` {\u00A0${url}\u00A0}`;
      return tag ? entag(tag, text) : text;
    } else {
      return "";
    }
  }

  // Returns the localized version of word, defaulting to the word itself
  function keyword(word) {
    return (
      option("lang").keyword[word] ||
      option("lang").keyword[word.toLowerCase()] ||
      word
    );
  }

  /** Converts <>&" to their HTML escape sequences */
  function escapeHTMLEntities(str) {
    return String(str)
      .rp(/&/g, "&amp;")
      .rp(/</g, "&lt;")
      .rp(/>/g, "&gt;")
      .rp(/"/g, "&quot;");
  }

  /** Restores the original source string's '<' and '>' as entered in
    the document, before the browser processed it as HTML. There is no
    way in an HTML document to distinguish an entity that was entered
    as an entity. */
  function unescapeHTMLEntities(str) {
    // Process &amp; last so that we don't recursively unescape
    // escaped escape sequences.
    return str
      .rp(/&lt;/g, "<")
      .rp(/&gt;/g, ">")
      .rp(/&quot;/g, '"')
      .rp(/&#39;/g, "'")
      .rp(/&ndash;/g, "\u2013")
      .rp(/&mdash;/g, "---")
      .rp(/&amp;/g, "&");
  }

  function removeHTMLTags(str) {
    return str.rp(/<.*?>/g, "");
  }

  /** Turn the argument into a legal URL anchor */
  function mangle(text) {
    return encodeURI(text.rp(/\s/g, "").toLowerCase());
  }

  /** Creates a style sheet containing elements like:

  hn::before { 
    content: counter(h1) "." counter(h2) "." ... counter(hn) " "; 
    counter-increment: hn; 
   } 
*/
  function sectionNumberingStylesheet() {
    let s = "";

    for (let i = 1; i <= 6; ++i) {
      s += `.md h${i}::before {\ncontent:`;
      for (let j = 1; j <= i; ++j) {
        s += `counter(h${j}) "${j < i ? "." : " "}"`;
      }
      s += `;\ncounter-increment: h${i};margin-right:10px}`;
    }

    return entag("style", s);
  }

  /**
   \param node  A node from an HTML DOM

   \return A String that is a very good reconstruction of what the
   original source looked like before the browser tried to correct
   it to legal HTML.
 */
  function nodeToMarkdeepSource(node, leaveEscapes) {
    let source = node ? node.innerHTML : "";

    // Markdown uses <john@bar.com> e-mail syntax, which HTML parsing
    // will try to close by inserting the matching close tags at the end of the
    // document. Remove anything that looks like that and comes *after*
    // the first fallback style.
    //source = source.rp(/<style class="fallback">[\s\S]*?<\/style>/gi, '');

    // Remove artificially inserted close tags from URLs and
    source = source.rp(
      /<\/https?:.*>|<\/ftp:.*>|<\/[^ "\t\n>]+@[^ "\t\n>]+>/gi,
      ""
    );

    // Now try to fix the URLs themselves, which will be
    // transformed like this: <http: casual-effects.com="" markdeep="">
    source = source.rp(/<(https?|ftp): (.*?)>/gi, (match, protocol, list) => {
      // Remove any quotes--they wouldn't have been legal in the URL anyway
      let s = `<${protocol}://${list.rp(/=""\s/g, "/")}`;

      if (s.ss(s.length - 3) === '=""') {
        s = s.ss(0, s.length - 3);
      }

      // Remove any lingering quotes (since they
      // wouldn't have been legal in the URL)
      s = s.rp(/"/g, "");

      return `${s}>`;
    });

    // Remove the "fallback" style tags
    source = source.rp(/<style class=["']fallback["']>.*?<\/style>/gim, "");

    source = unescapeHTMLEntities(source);

    return source;
  }

  /** Extracts one diagram from a Markdown string.

    Returns {beforeString, diagramString, alignmentHint, afterString}
    diagramString will be empty if nothing was found. The
    DIAGRAM_MARKER is stripped from the diagramString. 

    alignmentHint may be:
    floatleft  
    floatright
    center
    flushleft

    diagramString does not include the marker characters. 
    If there is a caption, it will appear in the afterString and not be parsed.
*/
  function extractDiagram(sourceString) {
    // Returns the number of wide Unicode symbols (outside the BMP) in string s between indices
    // start and end - 1
    function unicodeSyms(s, start, end) {
      let p = start;
      for (let i = start; i < end; ++i, ++p) {
        const c = s.charCodeAt(p);
        p += c >= 0xd800 && c <= 0xdbff;
      }
      return p - end;
    }

    function advance() {
      nextLineBeginning = sourceString.indexOf("\n", lineBeginning) + 1;
      wideCharacters = unicodeSyms(
        sourceString,
        lineBeginning + xMin,
        lineBeginning + xMax
      );
      textOnLeft =
        textOnLeft ||
        /\S/.test(sourceString.ss(lineBeginning, lineBeginning + xMin));
      noRightBorder =
        noRightBorder ||
        sourceString[lineBeginning + xMax + wideCharacters] !== "*";

      // Text on the right ... if the line is not all '*'
      textOnRight =
        !noRightBorder &&
        (textOnRight ||
          /[^ *\t\n\r]/.test(
            sourceString.ss(
              lineBeginning + xMax + wideCharacters + 1,
              nextLineBeginning
            )
          ));
    }

    const noDiagramResult = {
      beforeString: sourceString,
      diagramString: "",
      alignmentHint: "",
      afterString: "",
    };

    // Search sourceString for the first rectangle of enclosed
    // DIAGRAM_MARKER characters at least DIAGRAM_START.length wide
    for (
      let i = sourceString.indexOf(DIAGRAM_START);
      i >= 0;
      i = sourceString.indexOf(DIAGRAM_START, i + DIAGRAM_START.length)
    ) {
      // We found what looks like a diagram start. See if it has either a full border of
      // aligned '*' characters, or top-left-bottom borders and nothing but white space on
      // the left.

      // Look backwards to find the beginning of the line (or of the string)
      // and measure the start character relative to it
      var lineBeginning = max(0, sourceString.lastIndexOf("\n", i)) + 1;
      var xMin = i - lineBeginning;

      // Find the first non-diagram character on this line...or the end of the entire source string
      var j;
      for (
        j = i + DIAGRAM_START.length;
        sourceString[j] === DIAGRAM_MARKER;
        ++j
      ) {}
      var xMax = j - lineBeginning - 1;

      // We have a potential hit. Start accumulating a result. If there was anything
      // between the newline and the diagram, move it to the after string for proper alignment.
      const result = {
        beforeString: sourceString.ss(0, lineBeginning),
        diagramString: "",
        alignmentHint: "center",
        afterString: sourceString.ss(lineBeginning, i).rp(/[ \t]+$/, " "),
      };

      var nextLineBeginning = 0,
        wideCharacters = 0;
      var textOnLeft = false,
        textOnRight = false;
      var noRightBorder = false;

      advance();

      // Now, see if the pattern repeats on subsequent lines
      for (let good = true, previousEnding = j; good; ) {
        // Find the next line
        lineBeginning = nextLineBeginning;
        advance();
        if (lineBeginning === 0) {
          // Hit the end of the string before the end of the pattern
          return noDiagramResult;
        }

        if (textOnLeft) {
          // Even if there is text on *both* sides
          result.alignmentHint = "floatright";
        } else if (textOnRight) {
          result.alignmentHint = "floatleft";
        }

        // See if there are markers at the correct locations on the next line
        if (
          sourceString[lineBeginning + xMin] === DIAGRAM_MARKER &&
          (!textOnLeft ||
            sourceString[lineBeginning + xMax + wideCharacters] ===
              DIAGRAM_MARKER)
        ) {
          // See if there's a complete line of DIAGRAM_MARKER, which would end the diagram
          var x;
          for (
            x = xMin;
            x < xMax && sourceString[lineBeginning + x] === DIAGRAM_MARKER;
            ++x
          ) {}

          const begin = lineBeginning + xMin;
          let end = lineBeginning + xMax + wideCharacters;

          if (!textOnLeft) {
            // This may be an incomplete line
            const newlineLocation = sourceString.indexOf("\n", begin);
            if (newlineLocation !== -1) {
              end = Math.min(end, newlineLocation);
            }
          }

          // Trim any excess whitespace caused by our truncation because Markdown will
          // interpret that as fixed-formatted lines
          result.afterString += sourceString
            .ss(previousEnding, begin)
            .rp(/^[ \t]*[ \t]/, " ")
            .rp(/[ \t][ \t]*$/, " ");
          if (x === xMax) {
            // We found the last row. Put everything else into
            // the afterString and return the result.

            result.afterString += sourceString.ss(lineBeginning + xMax + 1);
            return result;
          } else {
            // A line of a diagram. Extract everything before
            // the diagram line started into the string of
            // content to be placed after the diagram in the
            // final HTML
            result.diagramString += `${sourceString.ss(begin + 1, end)}\n`;
            previousEnding = end + 1;
          }
        } else {
          // Found an incorrectly delimited line. Abort
          // processing of this potential diagram, which is now
          // known to NOT be a diagram after all.
          good = false;
        }
      } // Iterate over verticals in the potential box
    } // Search for the start

    return noDiagramResult;
  }

  /** 
    Find the specified delimiterRegExp used as a quote (e.g., *foo*)
    and replace it with the HTML tag and optional attributes.
*/
  function replaceMatched(string, delimiterRegExp, tag, attribs) {
    const delimiter = delimiterRegExp.source;
    const flanking = `[^ \\t\\n${delimiter}]`;
    const pattern =
      `([^A-Za-z0-9])(${delimiter})` +
      `(${flanking}.*?(\\n.+?)*?)${delimiter}(?![A-Za-z0-9])`;

    return string.rp(
      new RegExp(pattern, "g"),
      `$1<${tag}${attribs ? ` ${attribs}` : ""}>$3</${tag}>`
    );
  }

  /** Maruku ("github")-style table processing */
  function replaceTables(s, protect) {
    const TABLE_ROW = /(?:\n[ \t]*(?:(?:\|?[ \t\S]+?(?:\|[ \t\S]+?)+\|?)|\|[ \t\S]+\|)(?=\n))/
      .source;
    const TABLE_SEPARATOR = /\n[ \t]*(?:(?:\|? *\:?-+\:?(?: *\| *\:?-+\:?)+ *\|?|)|\|[\:-]+\|)(?=\n)/
      .source;
    const TABLE_CAPTION = /\n[ \t]*\[[^\n\|]+\][ \t]*(?=\n)/.source;
    const TABLE_REGEXP = new RegExp(
      `${TABLE_ROW + TABLE_SEPARATOR + TABLE_ROW}+(${TABLE_CAPTION})?`,
      "g"
    );

    function trimTableRowEnds(row) {
      return row.trim().rp(/^\||\|$/g, "");
    }

    s = s.rp(TABLE_REGEXP, (match) => {
      // Found a table, actually parse it by rows
      const rowArray = match.split("\n");

      let result = "";

      // Skip the bogus leading row
      const startRow = rowArray[0] === "" ? 1 : 0;

      let caption = rowArray[rowArray.length - 1].trim();

      if (
        caption.length > 3 &&
        caption[0] === "[" &&
        caption[caption.length - 1] === "]"
      ) {
        // Remove the caption from the row array
        rowArray.pop();
        caption = caption.ss(1, caption.length - 1);
      } else {
        caption = undefined;
      }

      // Parse the separator row for left/center/right-indicating colons
      const columnStyle = [];
      trimTableRowEnds(rowArray[startRow + 1]).rp(/:?-+:?/g, (match) => {
        const left = match[0] === ":";
        const right = match[match.length - 1] === ":";
        columnStyle.push(
          protect(
            ` style="text-align:${
              left && right ? "center" : right ? "right" : "left"
            }"`
          )
        );
      });

      let row = rowArray[startRow + 1].trim();
      const hasLeadingBar = row[0] === "|";
      const hasTrailingBar = row[row.length - 1] === "|";

      let tag = "th";

      for (let r = startRow; r < rowArray.length; ++r) {
        // Remove leading and trailing whitespace and column delimiters
        row = rowArray[r].trim();

        if (!hasLeadingBar && row[0] === "|") {
          // Empty first column
          row = `&nbsp;${row}`;
        }

        if (!hasTrailingBar && row[row.length - 1] === "|") {
          // Empty last column
          row += "&nbsp;";
        }

        row = trimTableRowEnds(row);
        var i = 0;
        result += `${entag(
          "tr",
          `<${tag}${columnStyle[0]}> ${row.rp(/ *\| */g, () => {
            ++i;
            return ` </${tag}><${tag}${columnStyle[i]}> `;
          })} </${tag}>`
        )}\n`;

        // Skip the header-separator row
        if (r == startRow) {
          ++r;
          tag = "td";
        }
      }

      result = entag("table", result, protect('class="table"'));

      if (caption) {
        caption = entag(
          "center",
          entag("div", caption, protect('class="tablecaption"'))
        );
        if (option("captionAbove", "table")) {
          result = caption + result;
        } else {
          result = `\n${result}${caption}`;
        }
      }

      return entag("div", result, "class='table'");
    });

    return s;
  }

  function replaceLists(s, protect) {
    // Identify task list bullets in a few patterns and reformat them to a standard format for
    // easier processing.
    s = s.rp(/^(\s*)(?:-\s*)?(?:\[ \]|\u2610)(\s+)/gm, "$1\u2610$2");
    s = s.rp(/^(\s*)(?:-\s*)?(?:\[x\]|\u2611)(\s+)/gm, "$1\u2611$2");

    // Identify list blocks:
    // Blank line or line ending in colon, line that starts with #., *, +, -, ☑, or ☐
    // and then any number of lines until another blank line
    const BLANK_LINES = /\n\s*\n/.source;

    // Preceding line ending in a colon

    // \u2610 is the ballot box (unchecked box) character
    const PREFIX = /[:,]\s*\n/.source;
    const LIST_BLOCK_REGEXP = new RegExp(
      `(${PREFIX}|${BLANK_LINES}|<p>s*\n|<br/>s*\n?)${
        /((?:[ \t]*(?:\d+\.|-|\+|\*|\u2611|\u2610)(?:[ \t]+.+\n(?:[ \t]*\n)?)+)+)/
          .source
      }`,
      "gm"
    );

    let keepGoing = true;

    const ATTRIBS = {
      "+": protect('class="plus"'),
      "-": protect('class="minus"'),
      "*": protect('class="asterisk"'),
      "\u2611": protect('class="checked"'),
      "\u2610": protect('class="unchecked"'),
    };
    const NUMBER_ATTRIBS = protect('class="number"');

    // Sometimes the list regexp grabs too much because subsequent lines are indented *less*
    // than the first line. So, if that case is found, re-run the regexp.
    while (keepGoing) {
      keepGoing = false;
      s = s.rp(LIST_BLOCK_REGEXP, (match, prefix, block) => {
        let result = prefix;

        // Contains {indentLevel, tag}
        const stack = [];
        let current = { indentLevel: -1 };

        /* function logStack(stack) {
               var s = '[';
               stack.forEach(function(v) { s += v.indentLevel + ', '; });
               console.log(s.ss(0, s.length - 2) + ']');
               } */
        block.split("\n").forEach((line) => {
          const trimmed = line.rp(/^\s*/, "");

          let indentLevel = line.length - trimmed.length;

          // Add a CSS class based on the type of list bullet
          let attribs = ATTRIBS[trimmed[0]];
          const isUnordered = Boolean(attribs); // JavaScript for: attribs !== undefined
          attribs = attribs || NUMBER_ATTRIBS;
          const isOrdered = /^\d+\.[ \t]/.test(trimmed);
          const isBlank = trimmed === "";
          const start = isOrdered
            ? ` ${protect(`start=${trimmed.match(/^\d+/)[0]}`)}`
            : "";

          if (isOrdered || isUnordered) {
            // Add the indentation for the bullet itself
            indentLevel += 2;
          }

          if (!current) {
            // Went below top-level indent
            result += `\n${line}`;
          } else if (
            !isOrdered &&
            !isUnordered &&
            (isBlank || indentLevel >= current.indentLevel)
          ) {
            // Line without a marker
            result += `\n${current.indentChars}${line}`;
          } else {
            //console.log(indentLevel + ":" + line);
            if (indentLevel !== current.indentLevel) {
              // Enter or leave indentation level
              if (
                current.indentLevel !== -1 &&
                indentLevel < current.indentLevel
              ) {
                while (current && indentLevel < current.indentLevel) {
                  stack.pop();
                  // End the current list and decrease indentation
                  result += `\n</li></${current.tag}>`;
                  current = stack[stack.length - 1];
                }
              } else {
                // Start a new list that is more indented
                current = {
                  indentLevel: indentLevel,
                  tag: isOrdered ? "ol" : "ul",
                  // Subtract off the two indent characters we added above
                  indentChars: line.ss(0, indentLevel - 2),
                };
                stack.push(current);
                result += `\n<${current.tag}${start}>`;
              }
            } else if (current.indentLevel !== -1) {
              // End previous list item, if there was one
              result += "\n</li>";
            } // Indent level changed

            if (current) {
              // Add the list item
              result += `\n${current.indentChars}<li ${attribs}>${trimmed.rp(
                /^(\d+\.|-|\+|\*|\u2611|\u2610) /,
                ""
              )}`;
            } else {
              // Just reached something that is *less* indented than the root--
              // copy forward and then re-process that list
              result += `\n${line}`;
              keepGoing = true;
            }
          }
        }); // For each line

        // Remove trailing whitespace
        result = result.replace(/\s+$/, "");

        // Finish the last item and anything else on the stack (if needed)
        for (current = stack.pop(); current; current = stack.pop()) {
          result += `</li></${current.tag}>`;
        }

        return `${result}\n\n`;
      });
    } // while keep going

    return s;
  }

  /** 
    Identifies schedule lists, which look like:

  date: title
    events

  Where date must contain a day, month, and four-number year and may
  also contain a day of the week.  Note that the date must not be
  indented and the events must be indented.

  Multiple events per date are permitted.
*/
  function replaceScheduleLists(str, protect) {
    // Must open with something other than indentation or a list
    // marker.  There must be a four-digit number somewhere on the
    // line. Exclude lines that begin with an HTML tag...this will
    // avoid parsing headers that have dates in them.
    const BEGINNING = /^(?:[^\|<>\s-\+\*\d].*[12]\d{3}(?!\d).*?|(?:[12]\d{3}(?!\.).*\d.*?)|(?:\d{1,3}(?!\.).*[12]\d{3}(?!\d).*?))/
      .source;

    // There must be at least one more number in a date, a colon, and then some more text
    const DATE_AND_TITLE = `(${BEGINNING}):${/[ \t]+([^ \t\n].*)\n/.source}`;

    // The body of the schedule item. It may begin with a blank line and contain
    // multiple paragraphs separated by blank lines...as long as there is indenting
    const EVENTS = /(?:[ \t]*\n)?((?:[ \t]+.+\n(?:[ \t]*\n){0,3})*)/.source;
    const ENTRY = DATE_AND_TITLE + EVENTS;

    const BLANK_LINE = "\n[ \t]*\n";
    const ENTRY_REGEXP = new RegExp(ENTRY, "gm");

    const rowAttribs = protect('valign="top"');
    const dateTDAttribs = protect(
      'style="width:100px;padding-right:15px" rowspan="2"'
    );
    const eventTDAttribs = protect('style="padding-bottom:25px"');

    const DAY_NAME = [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
    ].map(keyword);
    const MONTH_NAME = [
      "jan",
      "feb",
      "mar",
      "apr",
      "may",
      "jun",
      "jul",
      "aug",
      "sep",
      "oct",
      "nov",
      "dec",
    ].map(keyword);
    const MONTH_NAME_LIST = MONTH_NAME.join("|");
    const MONTH_FULL_NAME = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ].map(keyword);

    // Used to mark the center of each day. Not close to midnight to avoid daylight
    // savings problems.
    const standardHour = 9;

    try {
      let scheduleNumber = 0;
      str = str.rp(
        new RegExp(`${BLANK_LINE}(${ENTRY}){2,}`, "gm"),
        (schedule) => {
          ++scheduleNumber;
          // Each entry has the form {date:date, title:string, text:string}
          const entryArray = [];

          // Now parse the schedule into individual day entries

          let anyWeekendEvents = false;

          schedule.rp(ENTRY_REGEXP, (entry, date, title, events) => {
            // Remove the day from the date (we'll reconstruct it below). This is actually unnecessary, since we
            // explicitly compute the value anyway and the parser is robust to extra characters, but it aides
            // in debugging.
            //
            // date = date.rp(/(?:(?:sun|mon|tues|wednes|thurs|fri|satur)day|(?:sun|mon|tue|wed|thu|fri|sat)\.?|(?:su|mo|tu|we|th|fr|sa)),?/gi, '');

            // Parse the date. The Javascript Date class's parser is useless because it
            // is locale dependent, so we do this with a regexp.

            let year = "",
              month = "",
              day = "",
              parenthesized = false;

            date = date.trim();

            if (date[0] === "(" && date.slice(-1) === ")") {
              // This is a parenthesized entry
              date = date.slice(1, -1);
              parenthesized = true;
            }

            // DD MM YYYY
            let match = date.match(
              RegExp(
                `([0123]?\\d)\\D+([01]?\\d|${MONTH_NAME_LIST})\\D+([12]\\d{3})`,
                "i"
              )
            );

            if (match) {
              day = match[1];
              month = match[2];
              year = match[3];
            } else {
              // YYYY MM DD
              match = date.match(
                RegExp(
                  `([12]\\d{3})\\D+([01]?\\d|${MONTH_NAME_LIST})\\D+([0123]?\\d)`,
                  "i"
                )
              );
              if (match) {
                day = match[3];
                month = match[2];
                year = match[1];
              } else {
                // monthname day year
                match = date.match(
                  RegExp(
                    `(${MONTH_NAME_LIST})\\D+([0123]?\\d)\\D+([12]\\d{3})`,
                    "i"
                  )
                );
                if (match) {
                  day = match[2];
                  month = match[1];
                  year = match[3];
                } else {
                  throw "Could not parse date";
                }
              }
            }

            // Reconstruct standardized date format
            date = `${day} ${keyword(month)} ${year}`;

            // Detect the month
            let monthNumber = parseInt(month) - 1;
            if (isNaN(monthNumber)) {
              monthNumber = MONTH_NAME.indexOf(month.toLowerCase());
            }

            const dateVal = new Date(
              Date.UTC(parseInt(year), monthNumber, parseInt(day), standardHour)
            );
            // Reconstruct the day of the week
            const dayOfWeek = dateVal.getUTCDay();
            date = `${DAY_NAME[dayOfWeek]}<br/>${date}`;

            anyWeekendEvents =
              anyWeekendEvents || dayOfWeek === 0 || dayOfWeek === 6;

            entryArray.push({
              date: dateVal,
              title: title,
              sourceOrder: entryArray.length,
              parenthesized: parenthesized,

              // Don't show text if parenthesized with no body
              text: parenthesized
                ? ""
                : entag(
                    "tr",
                    entag(
                      "td",
                      `<a ${protect(
                        `class="target" name="schedule${scheduleNumber}_${dateVal.getUTCFullYear()}-${
                          dateVal.getUTCMonth() + 1
                        }-${dateVal.getUTCDate()}"`
                      )}>&nbsp;</a>${date}`,
                      dateTDAttribs
                    ) + entag("td", entag("b", title)),
                    rowAttribs
                  ) +
                  entag(
                    "tr",
                    entag("td", `\n\n${events}`, eventTDAttribs),
                    rowAttribs
                  ),
            });

            return "";
          });

          // Shallow copy the entries to bypass sorting if needed
          const sourceEntryArray = option("sortScheduleLists")
            ? entryArray
            : entryArray.slice(0);

          // Sort by date
          entryArray.sort((a, b) => {
            // Javascript's sort is not specified to be
            // stable, so we have to preserve
            // sourceOrder in ties.
            const ta = a.date.getTime();
            const tb = b.date.getTime();
            return ta === tb ? a.sourceOrder - b.sourceOrder : ta - tb;
          });

          const MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;

          // May be slightly off due to daylight savings time
          const approximateDaySpan =
            (entryArray[entryArray.length - 1].date.getTime() -
              entryArray[0].date.getTime()) /
            MILLISECONDS_PER_DAY;

          let today = new Date();
          // Move back to midnight
          today = new Date(
            Date.UTC(
              today.getUTCFullYear(),
              today.getUTCMonth(),
              today.getUTCDate(),
              standardHour
            )
          );

          let calendar = "";
          // Make a calendar view with links, if suitable
          if (
            approximateDaySpan > 14 &&
            approximateDaySpan / entryArray.length < 16
          ) {
            const DAY_HEADER_ATTRIBS = protect(
              'colspan="2" width="14%" style="padding-top:5px;text-align:center;font-style:italic"'
            );
            const DATE_ATTRIBS = protect(
              'width="1%" height="30px" style="text-align:right;border:1px solid #EEE;border-right:none;"'
            );
            const FADED_ATTRIBS = protect(
              'width="1%" height="30px" style="color:#BBB;text-align:right;"'
            );
            const ENTRY_ATTRIBS = protect(
              'width="14%" style="border:1px solid #EEE;border-left:none;"'
            );
            const PARENTHESIZED_ATTRIBS = protect('class="parenthesized"');

            // Find the first day of the first month
            let date = entryArray[0].date;
            let index = 0;

            const hideWeekends =
              !anyWeekendEvents && option("hideEmptyWeekends");
            const showDate = hideWeekends
              ? function (date) {
                  return date.getUTCDay() > 0 && date.getUTCDay() < 6;
                }
              : function () {
                  return true;
                };

            const sameDay = function (d1, d2) {
              // Account for daylight savings time
              return (
                abs(d1.getTime() - d2.getTime()) < MILLISECONDS_PER_DAY / 2
              );
            };

            // Go to the first of the month
            date = new Date(
              date.getUTCFullYear(),
              date.getUTCMonth(),
              1,
              standardHour
            );

            while (
              date.getTime() < entryArray[entryArray.length - 1].date.getTime()
            ) {
              // Create the calendar header
              calendar += `<table ${protect('class="calendar"')}>\n${entag(
                "tr",
                entag(
                  "th",
                  `${
                    MONTH_FULL_NAME[date.getUTCMonth()]
                  } ${date.getUTCFullYear()}`,
                  protect('colspan="14"')
                )
              )}<tr>`;

              (hideWeekends ? DAY_NAME.slice(1, 6) : DAY_NAME).forEach(
                (name) => {
                  calendar += entag("td", name, DAY_HEADER_ATTRIBS);
                }
              );
              calendar += "</tr>";

              // Go back into the previous month to reach a Sunday. Check the time at noon
              // to avoid problems with daylight saving time occuring early in the morning
              while (date.getUTCDay() !== 0) {
                date = new Date(date.getTime() - MILLISECONDS_PER_DAY);
              }

              // Insert the days from the previous month
              if (date.getDate() !== 1) {
                calendar += `<tr ${rowAttribs}>`;
                while (date.getDate() !== 1) {
                  if (showDate(date)) {
                    calendar += `<td ${FADED_ATTRIBS}>${date.getUTCDate()}</td><td>&nbsp;</td>`;
                  }
                  date = new Date(date.getTime() + MILLISECONDS_PER_DAY);
                }
              }

              // Run until the end of the month
              do {
                if (date.getUTCDay() === 0) {
                  // Sunday, start a row
                  calendar += `<tr ${rowAttribs}>`;
                }

                if (showDate(date)) {
                  let attribs = "";
                  if (sameDay(date, today)) {
                    attribs = protect('class="today"');
                  }

                  // Insert links as needed from entries
                  let contents = "";

                  for (
                    let entry = entryArray[index];
                    entry && sameDay(entry.date, date);
                    ++index, entry = entryArray[index]
                  ) {
                    if (contents) {
                      contents += "<br/>";
                    }
                    if (entry.parenthesized) {
                      // Parenthesized with no body, no need for a link
                      contents += entag(
                        "span",
                        entry.title,
                        PARENTHESIZED_ATTRIBS
                      );
                    } else {
                      contents += entag(
                        "a",
                        entry.title,
                        protect(
                          `href="#schedule${scheduleNumber}_${date.getUTCFullYear()}-${
                            date.getUTCMonth() + 1
                          }-${date.getUTCDate()}"`
                        )
                      );
                    }
                  }

                  if (contents) {
                    calendar +=
                      entag(
                        "td",
                        entag("b", date.getUTCDate()),
                        DATE_ATTRIBS + attribs
                      ) + entag("td", contents, ENTRY_ATTRIBS + attribs);
                  } else {
                    calendar += `<td ${DATE_ATTRIBS}${attribs}></a>${date.getUTCDate()}</td><td ${ENTRY_ATTRIBS}${attribs}> &nbsp; </td>`;
                  }
                }

                if (date.getUTCDay() === 6) {
                  // Saturday, end a row
                  calendar += "</tr>";
                }

                // Go to (approximately) the next day
                date = new Date(date.getTime() + MILLISECONDS_PER_DAY);
              } while (date.getUTCDate() > 1);

              // Finish out the week after the end of the month
              if (date.getUTCDay() !== 0) {
                while (date.getUTCDay() !== 0) {
                  if (showDate(date)) {
                    calendar += `<td ${FADED_ATTRIBS}>${date.getUTCDate()}</td><td>&nbsp</td>`;
                  }
                  date = new Date(date.getTime() + MILLISECONDS_PER_DAY);
                }

                calendar += "</tr>";
              }

              calendar += "</table><br/>\n";

              // Go to the first of the (new) month
              date = new Date(
                Date.UTC(
                  date.getUTCFullYear(),
                  date.getUTCMonth(),
                  1,
                  standardHour
                )
              );
            } // Until all days covered
          } // if add calendar

          // Construct the schedule
          schedule = "";
          sourceEntryArray.forEach((entry) => {
            schedule += entry.text;
          });

          return `\n\n${calendar}${entag(
            "table",
            schedule,
            protect('class="schedule"')
          )}\n\n`;
        }
      );
    } catch (ignore) {
      // Maybe this wasn't a schedule after all, since we couldn't parse a date. Don't alarm
      // the user, though
    }

    return str;
  }

  /**
 Term
 :     description, which might be multiple 
       lines and include blanks.

 Next Term

becomes

<dl>
  <dt>Term</dt>
  <dd> description, which might be multiple 
       lines and include blanks.</dd>
  <dt>Next Term</dt>
</dl>

... unless it is very short, in which case it becomes a table.

*/
  function replaceDefinitionLists(s, protect) {
    const TERM = /^.+\n:(?=[ \t])/.source;

    // Definition can contain multiple paragraphs
    const DEFINITION = "(s*\n|[: \t].+\n)+";

    s = s.rp(new RegExp(`(${TERM}${DEFINITION})+`, "gm"), (block) => {
      const list = [];

      // Parse the block
      let currentEntry = null;

      block.split("\n").forEach((line, i) => {
        // What kind of line is this?
        if (line.trim().length === 0) {
          if (currentEntry) {
            // Empty line
            currentEntry.definition += "\n";
          }
        } else if (!/\s/.test(line[0]) && line[0] !== ":") {
          currentEntry = { term: line, definition: "" };
          list.push(currentEntry);
        } else {
          // Add the line to the current definition, stripping any single leading ':'
          if (line[0] === ":") {
            line = ` ${line.ss(1)}`;
          }
          currentEntry.definition += `${line}\n`;
        }
      });

      let longestDefinition = 0;
      list.forEach((entry) => {
        if (/\n\s*\n/.test(entry.definition.trim())) {
          // This definition contains multiple paragraphs. Force it into long mode
          longestDefinition = Infinity;
        } else {
          // Normal case
          longestDefinition = max(
            longestDefinition,
            unescapeHTMLEntities(removeHTMLTags(entry.definition)).length
          );
        }
      });

      let result = "";
      const definitionStyle = option("definitionStyle");
      if (
        definitionStyle === "short" ||
        (definitionStyle !== "long" && longestDefinition < 160)
      ) {
        const rowAttribs = protect("valign=top");
        // This list has short definitions. Format it as a table
        list.forEach((entry) => {
          result += entag(
            "tr",
            entag("td", entag("dt", entry.term)) +
              entag("td", entag("dd", entag("p", entry.definition))),
            rowAttribs
          );
        });
        result = entag("table", result);
      } else {
        list.forEach((entry) => {
          // Leave *two* blanks at the start of a
          // definition so that subsequent processing
          // can detect block formatting within it.
          result +=
            entag("dt", entry.term) + entag("dd", entag("p", entry.definition));
        });
      }

      return entag("dl", result);
    });

    return s;
  }

  /** Inserts a table of contents in the document and then returns
    [string, table], where the table maps strings to levels. */
  function insertTableOfContents(s, protect, exposer) {
    // Gather headers for table of contents (TOC). We
    // accumulate a long and short TOC and then choose which
    // to insert at the end.
    let fullTOC = '<a href="#" class="tocTop">(Top)</a><br/>\n';
    let shortTOC = "";

    // names of parent sections
    const nameStack = [];

    // headerCounter[i] is the current counter for header level (i - 1)
    const headerCounter = [0];
    let currentLevel = 0;
    let numAboveLevel1 = 0;

    const table = {};
    s = s.rp(/<h([1-6])>(.*?)<\/h\1>/gi, (header, level, text) => {
      level = parseInt(level);
      text = text.trim();

      // If becoming more nested:
      for (let i = currentLevel; i < level; ++i) {
        nameStack[i] = "";
        headerCounter[i] = 0;
      }

      // If becoming less nested:
      headerCounter.splice(level, currentLevel - level);
      nameStack.splice(level, currentLevel - level);
      currentLevel = level;

      ++headerCounter[currentLevel - 1];

      // Generate a unique name for this element
      const number = headerCounter.join(".");

      // legacy, for when toc links were based on
      // numbers instead of mangled names
      const oldname = `toc${number}`;

      const cleanText = removeHTMLTags(exposer(text)).trim().toLowerCase();

      table[cleanText] = number;

      // Remove links from the title itself
      text = text.rp(/<a\s.*>(.*?)<\/a>/g, "$1");

      nameStack[currentLevel - 1] = mangle(cleanText);

      const name = nameStack.join("/");

      // Only insert for the first three levels
      if (level <= 3) {
        // Indent and append (the Array() call generates spaces)
        fullTOC += `${Array(level).join(
          "&nbsp;&nbsp;"
        )}<a href="#${name}" class="level${level}"><span class="tocNumber">${number}&nbsp; </span>${text}</a><br/>\n`;

        if (level === 1) {
          shortTOC += ` &middot; <a href="#${name}">${text}</a>`;
        } else {
          ++numAboveLevel1;
        }
      }

      return (
        entag("a", "&nbsp;", protect(`class="target" name="${name}"`)) +
        entag("a", "&nbsp;", protect(`class="target" name="${oldname}"`)) +
        header
      );
    });

    if (shortTOC.length > 0) {
      // Strip the leading " &middot; "
      shortTOC = shortTOC.ss(10);
    }

    const numLevel1 = headerCounter[0];
    const numHeaders = numLevel1 + numAboveLevel1;

    // The location of the first header is indicative of the length of
    // the abstract...as well as where we insert. The first header may be accompanied by
    // <a name> tags, which we want to appear before.
    let firstHeaderLocation = s.regexIndexOf(
      /((<a\s+\S+>&nbsp;<\/a>)\s*)*?<h\d>/i
    );
    if (firstHeaderLocation === -1) {
      firstHeaderLocation = 0;
    }

    const AFTER_TITLES = '<div class="afterTitles"></div>';
    let insertLocation = s.indexOf(AFTER_TITLES);
    if (insertLocation === -1) {
      insertLocation = 0;
    } else {
      insertLocation += AFTER_TITLES.length;
    }

    // Which TOC style should we use?
    let tocStyle = option("tocStyle");

    let TOC = "";
    if (tocStyle === "auto" || tocStyle === "") {
      if ((numHeaders < 4 && numLevel1 <= 1) || s.length < 2048) {
        // No TOC; this document is really short
        tocStyle = "none";
      } else if (numLevel1 < 7 && numHeaders / numLevel1 < 2.5) {
        // We can use the short TOC
        tocStyle = "short";
      } else if (
        firstHeaderLocation === -1 ||
        firstHeaderLocation / 55 > numHeaders
      ) {
        // The abstract is long enough to float alongside, and there
        // are not too many levels.
        // Insert the medium-length TOC floating
        tocStyle = "medium";
      } else {
        // This is a long table of contents or a short abstract
        // Insert a long toc...right before the first header
        tocStyle = "long";
      }
    }

    switch (tocStyle) {
      case "none":
      case "":
        break;

      case "short":
        TOC = `<div class="shortTOC">${shortTOC}</div>`;
        break;

      case "medium":
        TOC = `<div class="mediumTOC"><center><b>${keyword(
          "Contents"
        )}</b></center><p>${fullTOC}</p></div>`;
        break;

      case "long":
        insertLocation = firstHeaderLocation;
        TOC = `<div class="longTOC"><div class="tocHeader">${keyword(
          "Contents"
        )}</div><p>${fullTOC}</p></div>`;
        break;

      default:
        console.log(
          `markdeepOptions.tocStyle = "${tocStyle}" specified in your document is not a legal value`
        );
    }

    s = s.ss(0, insertLocation) + TOC + s.ss(insertLocation);

    return [s, table];
  }

  function escapeRegExpCharacters(str) {
    return str.rp(/([\.\[\]\(\)\*\+\?\^\$\\\{\}\|])/g, "\\$1");
  }

  /** Returns true if there are at least two newlines in each of the arguments */
  function isolated(preSpaces, postSpaces) {
    if (preSpaces && postSpaces) {
      preSpaces = preSpaces.match(/\n/g);
      postSpaces = postSpaces.match(/\n/g);
      return (
        preSpaces && preSpaces.length > 1 && postSpaces && postSpaces.length > 1
      );
    } else {
      return false;
    }
  }

  /**
    Performs Markdeep processing on str, which must be a string or a
    DOM element.  Returns a string that is the HTML to display for the
    body. The result does not include the header: Markdeep stylesheet
    and script tags for including a math library, or the Markdeep
    signature footer.

    Optional argument elementMode defaults to true. This avoids turning a bold first word into a 
    title or introducing a table of contents. Section captions are unaffected by this argument.
    Set elementMode = false if processing a whole document instead of an internal node.

 */
  function markdeepToHTML(str, elementMode) {
    // Map names to the number used for end notes, in the order
    // encountered in the text.
    let endNoteTable = {},
      endNoteCount = 0;

    // Reference links
    const referenceLinkTable = {};

    // In the private use area
    const PROTECT_CHARACTER = "\ue010";

    // Use base 32 for encoding numbers, which is efficient in terms of
    // characters but avoids 'x' to avoid the pattern \dx\d, which Markdeep would
    // beautify as a dimension
    const PROTECT_RADIX = 32;
    const protectedStringArray = [];

    // Gives 1e6 possible sequences in base 32, which should be sufficient
    const PROTECT_DIGITS = 4;

    // Put the protect character at BOTH ends to avoid having the protected number encoding
    // look like an actual number to further markdown processing
    const PROTECT_REGEXP = RegExp(
      `${PROTECT_CHARACTER}[0-9a-w]{${PROTECT_DIGITS},${PROTECT_DIGITS}}${PROTECT_CHARACTER}`,
      "g"
    );

    /** Given an arbitrary string, returns an escaped identifier
        string to temporarily replace it with to prevent Markdeep from
        processing the contents. See expose() */
    function protect(s) {
      // Generate the replacement index, converted to an alphanumeric string
      let i = (protectedStringArray.push(s) - 1).toString(PROTECT_RADIX);

      // Ensure fixed length
      while (i.length < PROTECT_DIGITS) {
        i = `0${i}`;
      }

      return PROTECT_CHARACTER + i + PROTECT_CHARACTER;
    }

    let exposeRan = false;
    /** Given the escaped identifier string from protect(), returns
        the orginal string. */
    function expose(i) {
      // Strip the escape character and parse, then look up in the
      // dictionary.
      const j = parseInt(i.ss(1, i.length - 1), PROTECT_RADIX);
      exposeRan = true;
      return protectedStringArray[j];
    }

    /** First-class function to pass to String.replace to protect a
        sequence defined by a regular expression. */
    function protector(match, protectee) {
      return protect(protectee);
    }

    function protectorWithPrefix(match, prefix, protectee) {
      return prefix + protect(protectee);
    }

    // SECTION HEADERS
    // This is common code for numbered headers. No-number ATX headers are processed
    // separately
    function makeHeaderFunc(level) {
      return function (match, header) {
        return `\n\n</p>\n<a ${protect(
          `class="target" name="${mangle(
            removeHTMLTags(header.rp(PROTECT_REGEXP, expose))
          )}"`
        )}>&nbsp;</a>${entag(`h${level}`, header)}\n<p>\n\n`;
      };
    }

    if (elementMode === undefined) {
      elementMode = true;
    }

    if (str.innerHTML !== undefined) {
      str = str.innerHTML;
    }

    // Prefix a newline so that blocks beginning at the top of the
    // document are processed correctly
    str = `\n\n${str}`;

    // Replace pre-formatted script tags that are used to protect
    // less-than signs, e.g., in std::vector<Value>
    str = str.rp(
      /<script\s+type\s*=\s*['"]preformatted['"]\s*>([\s\S]*?)<\/script>/gi,
      "$1"
    );

    function replaceDiagrams(str) {
      const result = extractDiagram(str);
      if (result.diagramString) {
        const CAPTION_REGEXP = /^\n*[ \t]*\[[^\n]+\][ \t]*(?=\n)/;
        result.afterString = result.afterString.rp(
          CAPTION_REGEXP,
          (caption) => {
            // Strip whitespace and enclosing brackets from the caption
            caption = caption.trim();
            caption = caption.ss(1, caption.length - 1);

            result.caption = entag(
              "center",
              entag("div", caption, protect('class="imagecaption"'))
            );
            return "";
          }
        );

        const diagramSVG = diagramToSVG(
          result.diagramString,
          result.alignmentHint
        );
        const captionAbove = option("captionAbove", "diagram");

        return `${
          result.beforeString +
          (result.caption && captionAbove ? result.caption : "") +
          diagramSVG +
          (result.caption && !captionAbove ? result.caption : "")
        }\n${replaceDiagrams(result.afterString)}`;
      } else {
        return str;
      }
    }

    // CODE FENCES, with styles. Do this before other processing so that their code is
    // protected from further Markdown processing
    const stylizeFence = function (cssClass, symbol) {
      const pattern = new RegExp(
        `\n([ \\t]*)${symbol}{3,}([ \\t]*\\S*)([ \\t]+.+)?\n([\\s\\S]+?)\n\\1${symbol}{3,}[ \t]*\n([ \\t]*\\[.+(?:\n.+){0,3}\\])?`,
        "g"
      );

      str = str.rp(
        pattern,
        (match, indent, lang, cssSubClass, sourceCode, caption) => {
          if (caption) {
            caption = caption.trim();
            caption = `${entag(
              "center",
              `<div ${protect(
                `class="listingcaption ${cssClass}"`
              )}>${caption.ss(1, caption.length - 1)}</div>`
            )}\n`;
          }
          // Remove the block's own indentation from each line of sourceCode
          sourceCode = sourceCode.rp(new RegExp(`(^|\n)${indent}`, "g"), "$1");

          const captionAbove = option("captionAbove", "listing");
          let nextSourceCode, nextLang, nextCssSubClass;
          const body = [];

          // Process multiple-listing blocks
          do {
            nextSourceCode = nextLang = nextCssSubClass = undefined;
            sourceCode = sourceCode.rp(
              new RegExp(
                `\\n([ \\t]*)${symbol}{3,}([ \\t]*\\S+)([ \\t]+.+)?\n([\\s\\S]*)`
              ),
              (match, indent, lang, cssSubClass, everythingElse) => {
                nextLang = lang;
                nextCssSubClass = cssSubClass;
                nextSourceCode = everythingElse;
                return "";
              }
            );

            // Highlight and append this block
            lang = lang ? lang.trim() : undefined;
            var result;
            if (lang === "none") {
              result = hljs.highlightAuto(sourceCode, []);
            } else if (lang === undefined) {
              result = hljs.highlightAuto(sourceCode);
            } else {
              try {
                result = hljs.highlight(lang, sourceCode, true);
              } catch (e) {
                // Some unknown language specified. Force to no formatting.
                result = hljs.highlightAuto(sourceCode, []);
              }
            }

            let highlighted = result.value;

            // Mark each line as a span to support line numbers
            highlighted = highlighted.rp(
              /^(.*)$/gm,
              entag("span", "$1", 'class="line"')
            );

            if (cssSubClass) {
              highlighted = entag("div", highlighted, `class="${cssSubClass}"`);
            }

            body.push(highlighted);

            // Advance the next nested block
            sourceCode = nextSourceCode;
            lang = nextLang;
            cssSubClass = nextCssSubClass;
          } while (sourceCode);

          // Insert paragraph close/open tags, since browsers force them anyway around pre tags
          // We need the indent in case this is a code block inside a list that is indented.
          return `\n${indent}</p>${
            caption && captionAbove ? caption : ""
          }${protect(
            entag(
              "pre",
              entag("code", body.join("")),
              `class="listing ${cssClass}"`
            )
          )}${caption && !captionAbove ? caption : ""}<p>\n`;
        }
      );
    };

    stylizeFence("tilde", "~");
    stylizeFence("backtick", "`");

    // Highlight explicit inline code
    str = str.rp(
      /<code\s+lang\s*=\s*["']?([^"'\)\[\]\n]+)["'?]\s*>(.*)<\/code>/gi,
      (match, lang, body) => {
        return entag(
          "code",
          hljs.highlight(lang, body, true).value,
          `lang=${lang}`
        );
      }
    );

    // Protect raw <CODE> content
    str = str.rp(/(<code\b.*?<\/code>)/gi, protector);

    // Remove XML/HTML COMMENTS
    str = str.rp(/<!--[^-][\s\S]*?-->/g, "");

    str = replaceDiagrams(str);

    // Protect SVG blocks (including the ones we just inserted)
    str = str.rp(/<svg( .*?)?>([\s\S]*?)<\/svg>/gi, (match, attribs, body) => {
      return `<svg${protect(attribs)}>${protect(body)}</svg>`;
    });

    // Protect STYLE blocks
    str = str.rp(/<style>([\s\S]*?)<\/style>/gi, (match, body) => {
      return entag("style", protect(body));
    });

    // Protect the very special case of img tags with newlines and
    // breaks in them AND mismatched angle brackets. This happens for
    // Gravizo graphs.
    str = str.rp(/<img\s+src=(["'])[\s\S]*?\1\s*>/gi, (match, quote) => {
      // Strip the "<img " and ">", and then protect the interior:
      return `<img ${protect(match.ss(5, match.length - 1))}>`;
    });

    // INLINE CODE: Surrounded in (non-escaped!) back ticks on a single line.  Do this before any other
    // processing except for diagrams to protect code blocks from further interference. Don't process back ticks
    // inside of code fences. Allow a single newline, but not wrapping further because that
    // might just pick up quotes used as other punctuation across lines. Explicitly exclude
    // cases where the second quote immediately preceeds a number, e.g., "the old `97"
    const inlineLang = option("inlineCodeLang");
    const inlineCodeRegexp = /(^|[^\\])`(.*?(?:\n.*?)?[^\n\\`])`(?!\d)/g;
    if (inlineLang) {
      // Syntax highlight as well as converting to code. Protect
      // so that the hljs output isn't itself escaped below.
      const filenameRegexp = /^[a-zA-Z]:\\|^\/[a-zA-Z_\.]|^[a-z]{3,5}:\/\//;
      str = str.rp(inlineCodeRegexp, (match, before, body) => {
        console.log(`'${body}'`);
        if (filenameRegexp.test(body)) {
          // This looks like a filename, don't highlight it
          return before + entag("code", body);
        } else {
          return (
            before +
            protect(entag("code", hljs.highlight(inlineLang, body, true).value))
          );
        }
      });
    } else {
      str = str.rp(inlineCodeRegexp, `$1${entag("code", "$2")}`);
    }

    // Unescape escaped backticks
    str = str.rp(/\\`/g, "`");

    // CODE: Escape angle brackets inside code blocks (including the ones we just introduced),
    // and then protect the blocks themselves
    str = str.rp(
      /(<code(?: .*?)?>)([\s\S]*?)<\/code>/gi,
      (match, open, inlineCode) => {
        return protect(`${open + escapeHTMLEntities(inlineCode)}</code>`);
      }
    );

    // PRE: Protect pre blocks
    str = str.rp(/(<pre\b[\s\S]*?<\/pre>)/gi, protector);

    // Protect raw HTML attributes from processing
    str = str.rp(/(<\w[^ \n<>]*?[ \t]+)(.*?)(?=\/?>)/g, protectorWithPrefix);

    // End of processing literal blocks
    /////////////////////////////////////////////////////////////////////////////

    // Temporarily hide $$ MathJax LaTeX blocks from Markdown processing (this must
    // come before single $ block detection below)
    str = str.rp(/(\$\$[\s\S]+?\$\$)/g, protector);

    // Convert LaTeX $ ... $ to MathJax, but verify that this
    // actually looks like math and not just dollar
    // signs. Don't rp double-dollar signs. Do this only
    // outside of protected blocks.

    // Also allow LaTeX of the form $...$ if the close tag is not US$ or Can$
    // and there are spaces outside of the dollar signs.
    //
    // Test: " $3 or US$2 and 3$, $x$ $y + \n 2x$ or ($z$) $k$. or $2 or $2".match(pattern) =
    // ["$x$", "$y +  2x$", "$z$", "$k$"];
    str = str.rp(
      /((?:[^\w\d]))\$(\S(?:[^\$]*?\S(?!US|Can))??)\$(?![\w\d])/g,
      "$1\\($2\\)"
    );

    //
    // Literally: find a non-dollar sign, non-number followed
    // by a dollar sign and a space.  Then, find any number of
    // characters until the same pattern reversed, allowing
    // one punctuation character before the final space. We're
    // trying to exclude things like Canadian 1$ and US $1
    // triggering math mode.

    str = str.rp(
      /((?:[^\w\d]))\$([ \t][^\$]+?[ \t])\$(?![\w\d])/g,
      "$1\\($2\\)"
    );

    // Temporarily hide MathJax LaTeX blocks from Markdown processing
    str = str.rp(/(\\\([\s\S]+?\\\))/g, protector);
    str = str.rp(/(\\begin\{equation\}[\s\S]*?\\end\{equation\})/g, protector);
    str = str.rp(/(\\begin\{eqnarray\}[\s\S]*?\\end\{eqnarray\})/g, protector);
    str = str.rp(
      /(\\begin\{equation\*\}[\s\S]*?\\end\{equation\*\})/g,
      protector
    );

    // HEADERS
    //
    // We consume leading and trailing whitespace to avoid creating an extra paragraph tag
    // around the header itself.

    // Setext-style H1: Text with ======== right under it
    str = str.rp(/(?:^|\s*\n)(.+?)\n[ \t]*={3,}[ \t]*\n/g, makeHeaderFunc(1));

    // Setext-style H2: Text with -------- right under it
    str = str.rp(/(?:^|\s*\n)(.+?)\n[ \t]*-{3,}[ \t]*\n/g, makeHeaderFunc(2));

    // ATX-style headers:
    //
    //  # Foo #
    //  # Foo
    //  (# Bar)
    //
    // If note that '#' in the title are only stripped if they appear at the end, in
    // order to allow headers with # in the title.

    for (let i = 6; i > 0; --i) {
      str = str.rp(
        new RegExp(
          `${/^\s*/.source}#{${i},${i}}(?:[ \t])([^\n]+?)#*[ \t]*\n`,
          "gm"
        ),
        makeHeaderFunc(i)
      );

      // No-number headers
      str = str.rp(
        new RegExp(
          `${
            /^\s*/.source
          }\\(#{${i},${i}}\\)(?:[ \t])([^\n]+?)\\(?#*\\)?\\n[ \t]*\n`,
          "gm"
        ),
        `\n</p>\n${entag(
          "div",
          "$1",
          protect(`class="nonumberh${i}"`)
        )}\n<p>\n\n`
      );
    }

    // HORIZONTAL RULE: * * *, - - -, _ _ _
    str = str.rp(/\n[ \t]*((\*|-|_)[ \t]*){3,}[ \t]*\n/g, "\n<hr/>\n");

    // PAGE BREAK or HORIZONTAL RULE: +++++
    str = str.rp(
      /\n[ \t]*\+{5,}[ \t]*\n/g,
      `\n<hr ${protect('class="pagebreak"')}/>\n`
    );

    // ADMONITION: !!! (class) (title)\n body
    str = str.rp(
      /^!!![ \t]*([^\s"'><&\:]*)\:?(.*)\n([ \t]{3,}.*\s*\n)*/gm,
      (match, cssClass, title) => {
        // Have to extract the body by splitting match because the regex doesn't capture the body correctly in the multi-line case
        match = match.trim();
        return `\n\n${entag(
          "div",
          (
            (title
              ? `${entag("div", title, protect('class="admonition-title"'))}\n`
              : "") + match.ss(match.indexOf("\n"))
          ).trim(),
          protect(`class="admonition ${cssClass.toLowerCase().trim()}"`)
        )}\n\n`;
      }
    );

    // FANCY QUOTE in a blockquote:
    // > " .... "
    // >    -- Foo

    const FANCY_QUOTE = protect('class="fancyquote"');
    str = str.rp(
      /\n>[ \t]*"(.*(?:\n>.*)*)"[ \t]*(?:\n>[ \t]*)?(\n>[ \t]{2,}\S.*)?\n/g,
      (match, quote, author) => {
        return entag(
          "blockquote",
          entag("span", quote.rp(/\n>/g, "\n"), FANCY_QUOTE) +
            (author
              ? entag(
                  "span",
                  author.rp(/\n>/g, "\n"),
                  protect('class="author"')
                )
              : ""),
          FANCY_QUOTE
        );
      }
    );

    // BLOCKQUOTE: > in front of a series of lines
    // Process iteratively to support nested blockquotes
    let foundBlockquote = false;
    do {
      foundBlockquote = false;
      str = str.rp(/(?:\n>.*){2,}/g, (match) => {
        // Strip the leading '>'
        foundBlockquote = true;
        return entag("blockquote", match.rp(/\n>/g, "\n"));
      });
    } while (foundBlockquote);

    // FOOTNOTES/ENDNOTES: [^symbolic name]. Disallow spaces in footnote names to
    // make parsing unambiguous. Consume leading space before the footnote.
    function endNote(match, symbolicNameA) {
      const symbolicName = symbolicNameA.toLowerCase().trim();

      if (!(symbolicName in endNoteTable)) {
        ++endNoteCount;
        endNoteTable[symbolicName] = endNoteCount;
      }

      return `<sup><a ${protect(`href="#endnote-${symbolicName}"`)}>${
        endNoteTable[symbolicName]
      }</a></sup>`;
    }
    str = str.rp(/[ \t]*\[\^([^\]\n\t ]+)\](?!:)/g, endNote);
    str = str.rp(
      /(\S)[ \t]*\[\^([^\]\n\t ]+)\]/g,
      (match, pre, symbolicNameA) => {
        return pre + endNote(match, symbolicNameA);
      }
    );

    // CITATIONS: [#symbolicname]
    // The bibliography entry:
    str = str.rp(
      /\n\[#(\S+)\]:[ \t]+((?:[ \t]*\S[^\n]*\n?)*)/g,
      (match, symbolicName, entry) => {
        symbolicName = symbolicName.trim();
        return `<div ${protect('class="bib"')}>[<a ${protect(
          `class="target" name="citation-${symbolicName.toLowerCase()}"`
        )}>&nbsp;</a><b>${symbolicName}</b>] ${entry}</div>`;
      }
    );

    // A reference:
    // (must process AFTER the definitions, since the syntax is a subset)
    str = str.rp(
      /\[(#[^\)\(\[\]\.#\s]+(?:\s*,\s*#(?:[^\)\(\[\]\.#\s]+))*)\]/g,
      (match, symbolicNameList) => {
        // Parse the symbolicNameList
        symbolicNameList = symbolicNameList.split(",");
        let s = "[";
        for (let i = 0; i < symbolicNameList.length; ++i) {
          // Strip spaces and # signs
          const name = symbolicNameList[i].rp(/#| /g, "");
          s += entag(
            "a",
            name,
            protect(`href="#citation-${name.toLowerCase()}"`)
          );
          if (i < symbolicNameList.length - 1) {
            s += ", ";
          }
        }
        return `${s}]`;
      }
    );

    // TABLES: line with | over line containing only | and -
    // (process before reference links to avoid ambiguity on the captions)
    str = replaceTables(str, protect);

    // REFERENCE-LINK TABLE: [foo]: http://foo.com
    // (must come before reference images and reference links in processing)
    str = str.rp(/^\[([^\^#].*?)\]:(.*?)$/gm, (match, symbolicName, url) => {
      referenceLinkTable[symbolicName.toLowerCase().trim()] = {
        link: url.trim(),
        used: false,
      };
      return "";
    });

    // E-MAIL ADDRESS: <foo@bar.baz> or foo@bar.baz
    str = str.rp(
      /(?:<|(?!<)\b)(\S+@(\S+\.)+?\S{2,}?)(?:$|>|(?=<)|(?=\s)(?!>))/g,
      (match, addr) => {
        return `<a ${protect(`href="mailto:${addr}"`)}>${addr}</a>`;
      }
    );

    // Common code for formatting images
    const formatImage = function (ignore, url, attribs) {
      attribs = attribs || "";
      let img;
      let hash;

      // Detect videos
      if (/\.(mp4|m4v|avi|mpg|mov|webm)$/i.test(url)) {
        // This is video. Any attributes provided will override the defaults given here
        img = `<video ${protect(
          `class="markdeep" src="${url}"${attribs} width="480px" controls="true"`
        )}/>`;
      } else if (/\.(mp3|mp2|ogg|wav|m4a|aac|flac)$/i.test(url)) {
        // Audio
        img = `<audio ${protect(
          `class="markdeep" controls ${attribs}><source src="${url}"`
        )}></audio>`;
      } else if (
        (hash = url.match(
          /^https:\/\/(?:www\.)?(?:youtube\.com\/\S*?v=|youtu\.be\/)([\w\d-]+)(&.*)?$/i
        ))
      ) {
        // YouTube video
        img = `<iframe ${protect(
          `class="markdeep" src="https://www.youtube.com/embed/${hash[1]}"${attribs} width="480px" height="300px" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen`
        )}></iframe>`;
      } else if (
        (hash = url.match(/^https:\/\/(?:www\.)?vimeo.com\/\S*?\/([\w\d-]+)$/i))
      ) {
        // Vimeo video
        img = `<iframe ${protect(
          `class="markdeep" src="https://player.vimeo.com/video/${hash[1]}"${attribs} width="480px" height="300px" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen`
        )}></iframe>`;
      } else {
        // Image (trailing space is needed in case attribs must be quoted by the
        // browser...without the space, the browser will put the closing slash in the
        // quotes.)

        let classList = "markdeep";
        // Remove classes from attribs
        attribs = attribs.rp(
          /class *= *(["'])([^'"]+)\1/,
          (match, quote, cls) => {
            classList += ` ${cls}`;
            return "";
          }
        );
        attribs = attribs.rp(/class *= *([^"' ]+)/, (match, cls) => {
          classList += ` ${cls}`;
          return "";
        });

        img = `<img ${protect(
          `class="${classList}" src="${url}"${attribs}`
        )} />`;
        img = entag("a", img, protect(`href="${url}" target="_blank"`));
      }

      return img;
    };

    // Reformat equation links that have brackets: eqn [foo] --> eqn \ref{foo} so that
    // mathjax can process them.
    str = str.rp(
      /\b(equation|eqn\.|eq\.)\s*\[([^\s\]]+)\]/gi,
      (match, eq, label) => {
        return `${eq} \\ref{${label}}`;
      }
    );

    // Reformat figure links that have subfigure labels in parentheses, to avoid them being
    // processed as links
    str = str.rp(
      /\b(figure|fig\.|table|tbl\.|listing|lst\.)\s*\[([^\s\]]+)\](?=\()/gi,
      (match) => {
        return `${match}<span/>`;
      }
    );

    // Process links before images so that captions can contain links

    // Detect gravizo URLs inside of markdown images and protect them,
    // which will cause them to be parsed sort-of reasonably. This is
    // a really special case needed to handle the newlines and potential
    // nested parentheses. Use the pattern from http://blog.stevenlevithan.com/archives/regex-recursion
    // (could be extended to multiple nested parens if needed)
    str = str.rp(
      /\(http:\/\/g.gravizo.com\/(.*g)\?((?:[^\(\)]|\([^\(\)]*\))*)\)/gi,
      (match, protocol, url) => {
        return `(http://g.gravizo.com/${protocol}?${encodeURIComponent(url)})`;
      }
    );

    // HYPERLINKS: [text](url attribs)
    str = str.rp(
      /(^|[^!])\[([^\[\]]+?)\]\(("?)([^<>\s"]+?)\3(\s+[^\)]*?)?\)/g,
      (match, pre, text, maybeQuote, url, attribs) => {
        attribs = attribs || "";
        return `${pre}<a ${protect(
          `href="${url}"${attribs}`
        )}>${text}</a>${maybeShowLabel(url)}`;
      }
    );

    // EMPTY HYPERLINKS: [](url)
    str = str.rp(
      /(^|[^!])\[[ \t]*?\]\(("?)([^<>\s"]+?)\2\)/g,
      (match, pre, maybeQuote, url) => {
        return `${pre}<a ${protect(`href="${url}"`)}>${url}</a>`;
      }
    );

    // REFERENCE LINK
    str = str.rp(
      /(^|[^!])\[([^\[\]]+)\]\[([^\[\]]*)\]/g,
      (match, pre, text, symbolicName) => {
        // Empty symbolic name is replaced by the label text
        if (!symbolicName.trim()) {
          symbolicName = text;
        }

        symbolicName = symbolicName.toLowerCase().trim();
        const t = referenceLinkTable[symbolicName];
        if (!t) {
          console.log(`Reference link '${symbolicName}' never defined`);
          return "?";
        } else {
          t.used = true;
          return `${pre}<a ${protect(`href="${t.link}"`)}>${text}</a>`;
        }
      }
    );

    const CAPTION_PROTECT_CHARACTER = "\ue011";
    const protectedCaptionArray = [];

    // Temporarily protect image captions (or things that look like
    // them) because the following code is really slow at parsing
    // captions since they have regexps that are complicated to
    // evaluate due to branching.
    //
    // The regexp is really just /.*?\n{0,5}.*/, but that executes substantially more slowly on Chrome.
    str = str.rp(
      /!\[([^\n\]].*?\n?.*?\n?.*?\n?.*?\n?.*?)\]([\[\(])/g,
      (match, caption, bracket) => {
        // This is the same as the body of the protect() function, but using the protectedCaptionArray instead
        let i = (protectedCaptionArray.push(caption) - 1).toString(
          PROTECT_RADIX
        );
        while (i.length < PROTECT_DIGITS) {
          i = `0${i}`;
        }
        return `![${CAPTION_PROTECT_CHARACTER}${i}${CAPTION_PROTECT_CHARACTER}]${bracket}`;
      }
    );

    // REFERENCE IMAGE: ![...][ref attribs]
    // Rewrite as a regular image for further processing below.
    str = str.rp(
      /(!\[.*?\])\[([^<>\[\]\s]+?)([ \t][^\n\[\]]*?)?\]/g,
      (match, caption, symbolicName, attribs) => {
        symbolicName = symbolicName.toLowerCase().trim();
        const t = referenceLinkTable[symbolicName];
        if (!t) {
          console.log(`Reference image '${symbolicName}' never defined`);
          return "?";
        } else {
          t.used = true;
          const s = `${caption}(${t.link}${t.attribs || ""})`;
          return s;
        }
      }
    );

    // IMAGE GRID: Rewrite rows and grids of images into a grid
    const imageGridAttribs = protect('width="100%"');
    const imageGridRowAttribs = protect('valign="top"');
    // This regex is the pattern for multiple images followed by an optional single image in case the last row is ragged
    // with only one extra
    str = str.rp(
      /(?:\n(?:[ \t]*!\[.*?\]\(("?)[^<>\s]+?(?:[^\n\)]*?)?\)){2,}[ \t]*)+(?:\n(?:[ \t]*!\[.*?\]\(("?)[^<>\s]+?(?:[^\n\)]*?)?\))[ \t]*)?\n/g,
      (match) => {
        let table = "";

        // Break into rows:
        match = match.split("\n");

        // Parse each row:
        match.forEach((row) => {
          row = row.trim();
          if (row) {
            // Parse each image
            table += entag(
              "tr",
              row.rp(
                /[ \t]*!\[.*?\]\([^\)\s]+([^\)]*?)?\)/g,
                (image, attribs) => {
                  //if (! /width|height/i.test(attribs) {
                  // Add a bogus "width" attribute to force the images to be hyperlinked to their
                  // full-resolution versions
                  //}
                  return entag("td", `\n\n${image}\n\n`);
                }
              ),
              imageGridRowAttribs
            );
          }
        });

        return `\n${entag("table", table, imageGridAttribs)}\n`;
      }
    );

    // SIMPLE IMAGE: ![](url attribs)
    str = str.rp(
      /(\s*)!\[\]\(("?)([^"<>\s]+?)\2(\s[^\)]*?)?\)(\s*)/g,
      (match, preSpaces, maybeQuote, url, attribs, postSpaces) => {
        let img = formatImage(match, url, attribs);

        if (isolated(preSpaces, postSpaces)) {
          // In a block by itself: center
          img = entag("center", img);
        }

        return preSpaces + img + postSpaces;
      }
    );

    // Explicit loop so that the output will be re-processed, preserving spaces between blocks.
    // Note that there is intentionally no global flag on the first regexp since we only want
    // to process the first occurance.
    let loop = true;
    const imageCaptionAbove = option("captionAbove", "image");
    while (loop) {
      loop = false;

      // CAPTIONED IMAGE: ![caption](url attribs)
      str = str.rp(
        /(\s*)!\[(.+?)\]\(("?)([^"<>\s]+?)\3(\s[^\)]*?)?\)(\s*)/,
        (match, preSpaces, caption, maybeQuote, url, attribs, postSpaces) => {
          loop = true;
          let divStyle = "";
          const iso = isolated(preSpaces, postSpaces);

          // Only floating images get their size attributes moved to the whole box
          if (attribs && !iso) {
            // Move any width *attribute* specification to the box itself
            attribs = attribs.rp(
              /((?:max-)?width)\s*:\s*[^;'"]*/g,
              (attribMatch, attrib) => {
                divStyle = `${attribMatch};`;
                return `${attrib}:100%`;
              }
            );

            // Move any width *style* specification to the box itself
            attribs = attribs.rp(
              /((?:max-)?width)\s*=\s*('\S+?'|"\S+?")/g,
              (attribMatch, attrib, expr) => {
                // Strip the quotes
                divStyle = `${attrib}:${expr.ss(1, expr.length - 1)};`;
                return `style="${attrib}:100%" `;
              }
            );
          }

          const img = formatImage(match, url, attribs);

          if (iso) {
            // In its own block: center
            preSpaces += "<center>";
            postSpaces = `</center>${postSpaces}`;
          } else {
            // Embedded: float
            divStyle += "float:right;margin:4px 0px 0px 25px;";
          }
          const floating = !iso;

          caption = entag(
            "center",
            entag(
              "span",
              caption + maybeShowLabel(url),
              protect('class="imagecaption"')
            )
          );

          // This code used to put floating images in <span> instead of <div>,
          // but it wasn't clear why and this broke centered captions
          return (
            preSpaces +
            entag(
              "div",
              (imageCaptionAbove ? caption : "") +
                img +
                (!imageCaptionAbove ? caption : ""),
              protect(`class="image" style="${divStyle}"`)
            ) +
            postSpaces
          );
        }
      );
    } // while replacements made

    // Uprotect image captions
    let exposeCaptionRan = false;
    const CAPTION_PROTECT_REGEXP = RegExp(
      `${CAPTION_PROTECT_CHARACTER}[0-9a-w]{${PROTECT_DIGITS},${PROTECT_DIGITS}}${CAPTION_PROTECT_CHARACTER}`,
      "g"
    );
    /** Given the escaped identifier string from protect(), returns
        the orginal string. */
    function exposeCaption(i) {
      // Strip the escape character and parse, then look up in the
      // dictionary.
      const j = parseInt(i.ss(1, i.length - 1), PROTECT_RADIX);
      exposeCaptionRan = true;
      return protectedCaptionArray[j];
    }
    exposeCaptionRan = true;
    while (str.indexOf(CAPTION_PROTECT_CHARACTER) + 1 && exposeCaptionRan) {
      exposeCaptionRan = false;
      str = str.rp(CAPTION_PROTECT_REGEXP, exposeCaption);
    }

    ////////////////////////////////////////////

    // Process these after links, so that URLs with underscores and tildes are protected.

    // STRONG: Must run before italic, since they use the
    // same symbols. **b** __b__
    str = replaceMatched(str, /\*\*/, "strong", protect('class="asterisk"'));
    str = replaceMatched(str, /__/, "strong", protect('class="underscore"'));

    // EM (ITALICS): *i* _i_
    str = replaceMatched(str, /\*/, "em", protect('class="asterisk"'));
    str = replaceMatched(str, /_/, "em", protect('class="underscore"'));

    // STRIKETHROUGH: ~~text~~
    str = str.rp(/\~\~([^~].*?)\~\~/g, entag("del", "$1"));

    // SMART DOUBLE QUOTES: "a -> localized &ldquo;   z"  -> localized &rdquo;
    // Allow situations such as "foo"==>"bar" and foo:"bar", but not 3' 9"
    if (option("smartQuotes")) {
      str = str.rp(/(^|[ \t->])(")(?=\w)/gm, `$1${keyword("&ldquo;")}`);
      str = str.rp(
        /([A-Za-z\.,:;\?!=<])(")(?=$|\W)/gm,
        `$1${keyword("&rdquo;")}`
      );
    }

    // ARROWS:
    str = str.rp(/(\s|^)<==(\s)/g, "$1\u21D0$2");
    str = str.rp(/(\s|^)->(\s)/g, "$1&rarr;$2");
    // (this requires having removed HTML comments first)
    str = str.rp(/(\s|^)-->(\s)/g, "$1&xrarr;$2");
    str = str.rp(/(\s|^)==>(\s)/g, "$1\u21D2$2");
    str = str.rp(/(\s|^)<-(\s)/g, "$1&larr;$2");
    str = str.rp(/(\s|^)<--(\s)/g, "$1&xlarr;$2");
    str = str.rp(/(\s|^)<==>(\s)/g, "$1\u21D4$2");
    str = str.rp(/(\s|^)<->(\s)/g, "$1\u2194$2");

    // EM DASH: ---
    // (exclude things that look like table delimiters!)
    str = str.rp(/([^-!\:\|])---([^->\:\|])/g, "$1&mdash;$2");

    // other EM DASH: -- (we don't support en dash...it is too short and looks like a minus)
    // (exclude things that look like table delimiters!)
    str = str.rp(/([^-!\:\|])--([^->\:\|])/g, "$1&mdash;$2");

    // NUMBER x NUMBER:
    str = str.rp(/(\d+\s?)x(?=\s?\d+)/g, "$1&times;");

    // MINUS: -4 or 2 - 1
    str = str.rp(/([\s\(\[<\|])-(\d)/g, "$1&minus;$2");
    str = str.rp(/(\d) - (\d)/g, "$1 &minus; $2");

    // EXPONENTS: ^1 ^-1 (no decimal places allowed)
    str = str.rp(/\^([-+]?\d+)\b/g, "<sup>$1</sup>");

    // PAGE BREAK:
    str = str.rp(
      /(^|\s|\b)\\(pagebreak|newpage)(\b|\s|$)/gi,
      protect('<div style="page-break-after:always"> </div>\n')
    );

    // SCHEDULE LISTS: date : title followed by indented content
    str = replaceScheduleLists(str, protect);

    // DEFINITION LISTS: Word followed by a colon list
    // Use <dl><dt>term</dt><dd>definition</dd></dl>
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl
    //
    // Process these before lists so that lists within definition lists
    // work correctly
    str = replaceDefinitionLists(str, protect);

    // LISTS: lines with -, +, *, or number.
    str = replaceLists(str, protect);

    // DEGREE: ##-degree
    str = str.rp(/(\d+?)[ \t-]degree(?:s?)/g, "$1&deg;");

    // PARAGRAPH: Newline, any amount of space, newline...as long as there isn't already
    // a paragraph break there.
    str = str.rp(/(?:<p>)?\n\s*\n+(?!<\/p>)/gi, (match) => {
      return /^<p>/i.test(match) ? match : "\n\n</p><p>\n\n";
    });

    // Remove empty paragraphs (mostly avoided by the above, but some can still occur)
    str = str.rp(/<p>[\s\n]*<\/p>/gi, "");

    // FOOTNOTES/ENDNOTES
    str = str.rp(
      /\n\[\^(\S+)\]: ((?:.+?\n?)*)/g,
      (match, symbolicName, note) => {
        symbolicName = symbolicName.toLowerCase().trim();
        if (symbolicName in endNoteTable) {
          return `\n<div ${protect('class="endnote"')}><a ${protect(
            `class="target" name="endnote-${symbolicName}"`
          )}>&nbsp;</a><sup>${endNoteTable[symbolicName]}</sup> ${note}</div>`;
        } else {
          return "\n";
        }
      }
    );

    // SECTION LINKS: XXX section, XXX subsection.
    // Do this by rediscovering the headers and then recursively
    // searching for links to them. Process after other
    // forms of links to avoid ambiguity.

    const allHeaders = str.match(/<h([1-6])>(.*?)<\/h\1>/gi);
    if (allHeaders) {
      allHeaders.forEach((header) => {
        header = removeHTMLTags(header.ss(4, header.length - 5)).trim();
        const link = `<a ${protect(`href="#${mangle(header)}"`)}>`;

        const sectionExp = `(${keyword("section")}|${keyword(
          "subsection"
        )}|${keyword("chapter")})`;
        const headerExp = `(\\b${escapeRegExpCharacters(header)})`;

        // Search for links to this section
        str = str.rp(
          RegExp(`${headerExp}\\s+${sectionExp}`, "gi"),
          `${link}$1</a> $2`
        );
        str = str.rp(
          RegExp(`${sectionExp}\\s+${headerExp}`, "gi"),
          `$1 ${link}$2</a>`
        );
      });
    }

    // TABLE, LISTING, and FIGURE LABEL NUMBERING: Figure [symbol]: Table [symbol]: Listing [symbol]: Diagram [symbol]:

    // This data structure maps caption types [by localized name] to a count of how many of
    // that type of object exist.
    const refCounter = {};

    // refTable['type_symbolicName'] = {number: number to link to, used: bool}
    const refTable = {};

    str = str.rp(
      RegExp(
        `${/($|>)\s*/.source}(${keyword("figure")}|${keyword(
          "table"
        )}|${keyword("listing")}|${keyword("diagram")})${
          /\s+\[(.+?)\]:/.source
        }`,
        "gim"
      ),
      (match, prefix, _type, _ref) => {
        const type = _type.toLowerCase();
        // Increment the counter
        const count = (refCounter[type] = (refCounter[type] | 0) + 1);
        const ref = `${type}_${mangle(_ref.toLowerCase().trim())}`;

        // Store the reference number
        refTable[ref] = {
          number: count,
          used: false,
          source: `${type} [${_ref}]`,
        };

        return (
          prefix +
          entag("a", "&nbsp;", protect(`class="target" name="${ref}"`)) +
          entag(
            "b",
            `${type[0].toUpperCase() + type.ss(1)}&nbsp;${count}:`,
            protect('style="font-style:normal;"')
          ) +
          maybeShowLabel(_ref)
        );
      }
    );

    // FIGURE, TABLE, DIAGRAM, and LISTING references:
    // (must come after figure/table/listing processing, obviously)
    str = str.rp(
      RegExp(
        `\\b(fig\\.|tbl\\.|lst\\.|${keyword("figure")}|${keyword(
          "table"
        )}|${keyword("listing")}|${keyword("diagram")})\\s+\\[([^\\s\\]]+)\\]`,
        "gi"
      ),
      (match, _type, _ref) => {
        // Fix abbreviations
        let type = _type.toLowerCase();
        switch (type) {
          case "fig.":
            type = keyword("figure").toLowerCase();
            break;
          case "tbl.":
            type = keyword("table").toLowerCase();
            break;
          case "lst.":
            type = keyword("listing").toLowerCase();
            break;
        }

        // Clean up the reference
        const ref = `${type}_${mangle(_ref.toLowerCase().trim())}`;
        const t = refTable[ref];

        if (t) {
          t.used = true;
          return `<a ${protect(`href="#${ref}"`)}>${_type}&nbsp;${
            t.number
          }${maybeShowLabel(_ref)}</a>`;
        } else {
          console.log(`Reference to undefined '${type} [${_ref}]'`);
          return `${_type} ?`;
        }
      }
    );

    // URL: <http://baz> or http://baz
    // Must be detected after [link]() processing
    str = str.rp(
      /(?:<|(?!<)\b)(\w{3,6}:\/\/.+?)(?:$|>|(?=<)|(?=\s|\u00A0)(?!<))/g,
      (match, url) => {
        let extra = "";
        if (url[url.length - 1] == ".") {
          // Accidentally sucked in a period at the end of a sentence
          url = url.ss(0, url.length - 1);
          extra = ".";
        }
        // svn and perforce URLs are not hyperlinked. All others (http/https/ftp/mailto/tel, etc. are)
        return `<a ${
          url[0] !== "s" && url[0] !== "p"
            ? protect(`href="${url}" class="url"`)
            : ""
        }>${url}</a>${extra}`;
      }
    );

    if (!elementMode) {
      const TITLE_PATTERN = /^\s*(?:<\/p><p>)?\s*<strong.*?>([^ \t\*].*?[^ \t\*])<\/strong>(?:<\/p>)?[ \t]*\n/
        .source;

      const ALL_SUBTITLES_PATTERN = /([ {4,}\t][ \t]*\S.*\n)*/.source;

      // Detect a bold first line and make it into a title; detect indented lines
      // below it and make them subtitles
      str = str.rp(
        new RegExp(TITLE_PATTERN + ALL_SUBTITLES_PATTERN, "g"),
        (match, title) => {
          title = title.trim();

          // rp + RegExp won't give us the full list of
          // subtitles, only the last one. So, we have to
          // re-process match.
          let subtitles = match.ss(
            match.indexOf("\n", match.indexOf("</strong>"))
          );
          subtitles = subtitles
            ? subtitles.rp(
                /[ \t]*(\S.*?)\n/g,
                '<div class="subtitle"> $1 </div>\n'
              )
            : "";

          // Remove all tags from the title when inside the <TITLE> tag, as well
          // as unicode characters that don't render well in tabs and window bars.
          // These regexps look like they are full of spaces but are actually various
          // unicode space characters. http://jkorpela.fi/chars/spaces.html
          title = removeHTMLTags(title)
            .replace(/[     ]/g, "")
            .replace(/[         　]/g, " ");

          return `${
            entag("title", title) +
            maybeShowLabel(window.location.href, "center")
          }<div class="title"> ${title} </div>\n${subtitles}<div class="afterTitles"></div>\n`;
        }
      );
    } // if ! noTitles

    // Remove any bogus leading close-paragraph tag inserted by our extra newlines
    str = str.rp(/^\s*<\/p>/, "");

    // If not in element mode and not an INSERT child, maybe add a TOC
    if (!elementMode) {
      const temp = insertTableOfContents(str, protect, (text) => {
        return text.rp(PROTECT_REGEXP, expose);
      });
      str = temp[0];
      const toc = temp[1];
      // SECTION LINKS: Replace sec. [X], section [X], subsection [X]
      str = str.rp(
        RegExp(
          `\\b(${keyword("sec")}\\.|${keyword("section")}|${keyword(
            "subsection"
          )}|${keyword("chapter")})\\s\\[(.+?)\\]`,
          "gi"
        ),
        (match, prefix, ref) => {
          const link = toc[ref.toLowerCase().trim()];
          if (link) {
            return `${prefix}  <a ${protect(`href="#toc${link}"`)}>${link}</a>`;
          } else {
            return `${prefix} ?`;
          }
        }
      );
    }

    // Expose all protected values. We may need to do this
    // recursively, because pre and code blocks can be nested.
    let maxIterations = 50;

    exposeRan = true;
    while (
      str.indexOf(PROTECT_CHARACTER) + 1 &&
      exposeRan &&
      maxIterations > 0
    ) {
      exposeRan = false;
      str = str.rp(PROTECT_REGEXP, expose);
      --maxIterations;
    }

    if (maxIterations <= 0) {
      console.log(
        "WARNING: Ran out of iterations while expanding protected substrings"
      );
    }

    // Warn about unused references
    Object.keys(referenceLinkTable).forEach((key) => {
      if (!referenceLinkTable[key].used) {
        console.log(`Reference link '[${key}]' is defined but never used`);
      }
    });

    Object.keys(refTable).forEach((key) => {
      if (!refTable[key].used) {
        console.log(`'${refTable[key].source}' is never referenced`);
      }
    });

    if (option("linkAPIDefinitions")) {
      // Find link targets for APIs
      const apiDefined = {};
      str = str.rp(
        /<dt><code(\b[^<>\n]*)>([A-Za-z_][A-Za-z_\.0-9:\->]*)([\(\[<])/g,
        (match, prefix, name, next) => {
          const linkName =
            name +
            (next === "<"
              ? ""
              : next === "("
              ? "-fcn"
              : next === "["
              ? "-array"
              : next);
          apiDefined[linkName] = true;
          // The 'ignore' added to the code tag below is to
          // prevent the link finding code from finding this (since
          // we don't have lookbehinds in JavaScript to recognize
          // the <dt>)
          return `<dt><a name="apiDefinition-${linkName}"></a><code ignore ${prefix}>${name}${next}`;
        }
      );

      // Hide links that are also inside of a <h#>...</h#>, where we don't want them
      // modified by API links. Assume that these are on a single line. The space in
      // the close tag prevents the next regexp from matching.
      str = str.rp(
        /<h([1-9])>(.*<code\b[^<>\n]*>.*)<\/code>(.*<\/h\1>)/g,
        "<h$1>$2</code >$3"
      );

      // Now find potential links
      str = str.rp(
        /<code(?! ignore)\b[^<>\n]*>([A-Za-z_][A-Za-z_\.0-9:\->]*)(\(\)|\[\])?<\/code>/g,
        (match, name, next) => {
          const linkName =
            name +
            (next
              ? next[0] === "("
                ? "-fcn"
                : next[0] === "["
                ? "-array"
                : next[0]
              : "");
          return apiDefined[linkName] === true
            ? entag("a", match, `href="#apiDefinition-${linkName}"`)
            : match;
        }
      );
    }

    return `<span class="md">${entag("p", str)}</span>`;
  }

  /** Workaround for IE11 */
  function strToArray(s) {
    if (Array.from) {
      return Array.from(s);
    } else {
      const a = [];
      for (let i = 0; i < s.length; ++i) {
        a[i] = s[i];
      }
      return a;
    }
  }

  /**
   Adds whitespace at the end of each line of str, so that all lines have equal length in
   unicode characters (which is not the same as JavaScript characters when high-index/escape
   characters are present).
*/
  function equalizeLineLengths(str) {
    const lineArray = str.split("\n");

    if (lineArray.length > 0 && lineArray[lineArray.length - 1] === "") {
      // Remove the empty last line generated by split on a trailing newline
      lineArray.pop();
    }

    let longest = 0;
    lineArray.forEach((line) => {
      longest = max(longest, strToArray(line).length);
    });

    // Worst case spaces needed for equalizing lengths
    // http://stackoverflow.com/questions/1877475/repeat-character-n-times
    const spaces = Array(longest + 1).join(" ");

    let result = "";
    lineArray.forEach((line) => {
      // Append the needed number of spaces onto each line, and
      // reconstruct the output with newlines
      result += `${line + spaces.ss(strToArray(line).length)}\n`;
    });

    return result;
  }

  /** Finds the longest common whitespace prefix of all non-empty lines
    and then removes it */
  function removeLeadingSpace(str) {
    const lineArray = str.split("\n");

    let minimum = Infinity;
    lineArray.forEach((line) => {
      if (line.trim() !== "") {
        // This is a non-empty line
        const spaceArray = line.match(/^([ \t]*)/);
        if (spaceArray) {
          minimum = min(minimum, spaceArray[0].length);
        }
      }
    });

    if (minimum === 0) {
      // No leading space
      return str;
    }

    let result = "";
    lineArray.forEach((line) => {
      // Strip the common spaces
      result += `${line.ss(minimum)}\n`;
    });

    return result;
  }

  /** Returns true if this character is a "letter" under the ASCII definition */
  function isASCIILetter(c) {
    const code = c.charCodeAt(0);
    return (code >= 65 && code <= 90) || (code >= 97 && code <= 122);
  }

  /** Converts diagramString, which is a Markdeep diagram without the surrounding asterisks, to
    SVG (HTML). Lines may have ragged lengths.

    alignmentHint is the float alignment desired for the SVG tag,
    which can be 'floatleft', 'floatright', or ''
 */
  function diagramToSVG(diagramString, alignmentHint) {
    // Clean up diagramString if line endings are ragged
    diagramString = equalizeLineLengths(diagramString);

    // Temporarily replace 'o' that is surrounded by other text
    // with another character to avoid processing it as a point
    // decoration. This will be replaced in the final svg and is
    // faster than checking each neighborhood each time.
    const HIDE_O = "\ue004";
    diagramString = diagramString.rp(/([a-zA-Z]{2})o/g, `$1${HIDE_O}`);
    diagramString = diagramString.rp(/o([a-zA-Z]{2})/g, `${HIDE_O}$1`);
    diagramString = diagramString.rp(
      /([a-zA-Z\ue004])o([a-zA-Z\ue004])/g,
      `$1${HIDE_O}$2`
    );

    /** Pixels per character */
    const SCALE = 8;

    /** Multiply Y coordinates by this when generating the final SVG
        result to account for the aspect ratio of text files. This
        MUST be 2 */
    const ASPECT = 2;

    const DIAGONAL_ANGLE = (Math.atan(1.0 / ASPECT) * 180) / Math.PI;

    const EPSILON = 1e-6;

    // The order of the following is based on rotation angles
    // and is used for ArrowSet.toSVG
    const ARROW_HEAD_CHARACTERS = ">v<^";
    const POINT_CHARACTERS = "o*◌○◍●";
    const JUMP_CHARACTERS = "()";
    const UNDIRECTED_VERTEX_CHARACTERS = "+";
    const VERTEX_CHARACTERS = `${UNDIRECTED_VERTEX_CHARACTERS}.'`;

    // GRAY[i] is the Unicode block character for (i+1)/4 level gray
    const GRAY_CHARACTERS = "\u2591\u2592\u2593\u2588";

    // TRI[i] is a right-triangle rotated by 90*i
    const TRI_CHARACTERS = "\u25E2\u25E3\u25E4\u25E5";

    const DECORATION_CHARACTERS =
      ARROW_HEAD_CHARACTERS +
      POINT_CHARACTERS +
      JUMP_CHARACTERS +
      GRAY_CHARACTERS +
      TRI_CHARACTERS;

    function isUndirectedVertex(c) {
      return UNDIRECTED_VERTEX_CHARACTERS.indexOf(c) + 1;
    }
    function isVertex(c) {
      return VERTEX_CHARACTERS.indexOf(c) !== -1;
    }
    function isTopVertex(c) {
      return isUndirectedVertex(c) || c === ".";
    }
    function isBottomVertex(c) {
      return isUndirectedVertex(c) || c === "'";
    }
    function isVertexOrLeftDecoration(c) {
      return isVertex(c) || c === "<" || isPoint(c);
    }
    function isVertexOrRightDecoration(c) {
      return isVertex(c) || c === ">" || isPoint(c);
    }
    function isArrowHead(c) {
      return ARROW_HEAD_CHARACTERS.indexOf(c) + 1;
    }
    function isGray(c) {
      return GRAY_CHARACTERS.indexOf(c) + 1;
    }
    function isTri(c) {
      return TRI_CHARACTERS.indexOf(c) + 1;
    }

    // "D" = Diagonal slash (/), "B" = diagonal Backslash (\)
    // Characters that may appear anywhere on a solid line
    function isSolidHLine(c) {
      return c === "-" || isUndirectedVertex(c) || isJump(c);
    }
    function isSolidVLineOrJumpOrPoint(c) {
      return isSolidVLine(c) || isJump(c) || isPoint(c);
    }
    function isSolidVLine(c) {
      return c === "|" || isUndirectedVertex(c);
    }
    function isSolidDLine(c) {
      return c === "/" || isUndirectedVertex(c);
    }
    function isSolidBLine(c) {
      return c === "\\" || isUndirectedVertex(c);
    }
    function isJump(c) {
      return JUMP_CHARACTERS.indexOf(c) + 1;
    }
    function isPoint(c) {
      return POINT_CHARACTERS.indexOf(c) + 1;
    }
    function isDecoration(c) {
      return DECORATION_CHARACTERS.indexOf(c) + 1;
    }
    function isEmpty(c) {
      return c === " ";
    }

    ///////////////////////////////////////////////////////////////////////////////
    // Math library

    /** Invoke as new Vec2(v) to clone or new Vec2(x, y) to create from coordinates.
        Can also invoke without new for brevity. */
    function Vec2(x, y) {
      // Detect when being run without new
      if (!(this instanceof Vec2)) {
        return new Vec2(x, y);
      }

      if (y === undefined) {
        if (x === undefined) {
          x = y = 0;
        } else if (x instanceof Vec2) {
          y = x.y;
          x = x.x;
        } else {
          console.error("Vec2 requires one Vec2 or (x, y) as an argument");
        }
      }
      this.x = x;
      this.y = y;
      Object.seal(this);
    }

    /** Returns an SVG representation */
    Vec2.prototype.toString = Vec2.prototype.toSVG = function () {
      return `${String(this.x * SCALE)},${this.y * SCALE * ASPECT} `;
    };

    /** Converts a "rectangular" string defined by newlines into 2D
        array of characters. Grids are immutable. */
    function makeGrid(str) {
      /** Returns ' ' for out of bounds values */
      var grid = function (x, y) {
        if (y === undefined) {
          if (x instanceof Vec2) {
            y = x.y;
            x = x.x;
          } else {
            console.error("grid requires either a Vec2 or (x, y)");
          }
        }

        return x >= 0 && x < grid.width && y >= 0 && y < grid.height
          ? str[y * (grid.width + 1) + x]
          : " ";
      };

      // Elements are true when consumed
      grid._used = [];

      grid.height = str.split("\n").length;
      if (str[str.length - 1] === "\n") {
        --grid.height;
      }

      // Convert the string to an array to better handle greater-than 16-bit unicode
      // characters, which JavaScript does not process correctly with indices. Do this after
      // the above string processing.
      str = strToArray(str);
      grid.width = str.indexOf("\n");

      /** Mark this location. Takes a Vec2 or (x, y) */
      grid.setUsed = function (x, y) {
        if (y === undefined) {
          if (x instanceof Vec2) {
            y = x.y;
            x = x.x;
          } else {
            console.error("grid requires either a Vec2 or (x, y)");
          }
        }
        if (x >= 0 && x < grid.width && y >= 0 && y < grid.height) {
          // Match the source string indexing
          grid._used[y * (grid.width + 1) + x] = true;
        }
      };

      grid.isUsed = function (x, y) {
        if (y === undefined) {
          if (x instanceof Vec2) {
            y = x.y;
            x = x.x;
          } else {
            console.error("grid requires either a Vec2 or (x, y)");
          }
        }
        return this._used[y * (this.width + 1) + x] === true;
      };

      /** Returns true if there is a solid vertical line passing through (x, y) */
      grid.isSolidVLineAt = function (x, y) {
        if (y === undefined) {
          y = x.x;
          x = x.x;
        }

        const up = grid(x, y - 1);
        const c = grid(x, y);
        const dn = grid(x, y + 1);

        const uprt = grid(x + 1, y - 1);
        const uplt = grid(x - 1, y - 1);

        if (isSolidVLine(c)) {
          // Looks like a vertical line...does it continue?
          return (
            isTopVertex(up) ||
            up === "^" ||
            isSolidVLine(up) ||
            isJump(up) ||
            isBottomVertex(dn) ||
            dn === "v" ||
            isSolidVLine(dn) ||
            isJump(dn) ||
            isPoint(up) ||
            isPoint(dn) ||
            grid(x, y - 1) === "_" ||
            uplt === "_" ||
            uprt === "_" ||
            // Special case of 1-high vertical on two curved corners
            ((isTopVertex(uplt) || isTopVertex(uprt)) &&
              (isBottomVertex(grid(x - 1, y + 1)) ||
                isBottomVertex(grid(x + 1, y + 1))))
          );
        } else if (isTopVertex(c) || c === "^") {
          // May be the top of a vertical line
          return isSolidVLine(dn) || (isJump(dn) && c !== ".");
        } else if (isBottomVertex(c) || c === "v") {
          return isSolidVLine(up) || (isJump(up) && c !== "'");
        } else if (isPoint(c)) {
          return isSolidVLine(up) || isSolidVLine(dn);
        }

        return false;
      };

      /** Returns true if there is a solid middle (---) horizontal line
            passing through (x, y). Ignores underscores. */
      grid.isSolidHLineAt = function (x, y) {
        if (y === undefined) {
          y = x.x;
          x = x.x;
        }

        const ltlt = grid(x - 2, y);
        const lt = grid(x - 1, y);
        const c = grid(x + 0, y);
        const rt = grid(x + 1, y);
        const rtrt = grid(x + 2, y);

        if (isSolidHLine(c) || (isSolidHLine(lt) && isJump(c))) {
          // Looks like a horizontal line...does it continue? We need three in a row.
          if (isSolidHLine(lt)) {
            return (
              isSolidHLine(rt) ||
              isVertexOrRightDecoration(rt) ||
              isSolidHLine(ltlt) ||
              isVertexOrLeftDecoration(ltlt)
            );
          } else if (isVertexOrLeftDecoration(lt)) {
            return isSolidHLine(rt);
          } else {
            return (
              isSolidHLine(rt) &&
              (isSolidHLine(rtrt) || isVertexOrRightDecoration(rtrt))
            );
          }
        } else if (c === "<") {
          return isSolidHLine(rt) && isSolidHLine(rtrt);
        } else if (c === ">") {
          return isSolidHLine(lt) && isSolidHLine(ltlt);
        } else if (isVertex(c)) {
          return (
            (isSolidHLine(lt) && isSolidHLine(ltlt)) ||
            (isSolidHLine(rt) && isSolidHLine(rtrt))
          );
        }

        return false;
      };

      /** Returns true if there is a solid backslash line passing through (x, y) */
      grid.isSolidBLineAt = function (x, y) {
        if (y === undefined) {
          y = x.x;
          x = x.x;
        }
        const c = grid(x, y);
        const lt = grid(x - 1, y - 1);
        const rt = grid(x + 1, y + 1);

        if (c === "\\") {
          // Looks like a diagonal line...does it continue? We need two in a row.
          return (
            isSolidBLine(rt) ||
            isBottomVertex(rt) ||
            isPoint(rt) ||
            rt === "v" ||
            isSolidBLine(lt) ||
            isTopVertex(lt) ||
            isPoint(lt) ||
            lt === "^" ||
            grid(x, y - 1) === "/" ||
            grid(x, y + 1) === "/" ||
            rt === "_" ||
            lt === "_"
          );
        } else if (c === ".") {
          return rt === "\\";
        } else if (c === "'") {
          return lt === "\\";
        } else if (c === "^") {
          return rt === "\\";
        } else if (c === "v") {
          return lt === "\\";
        } else if (isVertex(c) || isPoint(c) || c === "|") {
          return isSolidBLine(lt) || isSolidBLine(rt);
        }
      };

      /** Returns true if there is a solid diagonal line passing through (x, y) */
      grid.isSolidDLineAt = function (x, y) {
        if (y === undefined) {
          y = x.x;
          x = x.x;
        }

        const c = grid(x, y);
        const lt = grid(x - 1, y + 1);
        const rt = grid(x + 1, y - 1);

        if (c === "/" && (grid(x, y - 1) === "\\" || grid(x, y + 1) === "\\")) {
          // Special case of tiny hexagon corner
          return true;
        } else if (isSolidDLine(c)) {
          // Looks like a diagonal line...does it continue? We need two in a row.
          return (
            isSolidDLine(rt) ||
            isTopVertex(rt) ||
            isPoint(rt) ||
            rt === "^" ||
            rt === "_" ||
            isSolidDLine(lt) ||
            isBottomVertex(lt) ||
            isPoint(lt) ||
            lt === "v" ||
            lt === "_"
          );
        } else if (c === ".") {
          return lt === "/";
        } else if (c === "'") {
          return rt === "/";
        } else if (c === "^") {
          return lt === "/";
        } else if (c === "v") {
          return rt === "/";
        } else if (isVertex(c) || isPoint(c) || c === "|") {
          return isSolidDLine(lt) || isSolidDLine(rt);
        }
        return false;
      };

      grid.toString = function () {
        return str;
      };

      return Object.freeze(grid);
    }

    /** A 1D curve. If C is specified, the result is a bezier with
        that as the tangent control point */
    function Path(A, B, C, D, dashed) {
      if (!(A instanceof Vec2 && B instanceof Vec2)) {
        console.error("Path constructor requires at least two Vec2s");
      }
      this.A = A;
      this.B = B;
      if (C) {
        this.C = C;
        if (D) {
          this.D = D;
        } else {
          this.D = C;
        }
      }

      this.dashed = dashed || false;

      Object.freeze(this);
    }

    const _ = Path.prototype;
    _.isVertical = function () {
      return this.B.x === this.A.x;
    };

    _.isHorizontal = function () {
      return this.B.y === this.A.y;
    };

    /** Diagonal lines look like: / See also backDiagonal */
    _.isDiagonal = function () {
      const dx = this.B.x - this.A.x;
      const dy = this.B.y - this.A.y;
      return abs(dy + dx) < EPSILON;
    };

    _.isBackDiagonal = function () {
      const dx = this.B.x - this.A.x;
      const dy = this.B.y - this.A.y;
      return abs(dy - dx) < EPSILON;
    };

    _.isCurved = function () {
      return this.C !== undefined;
    };

    /** Does this path have any end at (x, y) */
    _.endsAt = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        (this.A.x === x && this.A.y === y) || (this.B.x === x && this.B.y === y)
      );
    };

    /** Does this path have an up end at (x, y) */
    _.upEndsAt = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        this.isVertical() && this.A.x === x && min(this.A.y, this.B.y) === y
      );
    };

    /** Does this path have an up end at (x, y) */
    _.diagonalUpEndsAt = function (x, y) {
      if (!this.isDiagonal()) {
        return false;
      }
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      if (this.A.y < this.B.y) {
        return this.A.x === x && this.A.y === y;
      } else {
        return this.B.x === x && this.B.y === y;
      }
    };

    /** Does this path have a down end at (x, y) */
    _.diagonalDownEndsAt = function (x, y) {
      if (!this.isDiagonal()) {
        return false;
      }
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      if (this.B.y < this.A.y) {
        return this.A.x === x && this.A.y === y;
      } else {
        return this.B.x === x && this.B.y === y;
      }
    };

    /** Does this path have an up end at (x, y) */
    _.backDiagonalUpEndsAt = function (x, y) {
      if (!this.isBackDiagonal()) {
        return false;
      }
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      if (this.A.y < this.B.y) {
        return this.A.x === x && this.A.y === y;
      } else {
        return this.B.x === x && this.B.y === y;
      }
    };

    /** Does this path have a down end at (x, y) */
    _.backDiagonalDownEndsAt = function (x, y) {
      if (!this.isBackDiagonal()) {
        return false;
      }
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      if (this.B.y < this.A.y) {
        return this.A.x === x && this.A.y === y;
      } else {
        return this.B.x === x && this.B.y === y;
      }
    };

    /** Does this path have a down end at (x, y) */
    _.downEndsAt = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        this.isVertical() && this.A.x === x && max(this.A.y, this.B.y) === y
      );
    };

    /** Does this path have a left end at (x, y) */
    _.leftEndsAt = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        this.isHorizontal() && this.A.y === y && min(this.A.x, this.B.x) === x
      );
    };

    /** Does this path have a right end at (x, y) */
    _.rightEndsAt = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        this.isHorizontal() && this.A.y === y && max(this.A.x, this.B.x) === x
      );
    };

    _.verticalPassesThrough = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        this.isVertical() &&
        this.A.x === x &&
        min(this.A.y, this.B.y) <= y &&
        max(this.A.y, this.B.y) >= y
      );
    };

    _.horizontalPassesThrough = function (x, y) {
      if (y === undefined) {
        y = x.y;
        x = x.x;
      }
      return (
        this.isHorizontal() &&
        this.A.y === y &&
        min(this.A.x, this.B.x) <= x &&
        max(this.A.x, this.B.x) >= x
      );
    };

    /** Returns a string suitable for inclusion in an SVG tag */
    _.toSVG = function () {
      let svg = `<path d="M ${this.A}`;

      if (this.isCurved()) {
        svg += `C ${this.C}${this.D}${this.B}`;
      } else {
        svg += `L ${this.B}`;
      }
      svg += '" style="fill:none;"';
      if (this.dashed) {
        svg += ' stroke-dasharray="3,6"';
      }
      svg += "/>";
      return svg;
    };

    /** A group of 1D curves. This was designed so that all of the
        methods can later be implemented in O(1) time, but it
        currently uses O(n) implementations for source code
        simplicity. */
    function PathSet() {
      this._pathArray = [];
    }

    const PS = PathSet.prototype;
    PS.insert = function (path) {
      this._pathArray.push(path);
    };

    /** Returns a new method that returns true if method(x, y) 
        returns true on any element of _pathAray */
    function makeFilterAny(method) {
      return function (x, y) {
        for (let i = 0; i < this._pathArray.length; ++i) {
          if (method.call(this._pathArray[i], x, y)) {
            return true;
          }
        }
        // Fall through: return undefined == false
      };
    }

    // True if an up line ends at these coordinates. Recall that the
    // variable _ is bound to the Path prototype still.
    PS.upEndsAt = makeFilterAny(_.upEndsAt);
    PS.diagonalUpEndsAt = makeFilterAny(_.diagonalUpEndsAt);
    PS.backDiagonalUpEndsAt = makeFilterAny(_.backDiagonalUpEndsAt);
    PS.diagonalDownEndsAt = makeFilterAny(_.diagonalDownEndsAt);
    PS.backDiagonalDownEndsAt = makeFilterAny(_.backDiagonalDownEndsAt);
    PS.downEndsAt = makeFilterAny(_.downEndsAt);
    PS.leftEndsAt = makeFilterAny(_.leftEndsAt);
    PS.rightEndsAt = makeFilterAny(_.rightEndsAt);
    PS.endsAt = makeFilterAny(_.endsAt);
    PS.verticalPassesThrough = makeFilterAny(_.verticalPassesThrough);
    PS.horizontalPassesThrough = makeFilterAny(_.horizontalPassesThrough);

    /** Returns an SVG string */
    PS.toSVG = function () {
      let svg = "";
      for (let i = 0; i < this._pathArray.length; ++i) {
        svg += `${this._pathArray[i].toSVG()}\n`;
      }
      return svg;
    };

    function DecorationSet() {
      this._decorationArray = [];
    }

    const DS = DecorationSet.prototype;

    /** insert(x, y, type, <angle>)  
        insert(vec, type, <angle>)

        angle is the angle in degrees to rotate the result */
    DS.insert = function (x, y, type, angle) {
      if (type === undefined) {
        type = y;
        y = x.y;
        x = x.x;
      }

      if (!isDecoration(type)) {
        console.error(`Illegal decoration character: ${type}`);
      }
      const d = { C: Vec2(x, y), type: type, angle: angle || 0 };

      // Put arrows at the front and points at the back so that
      // arrows always draw under points

      if (isPoint(type)) {
        this._decorationArray.push(d);
      } else {
        this._decorationArray.unshift(d);
      }
    };

    DS.toSVG = function () {
      let svg = "";
      for (let i = 0; i < this._decorationArray.length; ++i) {
        const decoration = this._decorationArray[i];
        const C = decoration.C;

        if (isJump(decoration.type)) {
          // Slide jumps
          const dx = decoration.type === ")" ? +0.75 : -0.75;
          var up = Vec2(C.x, C.y - 0.5);
          var dn = Vec2(C.x, C.y + 0.5);
          const cup = Vec2(C.x + dx, C.y - 0.5);
          const cdn = Vec2(C.x + dx, C.y + 0.5);

          svg += `<path d="M ${dn} C ${cdn}${cup}${up}" style="fill:none;"/>`;
        } else if (isPoint(decoration.type)) {
          const cls = {
            "*": "closed",
            o: "open",
            "◌": "dotted",
            "○": "open",
            "◍": "shaded",
            "●": "closed",
          }[decoration.type];
          svg += `<circle cx="${C.x * SCALE}" cy="${C.y * SCALE * ASPECT}" r="${
            SCALE - STROKE_WIDTH
          }" class="${cls}dot"/>`;
        } else if (isGray(decoration.type)) {
          const shade = Math.round(
            (3 - GRAY_CHARACTERS.indexOf(decoration.type)) * 63.75
          );
          svg += `<rect x="${(C.x - 0.5) * SCALE}" y="${
            (C.y - 0.5) * SCALE * ASPECT
          }" width="${SCALE}" height="${
            SCALE * ASPECT
          }" stroke=none fill="rgb(${shade},${shade},${shade})"/>`;
        } else if (isTri(decoration.type)) {
          // 30-60-90 triangle
          const index = TRI_CHARACTERS.indexOf(decoration.type);
          let xs = 0.5 - (index & 1);
          const ys = 0.5 - (index >> 1);
          xs *= sign(ys);
          var tip = Vec2(C.x + xs, C.y - ys);
          var up = Vec2(C.x + xs, C.y + ys);
          var dn = Vec2(C.x - xs, C.y + ys);
          svg += `<polygon points="${tip}${up}${dn}" style="stroke:none"/>\n`;
        } else {
          // Arrow head
          var tip = Vec2(C.x + 1, C.y);
          var up = Vec2(C.x - 0.5, C.y - 0.35);
          var dn = Vec2(C.x - 0.5, C.y + 0.35);
          svg += `<polygon points="${tip}${up}${dn}"  style="stroke:none" transform="rotate(${decoration.angle},${C})"/>\n`;
        }
      }
      return svg;
    };

    ////////////////////////////////////////////////////////////////////////////

    function findPaths(grid, pathSet) {
      // Does the line from A to B contain at least one c?
      function lineContains(A, B, c) {
        const dx = sign(B.x - A.x);
        const dy = sign(B.y - A.y);
        let x, y;

        for (x = A.x, y = A.y; x !== B.x || y !== B.y; x += dx, y += dy) {
          if (grid(x, y) === c) {
            return true;
          }
        }

        // Last point
        return grid(x, y) === c;
      }

      // Find all solid vertical lines. Iterate horizontally
      // so that we never hit the same line twice
      for (var x = 0; x < grid.width; ++x) {
        for (var y = 0; y < grid.height; ++y) {
          if (grid.isSolidVLineAt(x, y)) {
            // This character begins a vertical line...now, find the end
            var A = Vec2(x, y);
            do {
              grid.setUsed(x, y);
              ++y;
            } while (grid.isSolidVLineAt(x, y));
            var B = Vec2(x, y - 1);

            var up = grid(A);
            const upup = grid(A.x, A.y - 1);

            if (
              (!isVertex(up) &&
                (upup === "-" ||
                  upup === "_" ||
                  upup === "┳" ||
                  grid(A.x - 1, A.y - 1) === "_" ||
                  grid(A.x + 1, A.y - 1) === "_" ||
                  isBottomVertex(upup))) ||
              isJump(upup)
            ) {
              // Stretch up to almost reach the line above (if there is a decoration,
              // it will finish the gap)
              A.y -= 0.5;
            }

            var dn = grid(B);
            const dndn = grid(B.x, B.y + 1);
            if (
              (!isVertex(dn) &&
                (dndn === "-" || dndn === "┻" || isTopVertex(dndn))) ||
              isJump(dndn) ||
              grid(B.x - 1, B.y) === "_" ||
              grid(B.x + 1, B.y) === "_"
            ) {
              // Stretch down to almost reach the line below
              B.y += 0.5;
            }

            // Don't insert degenerate lines
            if (A.x !== B.x || A.y !== B.y) {
              pathSet.insert(new Path(A, B));
            }

            // Continue the search from the end value y+1
          }

          // Some very special patterns for the short lines needed on
          // circuit diagrams. Only invoke these if not also on a curve
          //      _  _
          //    -'    '-   -'
          else if (
            grid(x, y) === "'" &&
            ((grid(x - 1, y) === "-" &&
              grid(x + 1, y - 1) === "_" &&
              !isSolidVLineOrJumpOrPoint(grid(x - 1, y - 1))) ||
              (grid(x - 1, y - 1) === "_" &&
                grid(x + 1, y) === "-" &&
                !isSolidVLineOrJumpOrPoint(grid(x + 1, y - 1))))
          ) {
            pathSet.insert(new Path(Vec2(x, y - 0.5), Vec2(x, y)));
          }

          //    _.-  -._
          else if (
            grid(x, y) === "." &&
            ((grid(x - 1, y) === "_" &&
              grid(x + 1, y) === "-" &&
              !isSolidVLineOrJumpOrPoint(grid(x + 1, y + 1))) ||
              (grid(x - 1, y) === "-" &&
                grid(x + 1, y) === "_" &&
                !isSolidVLineOrJumpOrPoint(grid(x - 1, y + 1))))
          ) {
            pathSet.insert(new Path(Vec2(x, y), Vec2(x, y + 0.5)));
          }

          // For drawing resistors: -.╱
          else if (
            grid(x, y) === "." &&
            grid(x - 1, y) === "-" &&
            grid(x + 1, y) === "╱"
          ) {
            pathSet.insert(new Path(Vec2(x, y), Vec2(x + 0.5, y + 0.5)));
          }

          // For drawing resistors: ╱'-
          else if (
            grid(x, y) === "'" &&
            grid(x + 1, y) === "-" &&
            grid(x - 1, y) === "╱"
          ) {
            pathSet.insert(new Path(Vec2(x, y), Vec2(x - 0.5, y - 0.5)));
          }
        } // y
      } // x

      // Find all solid horizontal lines
      for (var y = 0; y < grid.height; ++y) {
        for (var x = 0; x < grid.width; ++x) {
          if (grid.isSolidHLineAt(x, y)) {
            // Begins a line...find the end
            var A = Vec2(x, y);
            do {
              grid.setUsed(x, y);
              ++x;
            } while (grid.isSolidHLineAt(x, y));
            var B = Vec2(x - 1, y);

            // Detect adjacent box-drawing characters and lengthen the edge
            if (grid(B.x + 1, B.y) === "┫") {
              B.x += 0.5;
            }
            if (grid(A.x - 1, A.y) === "┣") {
              A.x -= 0.5;
            }

            // Detect curves and shorten the edge
            if (
              !isVertex(grid(A.x - 1, A.y)) &&
              ((isTopVertex(grid(A)) &&
                isSolidVLineOrJumpOrPoint(grid(A.x - 1, A.y + 1))) ||
                (isBottomVertex(grid(A)) &&
                  isSolidVLineOrJumpOrPoint(grid(A.x - 1, A.y - 1))))
            ) {
              ++A.x;
            }

            if (
              !isVertex(grid(B.x + 1, B.y)) &&
              ((isTopVertex(grid(B)) &&
                isSolidVLineOrJumpOrPoint(grid(B.x + 1, B.y + 1))) ||
                (isBottomVertex(grid(B)) &&
                  isSolidVLineOrJumpOrPoint(grid(B.x + 1, B.y - 1))))
            ) {
              --B.x;
            }

            // Only insert non-degenerate lines
            if (A.x !== B.x || A.y !== B.y) {
              pathSet.insert(new Path(A, B));
            }

            // Continue the search from the end x+1
          }
        }
      } // y

      // Find all solid left-to-right downward diagonal lines (BACK DIAGONAL)
      for (var i = -grid.height; i < grid.width; ++i) {
        for (var x = i, y = 0; y < grid.height; ++y, ++x) {
          if (grid.isSolidBLineAt(x, y)) {
            // Begins a line...find the end
            var A = Vec2(x, y);
            do {
              ++x;
              ++y;
            } while (grid.isSolidBLineAt(x, y));
            var B = Vec2(x - 1, y - 1);

            // Ensure that the entire line wasn't just vertices
            if (lineContains(A, B, "\\")) {
              for (var j = A.x; j <= B.x; ++j) {
                grid.setUsed(j, A.y + (j - A.x));
              }

              var top = grid(A);
              var up = grid(A.x, A.y - 1);
              const uplt = grid(A.x - 1, A.y - 1);
              if (
                up === "/" ||
                uplt === "_" ||
                up === "_" ||
                (!isVertex(top) && (isSolidHLine(uplt) || isSolidVLine(uplt)))
              ) {
                // Continue half a cell more to connect for:
                //  ___   ___
                //  \        \    /      ----     |
                //   \        \   \        ^      |^
                A.x -= 0.5;
                A.y -= 0.5;
              } else if (isPoint(uplt)) {
                // Continue 1/4 cell more to connect for:
                //
                //  o
                //   ^
                //    \
                A.x -= 0.25;
                A.y -= 0.25;
              }

              var bottom = grid(B);
              const dnrt = grid(B.x + 1, B.y + 1);
              if (
                grid(B.x, B.y + 1) === "/" ||
                grid(B.x + 1, B.y) === "_" ||
                grid(B.x - 1, B.y) === "_" ||
                (!isVertex(grid(B)) &&
                  (isSolidHLine(dnrt) || isSolidVLine(dnrt)))
              ) {
                // Continue half a cell more to connect for:
                //                       \      \ |
                //  \       \     \       v      v|
                //   \__   __\    /      ----     |

                B.x += 0.5;
                B.y += 0.5;
              } else if (isPoint(dnrt)) {
                // Continue 1/4 cell more to connect for:
                //
                //    \
                //     v
                //      o

                B.x += 0.25;
                B.y += 0.25;
              }

              pathSet.insert(new Path(A, B));
              // Continue the search from the end x+1,y+1
            } // lineContains
          }
        }
      } // i

      // Find all solid left-to-right upward diagonal lines (DIAGONAL)
      for (var i = -grid.height; i < grid.width; ++i) {
        for (var x = i, y = grid.height - 1; y >= 0; --y, ++x) {
          if (grid.isSolidDLineAt(x, y)) {
            // Begins a line...find the end
            var A = Vec2(x, y);
            do {
              ++x;
              --y;
            } while (grid.isSolidDLineAt(x, y));
            var B = Vec2(x - 1, y + 1);

            if (lineContains(A, B, "/")) {
              // This is definitely a line. Commit the characters on it
              for (var j = A.x; j <= B.x; ++j) {
                grid.setUsed(j, A.y - (j - A.x));
              }

              var up = grid(B.x, B.y - 1);
              const uprt = grid(B.x + 1, B.y - 1);
              var bottom = grid(B);
              if (
                up === "\\" ||
                up === "_" ||
                uprt === "_" ||
                (!isVertex(grid(B)) &&
                  (isSolidHLine(uprt) || isSolidVLine(uprt)))
              ) {
                // Continue half a cell more to connect at:
                //     __   __  ---     |
                //    /      /   ^     ^|
                //   /      /   /     / |

                B.x += 0.5;
                B.y -= 0.5;
              } else if (isPoint(uprt)) {
                // Continue 1/4 cell more to connect at:
                //
                //       o
                //      ^
                //     /

                B.x += 0.25;
                B.y -= 0.25;
              }

              const dnlt = grid(A.x - 1, A.y + 1);
              var top = grid(A);
              if (
                grid(A.x, A.y + 1) === "\\" ||
                grid(A.x - 1, A.y) === "_" ||
                grid(A.x + 1, A.y) === "_" ||
                (!isVertex(grid(A)) &&
                  (isSolidHLine(dnlt) || isSolidVLine(dnlt)))
              ) {
                // Continue half a cell more to connect at:
                //               /     \ |
                //    /  /      v       v|
                // __/  /__   ----       |

                A.x -= 0.5;
                A.y += 0.5;
              } else if (isPoint(dnlt)) {
                // Continue 1/4 cell more to connect at:
                //
                //       /
                //      v
                //     o

                A.x -= 0.25;
                A.y += 0.25;
              }
              pathSet.insert(new Path(A, B));

              // Continue the search from the end x+1,y-1
            } // lineContains
          }
        }
      } // y

      // Now look for curved corners. The syntax constraints require
      // that these can always be identified by looking at three
      // horizontally-adjacent characters.
      for (var y = 0; y < grid.height; ++y) {
        for (var x = 0; x < grid.width; ++x) {
          var c = grid(x, y);

          // Note that because of undirected vertices, the
          // following cases are not exclusive
          if (isTopVertex(c)) {
            // -.
            //   |
            if (
              isSolidHLine(grid(x - 1, y)) &&
              isSolidVLine(grid(x + 1, y + 1))
            ) {
              grid.setUsed(x - 1, y);
              grid.setUsed(x, y);
              grid.setUsed(x + 1, y + 1);
              pathSet.insert(
                new Path(
                  Vec2(x - 1, y),
                  Vec2(x + 1, y + 1),
                  Vec2(x + 1.1, y),
                  Vec2(x + 1, y + 1)
                )
              );
            }

            //  .-
            // |
            if (
              isSolidHLine(grid(x + 1, y)) &&
              isSolidVLine(grid(x - 1, y + 1))
            ) {
              grid.setUsed(x - 1, y + 1);
              grid.setUsed(x, y);
              grid.setUsed(x + 1, y);
              pathSet.insert(
                new Path(
                  Vec2(x + 1, y),
                  Vec2(x - 1, y + 1),
                  Vec2(x - 1.1, y),
                  Vec2(x - 1, y + 1)
                )
              );
            }
          }

          // Special case patterns:
          //   .  .   .  .
          //  (  o     )  o
          //   '  .   '  '
          if (
            (c === ")" || isPoint(c)) &&
            grid(x - 1, y - 1) === "." &&
            grid(x - 1, y + 1) === "'"
          ) {
            grid.setUsed(x, y);
            grid.setUsed(x - 1, y - 1);
            grid.setUsed(x - 1, y + 1);
            pathSet.insert(
              new Path(
                Vec2(x - 2, y - 1),
                Vec2(x - 2, y + 1),
                Vec2(x + 0.6, y - 1),
                Vec2(x + 0.6, y + 1)
              )
            );
          }

          if (
            (c === "(" || isPoint(c)) &&
            grid(x + 1, y - 1) === "." &&
            grid(x + 1, y + 1) === "'"
          ) {
            grid.setUsed(x, y);
            grid.setUsed(x + 1, y - 1);
            grid.setUsed(x + 1, y + 1);
            pathSet.insert(
              new Path(
                Vec2(x + 2, y - 1),
                Vec2(x + 2, y + 1),
                Vec2(x - 0.6, y - 1),
                Vec2(x - 0.6, y + 1)
              )
            );
          }

          if (isBottomVertex(c)) {
            //   |
            // -'
            if (
              isSolidHLine(grid(x - 1, y)) &&
              isSolidVLine(grid(x + 1, y - 1))
            ) {
              grid.setUsed(x - 1, y);
              grid.setUsed(x, y);
              grid.setUsed(x + 1, y - 1);
              pathSet.insert(
                new Path(
                  Vec2(x - 1, y),
                  Vec2(x + 1, y - 1),
                  Vec2(x + 1.1, y),
                  Vec2(x + 1, y - 1)
                )
              );
            }

            // |
            //  '-
            if (
              isSolidHLine(grid(x + 1, y)) &&
              isSolidVLine(grid(x - 1, y - 1))
            ) {
              grid.setUsed(x - 1, y - 1);
              grid.setUsed(x, y);
              grid.setUsed(x + 1, y);
              pathSet.insert(
                new Path(
                  Vec2(x + 1, y),
                  Vec2(x - 1, y - 1),
                  Vec2(x - 1.1, y),
                  Vec2(x - 1, y - 1)
                )
              );
            }
          }
        } // for x
      } // for y

      // Find low horizontal lines marked with underscores. These
      // are so simple compared to the other cases that we process
      // them directly here without a helper function. Process these
      // from top to bottom and left to right so that we can read
      // them in a single sweep.
      //
      // Exclude the special case of double underscores going right
      // into an ASCII character, which could be a source code
      // identifier such as __FILE__ embedded in the diagram.
      for (var y = 0; y < grid.height; ++y) {
        for (var x = 0; x < grid.width - 2; ++x) {
          let lt = grid(x - 1, y);

          if (
            grid(x, y) === "_" &&
            grid(x + 1, y) === "_" &&
            (!isASCIILetter(grid(x + 2, y)) || lt === "_") &&
            (!isASCIILetter(lt) || grid(x + 2, y) === "_")
          ) {
            let ltlt = grid(x - 2, y);
            var A = Vec2(x - 0.5, y + 0.5);

            if (
              lt === "|" ||
              grid(x - 1, y + 1) === "|" ||
              lt === "." ||
              grid(x - 1, y + 1) === "'"
            ) {
              // Extend to meet adjacent vertical
              A.x -= 0.5;

              // Very special case of overrunning into the side of a curve,
              // needed for logic gate diagrams
              if (
                lt === "." &&
                (ltlt === "-" || ltlt === ".") &&
                grid(x - 2, y + 1) === "("
              ) {
                A.x -= 0.5;
              }
            } else if (lt === "/") {
              A.x -= 1.0;
            }

            // Detect overrun of a tight double curve
            if (
              lt === "(" &&
              ltlt === "(" &&
              grid(x, y + 1) === "'" &&
              grid(x, y - 1) === "."
            ) {
              A.x += 0.5;
            }
            lt = ltlt = undefined;

            do {
              grid.setUsed(x, y);
              ++x;
            } while (grid(x, y) === "_");

            var B = Vec2(x - 0.5, y + 0.5);
            var c = grid(x, y);
            const rt = grid(x + 1, y);
            var dn = grid(x, y + 1);

            if (c === "|" || dn === "|" || c === "." || dn === "'") {
              // Extend to meet adjacent vertical
              B.x += 0.5;

              // Very special case of overrunning into the side of a curve,
              // needed for logic gate diagrams
              if (
                c === "." &&
                (rt === "-" || rt === ".") &&
                grid(x + 1, y + 1) === ")"
              ) {
                B.x += 0.5;
              }
            } else if (c === "\\") {
              B.x += 1.0;
            }

            // Detect overrun of a tight double curve
            if (
              c === ")" &&
              rt === ")" &&
              grid(x - 1, y + 1) === "'" &&
              grid(x - 1, y - 1) === "."
            ) {
              B.x += -0.5;
            }

            pathSet.insert(new Path(A, B));
          }
        } // for x
      } // for y
    } // findPaths

    function findDecorations(grid, pathSet, decorationSet) {
      function isEmptyOrVertex(c) {
        return c === " " || /[^a-zA-Z0-9]|[ov]/.test(c);
      }
      function isLetter(c) {
        const x = c.toUpperCase().charCodeAt(0);
        return x > 64 && x < 91;
      }

      /** Is the point in the center of these values on a line? Allow points that are vertically
            adjacent but not horizontally--they wouldn't fit anyway, and might be text. */
      function onLine(up, dn, lt, rt) {
        return (
          (isEmptyOrVertex(dn) || isPoint(dn)) &&
          (isEmptyOrVertex(up) || isPoint(up)) &&
          isEmptyOrVertex(rt) &&
          isEmptyOrVertex(lt)
        );
      }

      for (let x = 0; x < grid.width; ++x) {
        for (let j = 0; j < grid.height; ++j) {
          const c = grid(x, j);
          const y = j;

          if (isJump(c)) {
            // Ensure that this is really a jump and not a stray character
            if (
              pathSet.downEndsAt(x, y - 0.5) &&
              pathSet.upEndsAt(x, y + 0.5)
            ) {
              decorationSet.insert(x, y, c);
              grid.setUsed(x, y);
            }
          } else if (isPoint(c)) {
            const up = grid(x, y - 1);
            const dn = grid(x, y + 1);
            const lt = grid(x - 1, y);
            const rt = grid(x + 1, y);
            const llt = grid(x - 2, y);
            const rrt = grid(x + 2, y);

            if (
              pathSet.rightEndsAt(x - 1, y) || // Must be at the end of a line...
              pathSet.leftEndsAt(x + 1, y) || // or completely isolated NSEW
              pathSet.downEndsAt(x, y - 1) ||
              pathSet.upEndsAt(x, y + 1) ||
              pathSet.upEndsAt(x, y) || // For points on vertical lines
              pathSet.downEndsAt(x, y) || // that are surrounded by other characters
              onLine(up, dn, lt, rt)
            ) {
              decorationSet.insert(x, y, c);
              grid.setUsed(x, y);
            }
          } else if (isGray(c)) {
            decorationSet.insert(x, y, c);
            grid.setUsed(x, y);
          } else if (isTri(c)) {
            decorationSet.insert(x, y, c);
            grid.setUsed(x, y);
          } else {
            // Arrow heads

            // If we find one, ensure that it is really an
            // arrow head and not a stray character by looking
            // for a connecting line.
            let dx = 0;
            if (
              c === ">" &&
              (pathSet.rightEndsAt(x, y) ||
                pathSet.horizontalPassesThrough(x, y))
            ) {
              if (isPoint(grid(x + 1, y))) {
                // Back up if connecting to a point so as to not
                // overlap it
                dx = -0.5;
              }
              decorationSet.insert(x + dx, y, ">", 0);
              grid.setUsed(x, y);
            } else if (
              c === "<" &&
              (pathSet.leftEndsAt(x, y) ||
                pathSet.horizontalPassesThrough(x, y))
            ) {
              if (isPoint(grid(x - 1, y))) {
                // Back up if connecting to a point so as to not
                // overlap it
                dx = 0.5;
              }
              decorationSet.insert(x + dx, y, ">", 180);
              grid.setUsed(x, y);
            } else if (c === "^") {
              // Because of the aspect ratio, we need to look
              // in two slots for the end of the previous line
              if (pathSet.upEndsAt(x, y - 0.5)) {
                decorationSet.insert(x, y - 0.5, ">", 270);
                grid.setUsed(x, y);
              } else if (pathSet.upEndsAt(x, y)) {
                decorationSet.insert(x, y, ">", 270);
                grid.setUsed(x, y);
              } else if (pathSet.diagonalUpEndsAt(x + 0.5, y - 0.5)) {
                decorationSet.insert(
                  x + 0.5,
                  y - 0.5,
                  ">",
                  270 + DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.diagonalUpEndsAt(x + 0.25, y - 0.25)) {
                decorationSet.insert(
                  x + 0.25,
                  y - 0.25,
                  ">",
                  270 + DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.diagonalUpEndsAt(x, y)) {
                decorationSet.insert(x, y, ">", 270 + DIAGONAL_ANGLE);
                grid.setUsed(x, y);
              } else if (pathSet.backDiagonalUpEndsAt(x, y)) {
                decorationSet.insert(x, y, c, 270 - DIAGONAL_ANGLE);
                grid.setUsed(x, y);
              } else if (pathSet.backDiagonalUpEndsAt(x - 0.5, y - 0.5)) {
                decorationSet.insert(x - 0.5, y - 0.5, c, 270 - DIAGONAL_ANGLE);
                grid.setUsed(x, y);
              } else if (pathSet.backDiagonalUpEndsAt(x - 0.25, y - 0.25)) {
                decorationSet.insert(
                  x - 0.25,
                  y - 0.25,
                  c,
                  270 - DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.verticalPassesThrough(x, y)) {
                // Only try this if all others failed
                decorationSet.insert(x, y - 0.5, ">", 270);
                grid.setUsed(x, y);
              }
            } else if (c === "v") {
              if (pathSet.downEndsAt(x, y + 0.5)) {
                decorationSet.insert(x, y + 0.5, ">", 90);
                grid.setUsed(x, y);
              } else if (pathSet.downEndsAt(x, y)) {
                decorationSet.insert(x, y, ">", 90);
                grid.setUsed(x, y);
              } else if (pathSet.diagonalDownEndsAt(x, y)) {
                decorationSet.insert(x, y, ">", 90 + DIAGONAL_ANGLE);
                grid.setUsed(x, y);
              } else if (pathSet.diagonalDownEndsAt(x - 0.5, y + 0.5)) {
                decorationSet.insert(
                  x - 0.5,
                  y + 0.5,
                  ">",
                  90 + DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.diagonalDownEndsAt(x - 0.25, y + 0.25)) {
                decorationSet.insert(
                  x - 0.25,
                  y + 0.25,
                  ">",
                  90 + DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.backDiagonalDownEndsAt(x, y)) {
                decorationSet.insert(x, y, ">", 90 - DIAGONAL_ANGLE);
                grid.setUsed(x, y);
              } else if (pathSet.backDiagonalDownEndsAt(x + 0.5, y + 0.5)) {
                decorationSet.insert(
                  x + 0.5,
                  y + 0.5,
                  ">",
                  90 - DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.backDiagonalDownEndsAt(x + 0.25, y + 0.25)) {
                decorationSet.insert(
                  x + 0.25,
                  y + 0.25,
                  ">",
                  90 - DIAGONAL_ANGLE
                );
                grid.setUsed(x, y);
              } else if (pathSet.verticalPassesThrough(x, y)) {
                // Only try this if all others failed
                decorationSet.insert(x, y + 0.5, ">", 90);
                grid.setUsed(x, y);
              }
            } // arrow heads
          } // decoration type
        } // y
      } // x
    } // findArrowHeads

    // Cases where we want to redraw at graphical unicode character
    // to adjust its weight or shape for a conventional application
    // in constructing a diagram.
    function findReplacementCharacters(grid, pathSet) {
      for (let x = 0; x < grid.width; ++x) {
        for (let y = 0; y < grid.height; ++y) {
          if (grid.isUsed(x, y)) continue;
          const c = grid(x, y);
          switch (c) {
            case "╱":
              pathSet.insert(
                new Path(Vec2(x - 0.5, y + 0.5), Vec2(x + 0.5, y - 0.5))
              );
              grid.setUsed(x, y);
              break;
            case "╲":
              pathSet.insert(
                new Path(Vec2(x - 0.5, y - 0.5), Vec2(x + 0.5, y + 0.5))
              );
              grid.setUsed(x, y);
              break;
          }
        }
      }
    } // findReplacementCharacters

    const grid = makeGrid(diagramString);

    const pathSet = new PathSet();
    const decorationSet = new DecorationSet();

    findPaths(grid, pathSet);
    findReplacementCharacters(grid, pathSet);
    findDecorations(grid, pathSet, decorationSet);

    let svg = `<svg class="diagram" xmlns="http://www.w3.org/2000/svg" version="1.1" height="${
      (grid.height + 1) * SCALE * ASPECT
    }" width="${(grid.width + 1) * SCALE}"`;

    if (alignmentHint === "floatleft") {
      svg += ' style="float:left;margin:15px 30px 15px 0;"';
    } else if (alignmentHint === "floatright") {
      svg += ' style="float:right;margin:15px 0 15px 30px;"';
    } else if (alignmentHint === "center") {
      svg += ' style="margin:0 auto 0 auto;"';
    }

    svg += `><g transform="translate(${Vec2(1, 1)})">\n`;

    if (DEBUG_SHOW_GRID) {
      svg += '<g style="opacity:0.1">\n';
      for (var x = 0; x < grid.width; ++x) {
        for (var y = 0; y < grid.height; ++y) {
          svg += `<rect x="${(x - 0.5) * SCALE + 1}" + y="${
            (y - 0.5) * SCALE * ASPECT + 2
          }" width="${SCALE - 2}" height="${SCALE * ASPECT - 2}" style="fill:`;
          if (grid.isUsed(x, y)) {
            svg += "red;";
          } else if (grid(x, y) === " ") {
            svg += "gray;opacity:0.05";
          } else {
            svg += "blue;";
          }
          svg += '"/>\n';
        }
      }
      svg += "</g>\n";
    }

    svg += pathSet.toSVG();
    svg += decorationSet.toSVG();

    // Convert any remaining characters
    if (!DEBUG_HIDE_PASSTHROUGH) {
      svg += '<g transform="translate(0,0)">';
      for (var y = 0; y < grid.height; ++y) {
        for (var x = 0; x < grid.width; ++x) {
          var c = grid(x, y);
          if (/[\u2B22\u2B21]/.test(c)) {
            // Enlarge hexagons so that they fill a grid
            svg += `<text text-anchor="middle" x="${x * SCALE}" y="${
              4 + y * SCALE * ASPECT
            }" style="font-size:20.5px">${escapeHTMLEntities(c)}</text>`;
          } else if (c !== " " && !grid.isUsed(x, y)) {
            svg += `<text text-anchor="middle" x="${x * SCALE}" y="${
              4 + y * SCALE * ASPECT
            }">${escapeHTMLEntities(c)}</text>`;
          } // if
        } // y
      } // x
      svg += "</g>";
    }

    if (DEBUG_SHOW_SOURCE) {
      // Offset the characters a little for easier viewing
      svg += '<g transform="translate(2,2)">\n';
      for (var x = 0; x < grid.width; ++x) {
        for (var y = 0; y < grid.height; ++y) {
          var c = grid(x, y);
          if (c !== " ") {
            svg += `<text text-anchor="middle" x="${x * SCALE}" y="${
              4 + y * SCALE * ASPECT
            }" style="fill:#F00;font-family:Menlo,monospace;font-size:12px;text-align:center">${escapeHTMLEntities(
              c
            )}</text>`;
          } // if
        } // y
      } // x
      svg += "</g>";
    } // if

    svg += "</g></svg>";

    svg = svg.rp(new RegExp(HIDE_O, "g"), "o");

    return svg;
  }

  ////////////////////////// Processing for INSERT HERE
  //
  // Insert command processing modifies the entire document and potentially
  // delays further processing, so it is handled specially and runs the main
  // markdeep processing as a callback
  //
  // node: the node being processed for markdeep. This is document.body
  // in markdeep mode, but may be another node in html or script mode.
  //
  // processMarkdeepCallback: function to run when insert is complete
  // to evaluate markdeep
  function processInsertCommands(nodeArray, sourceArray, insertDoneCallback) {
    const myURLParse = /([^?]+)(?:\?id=(inc\d+)&p=([^&]+))?/.exec(
      location.href
    );

    const myBase = removeFilename(myURLParse[1]);
    const myID = myURLParse[2];
    const parentBase = removeFilename(
      myURLParse[3] && decodeURIComponent(myURLParse[3])
    );
    const childFrameStyle = "display:none";
    let includeCounter = 0;
    const IAmAChild = myID; // !== undefined
    let IAmAParent = false;
    let numIncludeChildrenLeft = 0;

    // Helper function for use by children
    function sendContentsToMyParent() {
      let body = document.body.innerHTML;

      // Fix relative URLs within the body
      const baseref = document.baseURI.rp(/\/[^/]+$/, "/");
      const serverref = baseref.match(/[^:/]{3,6}:\/\/[^/]*\//)[0];

      // Cases where URLs appear:
      //
      // ![](...)
      // [](...)
      // [link]: ...
      // <img src="...">
      // <script src="...">
      // <a href="...">
      // <link href="...">
      //
      // A url is relative if it does not begin with '^[a-z]{3,6}://|^#'

      // Protect code fences
      // TODO

      function makeAbsoluteURL(url) {
        return /^[a-z]{3,6}:\/\//.test(url)
          ? url
          : url[0] === "/"
          ? // Make relative to server
            serverref + url.ss(1)
          : // Make relative to source document
            baseref + url;
      }

      // Unquoted images and links
      body = body.rp(
        /\]\([ \t]*([^#")][^ "\)]+)([ \t\)])/g,
        (match, url, suffix) => {
          return `](${makeAbsoluteURL(url)}${suffix}`;
        }
      );

      // Quoted images and links
      body = body.rp(
        /\]\([ \t]*"([^#"][^"]+)"([ \t\)])/g,
        (match, url, suffix) => {
          return `]("${makeAbsoluteURL(url)}"${suffix}`;
        }
      );

      // Raw HTML
      body = body.rp(
        /(src|href)=(["'])([^#>][^"'\n>]+)\2/g,
        (match, type, quot, url) => {
          return `${type}=${quot}${makeAbsoluteURL(url)}${quot}`;
        }
      );

      // Reference links
      body = body.rp(
        /(\n\[[^\]>\n \t]:[ \t]*)([^# \t][^ \t]+)"/g,
        (match, prefix, url) => {
          return prefix + makeAbsoluteURL(url);
        }
      );

      // Unprotect code fences
      // TODO

      // console.log(location.pathname + " sent message to parent");
      // Send the document contents after the childFrame replaced itself
      // (not the source variable captured when this function was defined!)
      parent.postMessage([myID, "=", body].join(""), "*");
    }

    // Strip the filename from the url, if there is one (and it is a string)
    function removeFilename(url) {
      return url && url.ss(0, url.lastIndexOf("/") + 1);
    }

    // Called when this entire document is ready for either markdeep
    // processing or sending to its parent for markdeep processing.
    //
    // IAmAChild: Truish if this document is a child
    //
    // sourceArray: If known, source is the code for the nodes. If it was modified, it is not provided
    function documentReady(IAmAChild, nodeArray, sourceArray) {
      if (IAmAChild) {
        // I'm a child and not waiting for my own children, so trigger the send now. My parent will
        // do the processing.

        // console.log("Leaf node " + location.pathname + " sending to parent");
        sendContentsToMyParent();
      } else {
        // No includes. Run markdeep processing after the rest of this file parses

        // console.log("non-parent, non-child Parent scheduling markdeepProcessor");
        setTimeout(() => {
          insertDoneCallback(nodeArray, sourceArray);
        }, 1);
      }
    }

    function messageCallback(event) {
      // Parse the message. Ensure that it is for the Markdeep/include.js system.
      let childID = false;
      const childBody =
        event.data.substring &&
        event.data.replace(/^(inc\d+)=/, (match, a) => {
          childID = a;
          return "";
        });

      if (childID) {
        // This message event was for the Markdeep/include.js system

        //console.log(location.href + ' received a message from child ' + childID);

        // Replace the corresponding node's contents
        const childFrame = document.getElementById(childID);
        childFrame.outerHTML = `\n${childBody}\n`;

        --numIncludeChildrenLeft;

        //console.log(window.location.pathname, 'numIncludeChildrenLeft = ' + numIncludeChildrenLeft);

        if (numIncludeChildrenLeft <= 0) {
          // This was the last child
          documentReady(IAmAChild, nodeArray);
        }
      }
    }

    const isFirefox =
      navigator.userAgent.indexOf("Firefox") !== -1 &&
      navigator.userAgent.indexOf("Seamonkey") === -1;

    // Find all insert or embed statements in all nodes and replace them
    for (var i = 0; i < sourceArray.length; ++i) {
      sourceArray[i] = sourceArray[i].rp(
        /(?:^|\s)\((insert|embed)[ \t]+(\S+\.\S*)[ \t]+(height=[a-zA-Z0-9.]+[ \t]+)?here\)\s/g,
        (match, type, src, params) => {
          const childID = `inc${++includeCounter}`;
          const isHTML = src.toLowerCase().rp(/\?.*$/, "").endsWith(".html");
          if (type === "embed" || !isHTML) {
            // This is not embedding another Markdeep file. Instead it is embedding
            // some other kind of document.
            let tag = "iframe",
              url = "src";
            const style = params ? ` style="${params.rp(/=/g, ":")}"` : "";

            if (isFirefox && !isHTML) {
              // Firefox doesn't handle embedding other non-html documents in iframes
              // correctly (it tries to download them!), so we switch to an object
              // tag--which seems to work identically to the embed tag on this browser.
              tag = "object";
              url = "data";

              // Firefox can be confused on a server (but not
              // locally) by misconfigured MIME types and show
              // nothing.  But if we know that we're on a
              // server, we can go ahead and make an
              // XMLHttpRequest() for the underlying document
              // directly. Replace the insert in this case.
              if (location.protocol.startsWith("http")) {
                const req = new XMLHttpRequest();
                (function (childID, style) {
                  req.addEventListener("load", function () {
                    document.getElementById(childID).outerHTML = entag(
                      "iframe",
                      "",
                      `class="textinsert" srcdoc="<pre>${this.responseText.replace(
                        /"/g,
                        "&quot;"
                      )}</pre>"${style}`
                    );
                  });
                  req.overrideMimeType("text/plain; charset=x-user-defined");
                  req.open("GET", src);
                  req.send();
                })(childID, style);
              }
            }

            return entag(
              tag,
              "",
              `class="textinsert" id="${childID}" ${url}="${src}"${style}`
            );
          }

          if (numIncludeChildrenLeft === 0) {
            // This is the first child observed. Prepare to receive messages from the
            // embedded children.
            IAmAParent = true;
            addEventListener("message", messageCallback);
          }

          ++numIncludeChildrenLeft;
          //console.log(window.location.pathname, 'numIncludeChildrenLeft = ' + numIncludeChildrenLeft);

          // Replace this tag with a frame that loads the document.  Once loaded, it will
          // send a message with its contents for use as a replacement.
          return `<iframe src="${src}?id=${childID}&p=${encodeURIComponent(
            myBase
          )}" id="${childID}" style="${childFrameStyle}" content="text/html;charset=UTF-8"></iframe>`;
        }
      );
    }

    // console.log('after insert: ' + source);

    // Process all nodes
    if (IAmAParent) {
      // I'm waiting on children, so don't run the full processor
      // yet, but do substitute the iframe code so that it can
      // launch. I may be a child as well...this will be determined
      // when numIncludeChildren hits zero.

      for (var i = 0; i < sourceArray.length; ++i) {
        nodeArray[i].innerHTML = sourceArray[i];
      }
    } else {
      // The source was not modified
      documentReady(IAmAChild, nodeArray, sourceArray);
    }
  } // function processInsertCommands()

  /* xcode.min.js modified */
  const HIGHLIGHT_STYLESHEET =
    "<style>.hljs{display:block;overflow-x:auto;padding:0.5em;background:#fff;color:#000;-webkit-text-size-adjust:none}" +
    ".hljs-comment{color:#006a00}" +
    ".hljs-keyword{color:#02E}" +
    ".hljs-literal,.nginx .hljs-title{color:#aa0d91}" +
    ".method,.hljs-list .hljs-title,.hljs-tag .hljs-title,.setting .hljs-value,.hljs-winutils,.tex .hljs-command,.http .hljs-title,.hljs-request,.hljs-status,.hljs-name{color:#008}" +
    ".hljs-envvar,.tex .hljs-special{color:#660}" +
    ".hljs-string{color:#c41a16}" +
    ".hljs-tag .hljs-value,.hljs-cdata,.hljs-filter .hljs-argument,.hljs-attr_selector,.apache .hljs-cbracket,.hljs-date,.hljs-regexp{color:#080}" +
    ".hljs-sub .hljs-identifier,.hljs-pi,.hljs-tag,.hljs-tag .hljs-keyword,.hljs-decorator,.ini .hljs-title,.hljs-shebang,.hljs-prompt,.hljs-hexcolor,.hljs-rule .hljs-value,.hljs-symbol,.hljs-symbol .hljs-string,.hljs-number,.css .hljs-function,.hljs-function .hljs-title,.coffeescript .hljs-attribute{color:#A0C}" +
    ".hljs-function .hljs-title{font-weight:bold;color:#000}" +
    ".hljs-class .hljs-title,.smalltalk .hljs-class,.hljs-type,.hljs-typename,.hljs-tag .hljs-attribute,.hljs-doctype,.hljs-class .hljs-id,.hljs-built_in,.setting,.hljs-params,.clojure .hljs-attribute{color:#5c2699}" +
    ".hljs-variable{color:#3f6e74}" +
    ".css .hljs-tag,.hljs-rule .hljs-property,.hljs-pseudo,.hljs-subst{color:#000}" +
    ".css .hljs-class,.css .hljs-id{color:#9b703f}" +
    ".hljs-value .hljs-important{color:#ff7700;font-weight:bold}" +
    ".hljs-rule .hljs-keyword{color:#c5af75}" +
    ".hljs-annotation,.apache .hljs-sqbracket,.nginx .hljs-built_in{color:#9b859d}" +
    ".hljs-preprocessor,.hljs-preprocessor *,.hljs-pragma{color:#643820}" +
    ".tex .hljs-formula{background-color:#eee;font-style:italic}" +
    ".diff .hljs-header,.hljs-chunk{color:#808080;font-weight:bold}" +
    ".diff .hljs-change{background-color:#bccff9}" +
    ".hljs-addition{background-color:#baeeba}" +
    ".hljs-deletion{background-color:#ffc8bd}" +
    ".hljs-comment .hljs-doctag{font-weight:bold}" +
    ".method .hljs-id{color:#000}</style>";

  function isMarkdeepScriptName(str) {
    return str.search(/markdeep\S*?\.js$/i) !== -1;
  }
  function toArray(list) {
    return Array.prototype.slice.call(list);
  }

  // Intentionally uninitialized global variable used to detect
  // recursive invocations
  if (!window.alreadyProcessedMarkdeep) {
    window.alreadyProcessedMarkdeep = true;

    // Detect the noformat argument to the URL
    const noformat = window.location.href.search(/\?.*noformat.*/i) !== -1;

    // Export relevant methods
    window.markdeep = Object.freeze({
      format: markdeepToHTML,
      formatDiagram: diagramToSVG,
      stylesheet: function () {
        return STYLESHEET + sectionNumberingStylesheet() + HIGHLIGHT_STYLESHEET;
      },
    });

    // Not needed: jax: ["input/TeX", "output/SVG"],
    const MATHJAX_CONFIG = `${
      '<script type="text/x-mathjax-config">MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "AMS"} } });</script>' +
      '<span style="display:none">'
    }${
      // Custom definitions (NC == \newcommand)
      "$$NC{\\n}{\\hat{n}}NC{\\thetai}{\\theta_\\mathrm{i}}NC{\\thetao}{\\theta_\\mathrm{o}}NC{\\d}[1]{\\mathrm{d}#1}NC{\\w}{\\hat{\\omega}}NC{\\wi}{\\w_\\mathrm{i}}NC{\\wo}{\\w_\\mathrm{o}}NC{\\wh}{\\w_\\mathrm{h}}NC{\\Li}{L_\\mathrm{i}}NC{\\Lo}{L_\\mathrm{o}}NC{\\Le}{L_\\mathrm{e}}NC{\\Lr}{L_\\mathrm{r}}NC{\\Lt}{L_\\mathrm{t}}NC{\\O}{\\mathrm{O}}NC{\\degrees}{{^{\\large\\circ}}}NC{\\T}{\\mathsf{T}}NC{\\mathset}[1]{\\mathbb{#1}}NC{\\Real}{\\mathset{R}}NC{\\Integer}{\\mathset{Z}}NC{\\Boolean}{\\mathset{B}}NC{\\Complex}{\\mathset{C}}NC{\\un}[1]{\\,\\mathrm{#1}}$$\n".rp(
        /NC/g,
        "\\newcommand"
      )
    }</span>\n`;

    // The following option forces better rendering on some browsers, but also makes it impossible to copy-paste text with
    // inline equations:
    //
    // 'config=TeX-MML-AM_SVG'
    const MATHJAX_URL =
      "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML";

    const loadMathJax = function () {
      // Dynamically load mathjax
      const script = document.createElement("script");
      script.type = "text/javascript";
      script.src = MATHJAX_URL;
      document.getElementsByTagName("head")[0].appendChild(script);
    };

    const needsMathJax = function (html) {
      // Need MathJax if $$ ... $$, \( ... \), or \begin{
      return (
        option("detectMath") &&
        (html.search(/(?:\$\$[\s\S]+\$\$)|(?:\\begin{)/m) !== -1 ||
          html.search(/\\\(.*\\\)/) !== -1)
      );
    };

    const mode = option("mode");
    switch (mode) {
      case "script":
        // Nothing to do
        return;

      case "html":
      case "doxygen":
        // Process explicit diagram tags by themselves
        toArray(document.getElementsByClassName("diagram"))
          .concat(toArray(document.getElementsByTagName("diagram")))
          .forEach((element) => {
            let src = unescapeHTMLEntities(element.innerHTML);
            // Remove the first and last string (which probably
            // had the pre or diagram tag as part of them) if they are
            // empty except for whitespace.
            src = src.rp(/(:?^[ \t]*\n)|(:?\n[ \t]*)$/g, "");

            if (mode === "doxygen") {
              // Undo Doxygen's &ndash and &mdash, which are impossible to
              // detect once the browser has parsed the document
              src = src.rp(new RegExp("\u2013", "g"), "--");
              src = src.rp(new RegExp("\u2014", "g"), "---");

              // Undo Doxygen's links within the diagram because they throw off spacing
              src = src.rp(/<a class="el" .*>(.*)<\/a>/g, "$1");
            }
            element.outerHTML = `<center class="md">${diagramToSVG(
              removeLeadingSpace(src),
              ""
            )}</center>`;
          });

        // Collect all nodes that will receive markdeep processing
        var markdeepNodeArray = toArray(
          document.getElementsByClassName("markdeep")
        ).concat(toArray(document.getElementsByTagName("markdeep")));

        // Extract the source code of markeep nodes
        var sourceArray = markdeepNodeArray.map((node) => {
          return removeLeadingSpace(unescapeHTMLEntities(node.innerHTML));
        });

        // Process insert commands and then trigger markdeep processing
        processInsertCommands(
          markdeepNodeArray,
          sourceArray,
          (nodeArray, sourceArray) => {
            // Update sourceArray if needed because the source code was mutated
            // by insert processing
            sourceArray =
              sourceArray ||
              nodeArray.map((node) => {
                return removeLeadingSpace(unescapeHTMLEntities(node.innerHTML));
              });

            // Process all nodes, replacing them as we progress
            let anyNeedsMathJax = false;
            for (var i = 0; i < markdeepNodeArray.length; ++i) {
              const oldNode = markdeepNodeArray[i];
              const newNode = document.createElement("div");
              const source = removeLeadingSpace(
                unescapeHTMLEntities(oldNode.innerHTML)
              );
              const html = markdeepToHTML(source, true);
              anyNeedsMathJax = anyNeedsMathJax || needsMathJax(html);
              newNode.innerHTML = html;
              oldNode.parentNode.replaceChild(newNode, oldNode);
            }

            if (anyNeedsMathJax) {
              loadMathJax();
            }

            // Include our stylesheet even if there are no MARKDEEP tags, but do not include the BODY_STYLESHEET.
            document.head.innerHTML =
              window.markdeep.stylesheet() +
              document.head.innerHTML +
              (anyNeedsMathJax ? MATHJAX_CONFIG : "");

            // Remove fallback nodes
            const fallbackNodes = document.getElementsByClassName("fallback");
            for (var i = 0; i < fallbackNodes.length; ++i) {
              fallbackNodes[i].remove();
            }
          }
        );

        window.alreadyProcessedMarkdeep = true;

        return;
    }

    // The following is Morgan's massive hack for allowing browsers to
    // directly parse Markdown from what appears to be a text file, but is
    // actually an intentionally malformed HTML file.

    // In order to be able to show what source files look like, the
    // noformat argument may be supplied.

    if (!noformat) {
      // Remove any recursive references to this script so that we don't trigger the cost of
      // recursive *loading*. (The alreadyProcessedMarkdeep variable will prevent recursive
      // *execution*.) We allow other scripts to pass through.
      toArray(document.getElementsByTagName("script")).forEach((node) => {
        if (isMarkdeepScriptName(node.src)) {
          node.parentNode.removeChild(node);
        }
      });

      // Add an event handler for scrolling
      const scrollThreshold = parseInt(option("scrollThreshold"));
      document.addEventListener("scroll", () => {
        const b = document.body,
          c = b.classList,
          s = "scrolled";
        if (b.scrollTop > scrollThreshold) c.add(s);
        else c.remove(s);
      });

      // Hide the body while formatting
      if (document.body) {
        document.body.style.visibility = "hidden";
      }
    }

    let source = nodeToMarkdeepSource(document.body);

    if (noformat) {
      // Abort processing.
      source = source.rp(/<!-- Markdeep:.+$/gm, "") + MARKDEEP_LINE;

      // Escape the <> (not ampersand) that we just added
      source = source.rp(/</g, "&lt;").rp(/>/g, "&gt;");

      // Replace the Markdeep line itself so that ?noformat examples have a valid line to copy
      document.body.innerHTML = entag("pre", source);

      const fallbackNodes = document.getElementsByClassName("fallback");
      for (let i = 0; i < fallbackNodes.length; ++i) {
        fallbackNodes[i].remove();
      }

      return;
    }

    // In the common case of no INSERT commands, source is the original source
    // passed to avoid reparsing.
    const markdeepProcessor = function (source) {
      // Recompute the source text from the current version of the document
      // if it was unmodified
      source = source || nodeToMarkdeepSource(document.body);
      let markdeepHTML = markdeepToHTML(source, false);

      // console.log(markdeepHTML); // Final processed source

      /////////////////////////////////////////////////////////////
      // Add the section header event handlers

      const onContextMenu = function (event) {
        let menu = null;
        try {
          // Test for whether the click was on a header
          const match = event.target.tagName.match(/^H(\d)$/);
          if (!match) {
            return;
          }

          // The event target is a header...ensure that it is a Markdeep header
          // (we could be in HTML or Doxygen mode and have non-.md content in the
          // same document)
          let node = event.target;
          while (node) {
            if (node.classList.contains("md")) {
              break;
            } else {
              node = node.parentElement;
            }
          }
          if (!node) {
            // never found .md
            return;
          }

          // We are on a header
          const level = parseInt(match[1]) || 1;

          // Show the headerMenu
          menu = document.getElementById("mdContextMenu");
          if (!menu) {
            return;
          }

          const sectionType = ["Section", "Subsection"][Math.min(level - 1, 1)];
          // Search backwards two siblings to grab the URL generated
          const anchorNode =
            event.target.previousElementSibling.previousElementSibling;

          const sectionName = event.target.innerText.trim();
          const sectionLabel = sectionName.toLowerCase();
          const anchor = anchorNode.name;
          const url = `${
            String(location.origin) + location.pathname
          }#${anchor}`;

          let shortUrl = url;
          if (shortUrl.length > 17) {
            shortUrl = `${url.ss(0, 7)}&hellip;${location.pathname.ss(
              location.pathname.length - 8
            )}#${anchor}`;
          }

          let s = entag(
            "div",
            `Visit URL &ldquo;${shortUrl}&rdquo;`,
            `onclick="(location=&quot;${url}&quot;)"`
          );

          s += entag(
            "div",
            `Copy URL &ldquo;${shortUrl}&rdquo;`,
            `onclick="navigator.clipboard.writeText(&quot;${url}&quot)&&(document.getElementById('mdContextMenu').style.visibility='hidden')"`
          );

          s += entag(
            "div",
            `Copy Markdeep &ldquo;${sectionName} ${sectionType.toLowerCase()}&rdquo;`,
            `onclick="navigator.clipboard.writeText('${sectionName} ${sectionType.toLowerCase()}')&&(document.getElementById('mdContextMenu').style.visibility='hidden')"`
          );

          s += entag(
            "div",
            `Copy Markdeep &ldquo;${sectionType} [${sectionLabel}]&rdquo;`,
            `onclick="navigator.clipboard.writeText('${sectionType} [${sectionLabel}]')&&(document.getElementById('mdContextMenu').style.visibility='hidden')"`
          );

          s += entag(
            "div",
            "Copy HTML &ldquo;&lt;a href=&hellip;&gt;&rdquo;",
            `onclick="navigator.clipboard.writeText('&lt;a href=&quot;${url}&quot;&gt;${sectionName}&lt;/a&gt;')&&(document.getElementById('mdContextMenu').style.visibility='hidden')"`
          );

          menu.innerHTML = s;
          menu.style.visibility = "visible";
          menu.style.left = `${event.pageX}px`;
          menu.style.top = `${event.pageY}px`;

          event.preventDefault();
          return false;
        } catch (e) {
          // Something went wrong
          console.log(e);
          if (menu) {
            menu.style.visibility = "hidden";
          }
        }
      };

      markdeepHTML +=
        '<div id="mdContextMenu" style="visibility:hidden"></div>';

      document.addEventListener("contextmenu", onContextMenu, false);
      document.addEventListener("mousedown", (event) => {
        const menu = document.getElementById("mdContextMenu");
        if (menu) {
          for (let node = event.target; node; node = node.parentElement) {
            if (node === menu) {
              return;
            }
          }
          // Clicked off menu, so close it
          menu.style.visibility = "hidden";
        }
      });
      document.addEventListener("keydown", (event) => {
        if (event.keyCode === 27) {
          const menu = document.getElementById("mdContextMenu");
          if (menu) {
            menu.style.visibility = "hidden";
          }
        }
      });

      /////////////////////////////////////////////////////////////

      const needMathJax = needsMathJax(markdeepHTML);
      if (needMathJax) {
        markdeepHTML = MATHJAX_CONFIG + markdeepHTML;
      }

      markdeepHTML += MARKDEEP_FOOTER;

      // Replace the document. If using MathJax, include the custom Markdeep definitions
      const longDocument = source.length > 1000;

      // Setting "width" equal to 640 seems to give the best results on
      // mobile devices in portrait mode. Setting "width=device-width" can cause markdeep
      // to appear exceedingly narrow on phones in the Chrome mobile preview.
      // https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag
      const META =
        '<meta charset="UTF-8"><meta http-equiv="content-type" content="text/html;charset=UTF-8"><meta name="viewport" content="width=600, initial-scale=1">';
      let head =
        META +
        BODY_STYLESHEET +
        STYLESHEET +
        sectionNumberingStylesheet() +
        HIGHLIGHT_STYLESHEET;
      if (longDocument) {
        // Add more spacing before the title in a long document
        head += entag(
          "style",
          "div.title { padding-top: 40px; } div.afterTitles { height: 15px; }"
        );
      }

      if (window.location.href.search(/\?.*export.*/i) !== -1) {
        // Export mode
        let text = head + document.head.innerHTML + markdeepHTML;
        if (needMathJax) {
          // Dynamically load mathjax
          text += `<script src="${MATHJAX_URL}"></script>`;
        }
        document.body.innerHTML = entag("pre", escapeHTMLEntities(text));
      } else {
        document.head.innerHTML = head + document.head.innerHTML;
        document.body.innerHTML = markdeepHTML;
        if (needMathJax) {
          loadMathJax();
        }
      }

      // Change the ID of the body, so that CSS can distinguish Markdeep
      // controlling a whole document from Markdeep embedded within
      // a document in HTML mode.
      document.body.id = "md";
      document.body.style.visibility = "visible";

      const hashIndex = window.location.href.indexOf("#");
      if (hashIndex > -1) {
        // Scroll to the target; needed when loading is too fast (ironically)
        setTimeout(() => {
          const anchor = document.getElementsByName(
            window.location.href.substring(hashIndex + 1)
          );
          if (anchor.length > 0) {
            anchor[0].scrollIntoView();
          }
          if (window.markdeepOptions) {
            (window.markdeepOptions.onLoad || Math.cos)();
          }
        }, 100);
      } else if (window.markdeepOptions && window.markdeepOptions.onLoad) {
        // Wait for the DOM to update
        setTimeout(window.markdeepOptions.onLoad, 100);
      }
    };

    // Process insert commands, and then run the markdeepProcessor on the document
    processInsertCommands(
      [document.body],
      [source],
      (nodeArray, sourceArray) => {
        markdeepProcessor(sourceArray && sourceArray[0]);
      }
    );
  }
})();
